test_name,source_db,queries
alter.sql,postgresql,"[{'query': ""--\n-- Test for various ALTER statements\n--\n\n-- clean-up in case a prior regression run failed\nSET client_min_messages TO 'warning'"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'DROP DATABASE IF EXISTS sepgsql_test_regression_1', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DATABASE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'DROP DATABASE IF EXISTS sepgsql_test_regression', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DATABASE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'DROP USER IF EXISTS regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'RESET client_min_messages', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""RESET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- @SECURITY-CONTEXT=unconfined_u:unconfined_r:sepgsql_regtest_superuser_t:s0\n\n--\n-- CREATE Objects to be altered (with debug_audit being silent)\n--\nCREATE DATABASE sepgsql_test_regression_1', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DATABASE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE USER regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE SCHEMA regtest_schema_1', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SCHEMA"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE SCHEMA regtest_schema_2', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SCHEMA"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'GRANT ALL ON SCHEMA regtest_schema_1 TO public', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""GRANT"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'GRANT ALL ON SCHEMA regtest_schema_2  TO public', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""GRANT"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET search_path = regtest_schema_1, regtest_schema_2, public', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE TABLE regtest_table_1 (a int, b text)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE TABLE regtest_table_2 (c text) inherits (regtest_table_1)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE TABLE regtest_table_3 (x int primary key, y text)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '---\n-- partitioned table parent\nCREATE TABLE regtest_ptable_1 (o int, p text) PARTITION BY RANGE (o)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""BY"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""-- partitioned table children\nCREATE TABLE regtest_ptable_1_ones PARTITION OF regtest_ptable_1 FOR VALUES FROM ('0') TO ('10')"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""PARTITION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE TABLE regtest_ptable_1_tens PARTITION OF regtest_ptable_1 FOR VALUES FROM ('10') TO ('100')"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""PARTITION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '---\n\nCREATE SEQUENCE regtest_seq_1', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SEQUENCE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE VIEW regtest_view_1 AS SELECT * FROM regtest_table_1 WHERE a > 0', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION regtest_func_1 (text) RETURNS bool\n  AS 'BEGIN RETURN true"", 'source_success': False, 'source_exception': 'unterminated quoted string at or near ""\'BEGIN RETURN true""\nLINE 2:   AS \'BEGIN RETURN true\n             ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""END' LANGUAGE 'plpgsql'"", 'source_success': False, 'source_exception': 'syntax error at or near ""\' LANGUAGE \'""\nLINE 1: END\' LANGUAGE \'plpgsql\'\n           ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""\' LANGUAGE \'"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- switch on debug_audit\nSET sepgsql.debug_audit = true', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET client_min_messages = LOG', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '--\n-- ALTER xxx OWNER TO\n--\n-- XXX: It should take db_xxx:{setattr} permission checks even if\n--      owner is not actually changed.\n--\nALTER DATABASE sepgsql_test_regression_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DATABASE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER DATABASE sepgsql_test_regression_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DATABASE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER SCHEMA regtest_schema_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SCHEMA"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER SCHEMA regtest_schema_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SCHEMA"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OWNER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OWNER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_ptable_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OWNER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_ptable_1_ones OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OWNER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER SEQUENCE regtest_seq_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SEQUENCE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER SEQUENCE regtest_seq_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SEQUENCE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER VIEW regtest_view_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""VIEW"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER VIEW regtest_view_1 OWNER TO regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""VIEW"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION regtest_func_1(text) OWNER TO regress_sepgsql_test_user', 'source_success': False, 'source_exception': 'function regtest_func_1(text) does not exist\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION regtest_func_1(text) OWNER TO regress_sepgsql_test_user', 'source_success': False, 'source_exception': 'function regtest_func_1(text) does not exist\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '--\n-- ALTER xxx SET SCHEMA\n--\nALTER TABLE regtest_table_1 SET SCHEMA regtest_schema_2', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_ptable_1 SET SCHEMA regtest_schema_2', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_ptable_1_ones SET SCHEMA regtest_schema_2', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER SEQUENCE regtest_seq_1 SET SCHEMA regtest_schema_2', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SEQUENCE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER VIEW regtest_view_1 SET SCHEMA regtest_schema_2', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""VIEW"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION regtest_func_1(text) SET SCHEMA regtest_schema_2', 'source_success': False, 'source_exception': 'function regtest_func_1(text) does not exist\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '--\n-- ALTER xxx RENAME TO\n--\nALTER DATABASE sepgsql_test_regression_1 RENAME TO sepgsql_test_regression', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DATABASE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER SCHEMA regtest_schema_1 RENAME TO regtest_schema', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SCHEMA"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_1 RENAME TO regtest_table', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '---\n-- partitioned table parent\nALTER TABLE regtest_ptable_1 RENAME TO regtest_ptable', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: regtest_ptable_1', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- partitioned table child\nALTER TABLE regtest_ptable_1_ones RENAME TO regtest_table_part', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: regtest_ptable_1_ones', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '---\n\nALTER SEQUENCE regtest_seq_1 RENAME TO regtest_seq', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SEQUENCE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER VIEW regtest_view_1 RENAME TO regtest_view', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""VIEW"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION regtest_func_1(text) RENAME TO regtest_func', 'source_success': False, 'source_exception': 'function regtest_func_1(text) does not exist\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET search_path = regtest_schema, regtest_schema_2, public', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '--\n-- misc ALTER commands\n--\nALTER DATABASE sepgsql_test_regression CONNECTION LIMIT 999', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DATABASE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER DATABASE sepgsql_test_regression SET search_path TO regtest_schema, public', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DATABASE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported yet\n\nALTER TABLE regtest_table ADD COLUMN d float', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table DROP COLUMN d', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""ALTER TABLE regtest_table ALTER b SET DEFAULT 'abcd'"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""-- not supported yet\nALTER TABLE regtest_table ALTER b SET DEFAULT 'XYZ'"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported yet\nALTER TABLE regtest_table ALTER b DROP DEFAULT', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported yet\nALTER TABLE regtest_table ALTER b SET NOT NULL', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table ALTER b DROP NOT NULL', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table ALTER b SET STATISTICS -1', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table ALTER b SET (n_distinct = 999)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table ALTER b SET STORAGE PLAIN', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table ADD CONSTRAINT test_fk FOREIGN KEY (a) REFERENCES regtest_table_3(x)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""CONSTRAINT"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""-- not supported\nALTER TABLE regtest_table ADD CONSTRAINT test_ck CHECK (b like '%abc%') NOT VALID"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""CONSTRAINT"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported\nALTER TABLE regtest_table VALIDATE CONSTRAINT test_ck', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""VALIDATE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported\nALTER TABLE regtest_table DROP CONSTRAINT test_ck', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""CONSTRAINT"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported\n\nCREATE TRIGGER regtest_test_trig BEFORE UPDATE ON regtest_table\n    FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger()', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""EXECUTE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table DISABLE TRIGGER regtest_test_trig', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DISABLE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table ENABLE  TRIGGER regtest_test_trig', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ENABLE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE RULE regtest_test_rule AS ON INSERT TO regtest_table_3 DO ALSO NOTHING', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""RULE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_3 DISABLE RULE regtest_test_rule', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DISABLE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_3 ENABLE RULE regtest_test_rule', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ENABLE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table SET (fillfactor = 75)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table RESET (fillfactor)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""RESET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_2 NO INHERIT regtest_table', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""NO"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported\nALTER TABLE regtest_table_2 INHERIT regtest_table', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""INHERIT"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported\nALTER TABLE regtest_table SET TABLESPACE pg_default', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '---\n-- partitioned table parent\nALTER TABLE regtest_ptable ADD COLUMN d float', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: regtest_ptable', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_ptable DROP COLUMN d', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: regtest_ptable', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""ALTER TABLE regtest_ptable ALTER p SET DEFAULT 'abcd'"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""-- not supported by sepgsql\nALTER TABLE regtest_ptable ALTER p SET DEFAULT 'XYZ'"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported by sepgsql\nALTER TABLE regtest_ptable ALTER p DROP DEFAULT', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported by sepgsql\nALTER TABLE regtest_ptable ALTER p SET NOT NULL', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_ptable ALTER p DROP NOT NULL', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_ptable ALTER p SET STATISTICS -1', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_ptable ALTER p SET (n_distinct = 999)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_ptable ALTER p SET STORAGE PLAIN', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""ALTER TABLE regtest_ptable ADD CONSTRAINT test_ck CHECK (p like '%abc%') NOT VALID"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: regtest_ptable', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported by sepgsql\nALTER TABLE regtest_ptable DROP CONSTRAINT test_ck', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""CONSTRAINT"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported by sepgsql\n\nALTER TABLE regtest_ptable SET TABLESPACE pg_default', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""-- partitioned table child\nALTER TABLE regtest_table_part ALTER p SET DEFAULT 'abcd'"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""-- not supported by sepgsql\nALTER TABLE regtest_table_part ALTER p SET DEFAULT 'XYZ'"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported by sepgsql\nALTER TABLE regtest_table_part ALTER p DROP DEFAULT', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported by sepgsql\nALTER TABLE regtest_table_part ALTER p SET NOT NULL', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_part ALTER p DROP NOT NULL', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_part ALTER p SET STATISTICS -1', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_part ALTER p SET (n_distinct = 999)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_part ALTER p SET STORAGE PLAIN', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ALTER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""ALTER TABLE regtest_table_part ADD CONSTRAINT test_ck CHECK (p like '%abc%') NOT VALID"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: regtest_table_part', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported by sepgsql\nALTER TABLE regtest_table_part VALIDATE CONSTRAINT test_ck', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""VALIDATE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported by sepgsql\nALTER TABLE regtest_table_part DROP CONSTRAINT test_ck', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""CONSTRAINT"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- not supported by sepgsql\n\nCREATE TRIGGER regtest_part_test_trig BEFORE UPDATE ON regtest_table_part\n    FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger()', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""EXECUTE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_part DISABLE TRIGGER regtest_part_test_trig', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DISABLE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_part ENABLE  TRIGGER regtest_part_test_trig', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ENABLE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_part SET (fillfactor = 75)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_part RESET (fillfactor)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""RESET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER TABLE regtest_table_part SET TABLESPACE pg_default', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '---\n\nALTER VIEW regtest_view SET (security_barrier)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""VIEW"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER SEQUENCE regtest_seq INCREMENT BY 10 START WITH 1000', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SEQUENCE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '--\n-- clean-up objects\n--\nRESET sepgsql.debug_audit', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""RESET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'RESET client_min_messages', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""RESET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'DROP DATABASE sepgsql_test_regression', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""DATABASE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'DROP SCHEMA regtest_schema CASCADE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SCHEMA"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'DROP SCHEMA regtest_schema_2 CASCADE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SCHEMA"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'DROP USER regress_sepgsql_test_user', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USER"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
bit.sql,postgresql,"[{'query': '-- bit check\n\nCREATE TABLE bittmp (a bit(33))', 'source_success': False, 'source_exception': 'relation ""bittmp"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""\\copy bittmp from 'data/bit.data'\n\nSET enable_seqscan=on"", 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 1: \\copy bittmp from \'data/bit.data\'\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT count(*) FROM bittmp WHERE a <   '011011000100010111011000110000100'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM bittmp WHERE a <=  '011011000100010111011000110000100'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM bittmp WHERE a  =  '011011000100010111011000110000100'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM bittmp WHERE a >=  '011011000100010111011000110000100'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM bittmp WHERE a >   '011011000100010111011000110000100'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'CREATE INDEX bitidx ON bittmp USING GIST ( a )', 'source_success': False, 'source_exception': 'relation ""bitidx"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USING"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_seqscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT count(*) FROM bittmp WHERE a <   '011011000100010111011000110000100'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM bittmp WHERE a <=  '011011000100010111011000110000100'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM bittmp WHERE a  =  '011011000100010111011000110000100'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM bittmp WHERE a >=  '011011000100010111011000110000100'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM bittmp WHERE a >   '011011000100010111011000110000100'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': '-- Test index-only scans\nSET enable_bitmapscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""EXPLAIN (COSTS OFF)\nSELECT a FROM bittmp WHERE a BETWEEN '1000000' and '1000001'"", 'source_success': True, 'source_exception': '', 'source_result': '                                                            QUERY PLAN\n0                               Index Only Scan using bitidx on bittmp\n1    Index Cond: ((a >= \'1000000\'::""bit"") AND (a <= \'1000001\'::""bit""))', 'source_shape': (2, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}]"
bloom--1.0.sql,postgresql,"[{'query': '/* contrib/bloom/bloom--1.0.sql */\n\n-- complain if script is sourced in psql, rather than via CREATE EXTENSION\n\\echo Use ""CREATE EXTENSION bloom"" to load this file. \\quit\n\nCREATE FUNCTION blhandler(internal)\nRETURNS index_am_handler\nAS \'MODULE_PATHNAME\'\nLANGUAGE C', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""CREATE EXTENSION bloom"" to load this file. \\quit\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Access method\nCREATE ACCESS METHOD bloom TYPE INDEX HANDLER blhandler', 'source_success': False, 'source_exception': 'access method ""bloom"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""ACCESS"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""COMMENT ON ACCESS METHOD bloom IS 'bloom index access method'"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""COMMENT"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Opclasses\n\nCREATE OPERATOR CLASS int4_ops\nDEFAULT FOR TYPE int4 USING bloom AS\n\tOPERATOR\t1\t=(int4, int4),\n\tFUNCTION\t1\thashint4(int4)', 'source_success': False, 'source_exception': 'operator class ""int4_ops"" for access method ""bloom"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE OPERATOR CLASS text_ops\nDEFAULT FOR TYPE text USING bloom AS\n\tOPERATOR\t1\t=(text, text),\n\tFUNCTION\t1\thashtext(text)', 'source_success': False, 'source_exception': 'operator class ""text_ops"" for access method ""bloom"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
bloom.sql,postgresql,"[{'query': 'CREATE EXTENSION bloom', 'source_success': False, 'source_exception': 'extension ""bloom"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""EXTENSION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE TABLE tst (\n\ti\tint4,\n\tt\ttext\n)', 'source_success': False, 'source_exception': 'relation ""tst"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""INSERT INTO tst SELECT i%10, substr(encode(sha256(i::text::bytea), 'hex'), 1, 1) FROM generate_series(1,2000) i"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE INDEX bloomidx ON tst USING bloom (i, t) WITH (col1 = 3)', 'source_success': False, 'source_exception': 'relation ""bloomidx"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USING"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER INDEX bloomidx SET (length=80)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""INDEX"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_seqscan=on', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_bitmapscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_indexscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SELECT count(*) FROM tst WHERE i = 7', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    400', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tst WHERE t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    252', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tst WHERE i = 7 AND t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0     28', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SET enable_seqscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_bitmapscan=on', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_indexscan=on', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'EXPLAIN (COSTS OFF) SELECT count(*) FROM tst WHERE i = 7', 'source_success': True, 'source_exception': '', 'source_result': '                                  QUERY PLAN\n0                                  Aggregate\n1                ->  Bitmap Heap Scan on tst\n2                      Recheck Cond: (i = 7)\n3          ->  Bitmap Index Scan on bloomidx\n4                        Index Cond: (i = 7)', 'source_shape': (5, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""EXPLAIN (COSTS OFF) SELECT count(*) FROM tst WHERE t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': ""                                  QUERY PLAN\n0                                  Aggregate\n1                ->  Bitmap Heap Scan on tst\n2              Recheck Cond: (t = '5'::text)\n3          ->  Bitmap Index Scan on bloomidx\n4                Index Cond: (t = '5'::text)"", 'source_shape': (5, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""EXPLAIN (COSTS OFF) SELECT count(*) FROM tst WHERE i = 7 AND t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': ""                                                QUERY PLAN\n0                                                Aggregate\n1                              ->  Bitmap Heap Scan on tst\n2              Recheck Cond: ((i = 7) AND (t = '5'::text))\n3                        ->  Bitmap Index Scan on bloomidx\n4                Index Cond: ((i = 7) AND (t = '5'::text))"", 'source_shape': (5, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT count(*) FROM tst WHERE i = 7', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    400', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tst WHERE t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    252', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tst WHERE i = 7 AND t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0     28', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'DELETE FROM tst', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""INSERT INTO tst SELECT i%10, substr(encode(sha256(i::text::bytea), 'hex'), 1, 1) FROM generate_series(1,2000) i"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'VACUUM ANALYZE tst', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""tst"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SELECT count(*) FROM tst WHERE i = 7', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    200', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tst WHERE t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    126', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tst WHERE i = 7 AND t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0     14', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""DELETE FROM tst WHERE i > 1 OR t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'VACUUM tst', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unknown database tst', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""INSERT INTO tst SELECT i%10, substr(encode(sha256(i::text::bytea), 'hex'), 1, 1) FROM generate_series(1,2000) i"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SELECT count(*) FROM tst WHERE i = 7', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    200', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tst WHERE t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    126', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tst WHERE i = 7 AND t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0     14', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'VACUUM FULL tst', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""tst"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SELECT count(*) FROM tst WHERE i = 7', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    200', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tst WHERE t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    126', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tst WHERE i = 7 AND t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0     14', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': '-- Try an unlogged table too\n\nCREATE UNLOGGED TABLE tstu (\n\ti\tint4,\n\tt\ttext\n)', 'source_success': False, 'source_exception': 'relation ""tstu"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""UNLOGGED"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""INSERT INTO tstu SELECT i%10, substr(encode(sha256(i::text::bytea), 'hex'), 1, 1) FROM generate_series(1,2000) i"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE INDEX bloomidxu ON tstu USING bloom (i, t) WITH (col2 = 4)', 'source_success': False, 'source_exception': 'relation ""bloomidxu"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USING"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_seqscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_bitmapscan=on', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_indexscan=on', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'EXPLAIN (COSTS OFF) SELECT count(*) FROM tstu WHERE i = 7', 'source_success': True, 'source_exception': '', 'source_result': '                                   QUERY PLAN\n0                                   Aggregate\n1                ->  Bitmap Heap Scan on tstu\n2                       Recheck Cond: (i = 7)\n3          ->  Bitmap Index Scan on bloomidxu\n4                         Index Cond: (i = 7)', 'source_shape': (5, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""EXPLAIN (COSTS OFF) SELECT count(*) FROM tstu WHERE t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': ""                                   QUERY PLAN\n0                                   Aggregate\n1                ->  Bitmap Heap Scan on tstu\n2               Recheck Cond: (t = '5'::text)\n3          ->  Bitmap Index Scan on bloomidxu\n4                 Index Cond: (t = '5'::text)"", 'source_shape': (5, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""EXPLAIN (COSTS OFF) SELECT count(*) FROM tstu WHERE i = 7 AND t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': ""                                                QUERY PLAN\n0                                                Aggregate\n1                             ->  Bitmap Heap Scan on tstu\n2              Recheck Cond: ((i = 7) AND (t = '5'::text))\n3                       ->  Bitmap Index Scan on bloomidxu\n4                Index Cond: ((i = 7) AND (t = '5'::text))"", 'source_shape': (5, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT count(*) FROM tstu WHERE i = 7', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    800', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: tstu', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tstu WHERE t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0    504', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: tstu', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM tstu WHERE i = 7 AND t = '5'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0     56', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: tstu', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'RESET enable_seqscan', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""RESET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'RESET enable_bitmapscan', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""RESET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'RESET enable_indexscan', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""RESET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""-- Run amvalidator function on our opclasses\nSELECT opcname, amvalidate(opc.oid)\nFROM pg_opclass opc JOIN pg_am am ON am.oid = opcmethod\nWHERE amname = 'bloom'\nORDER BY 1"", 'source_success': True, 'source_exception': '', 'source_result': '    opcname  amvalidate\n0  int4_ops        True\n1  text_ops        True', 'source_shape': (2, 2), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: pg_opclass', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': '--\n-- relation options\n--\nDROP INDEX bloomidx', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such index: bloomidx', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE INDEX bloomidx ON tst USING bloom (i, t) WITH (length=7, col1=4)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USING"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT reloptions FROM pg_class WHERE oid = 'bloomidx'::regclass"", 'source_success': True, 'source_exception': '', 'source_result': '           reloptions\n0  [length=7, col1=4]', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': '-- check for min and max values\n\\set VERBOSITY terse\nCREATE INDEX bloomidx2 ON tst USING bloom (i, t) WITH (length=0)', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 2: \\set VERBOSITY terse\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE INDEX bloomidx2 ON tst USING bloom (i, t) WITH (col1=0)', 'source_success': False, 'source_exception': 'value 0 out of bounds for option ""col1""\nDETAIL:  Valid values are between ""1"" and ""4095"".\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USING"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
bool.sql,postgresql,"[{'query': '-- bool check\n\nCREATE TABLE booltmp (a bool)', 'source_success': False, 'source_exception': 'relation ""booltmp"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'INSERT INTO booltmp VALUES (false), (true)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_seqscan=on', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SELECT count(*) FROM booltmp WHERE a <  true', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      4', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT count(*) FROM booltmp WHERE a <= true', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      8', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT count(*) FROM booltmp WHERE a  = true', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      4', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT count(*) FROM booltmp WHERE a >= true', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      4', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT count(*) FROM booltmp WHERE a >  true', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'CREATE INDEX boolidx ON booltmp USING gist ( a )', 'source_success': False, 'source_exception': 'relation ""boolidx"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USING"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_seqscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SELECT count(*) FROM booltmp WHERE a <  true', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      4', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT count(*) FROM booltmp WHERE a <= true', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      8', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT count(*) FROM booltmp WHERE a  = true', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      4', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT count(*) FROM booltmp WHERE a >= true', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      4', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT count(*) FROM booltmp WHERE a >  true', 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': '-- Test index-only scans\nSET enable_bitmapscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'EXPLAIN (COSTS OFF)\nSELECT * FROM booltmp WHERE a', 'source_success': True, 'source_exception': '', 'source_result': '                                 QUERY PLAN\n0  Index Only Scan using boolidx on booltmp\n1                    Index Cond: (a = true)', 'source_shape': (2, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT * FROM booltmp WHERE a', 'source_success': True, 'source_exception': '', 'source_result': '      a\n0  True\n1  True\n2  True\n3  True', 'source_shape': (4, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'EXPLAIN (COSTS OFF)\nSELECT * FROM booltmp WHERE NOT a', 'source_success': True, 'source_exception': '', 'source_result': '                                 QUERY PLAN\n0  Index Only Scan using boolidx on booltmp\n1                   Index Cond: (a = false)', 'source_shape': (2, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'SELECT * FROM booltmp WHERE NOT a', 'source_success': True, 'source_exception': '', 'source_result': '       a\n0  False\n1  False\n2  False\n3  False', 'source_shape': (4, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}]"
btree_gist--1.0--1.1.sql,postgresql,"[{'query': '/* contrib/btree_gist/btree_gist--1.0--1.1.sql */\n\n-- complain if script is sourced in psql, rather than via CREATE EXTENSION\n\\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.1\'"" to load this file. \\quit\n\n-- Index-only scan support new in 9.5.\nCREATE FUNCTION gbt_oid_fetch(internal)\nRETURNS internal\nAS \'MODULE_PATHNAME\'\nLANGUAGE C IMMUTABLE STRICT', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.1\'"" to lo...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int2_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int2_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int4_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int4_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int8_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int8_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float4_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float4_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float8_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float8_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_ts_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_ts_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_time_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_time_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_date_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_date_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_intv_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_intv_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_cash_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_cash_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_var_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_var_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_oid_ops USING gist ADD\n\tFUNCTION\t9 (oid, oid) gbt_oid_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(oid,oid) already exists in operator family ""gist_oid_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_int2_ops USING gist ADD\n\tFUNCTION\t9 (int2, int2) gbt_int2_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(smallint,smallint) already exists in operator family ""gist_int2_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_int4_ops USING gist ADD\n\tFUNCTION\t9 (int4, int4) gbt_int4_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(integer,integer) already exists in operator family ""gist_int4_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_int8_ops USING gist ADD\n\tFUNCTION\t9 (int8, int8) gbt_int8_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(bigint,bigint) already exists in operator family ""gist_int8_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_float4_ops USING gist ADD\n\tFUNCTION\t9 (float4, float4) gbt_float4_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(real,real) already exists in operator family ""gist_float4_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_float8_ops USING gist ADD\n\tFUNCTION\t9 (float8, float8) gbt_float8_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(double precision,double precision) already exists in operator family ""gist_float8_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_timestamp_ops USING gist ADD\n\tFUNCTION\t9 (timestamp, timestamp) gbt_ts_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(timestamp without time zone,timestamp without time zone) already exists in operator family ""gist_timestamp_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_timestamptz_ops USING gist ADD\n\tFUNCTION\t9 (timestamptz, timestamptz) gbt_ts_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(timestamp with time zone,timestamp with time zone) already exists in operator family ""gist_timestamptz_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_time_ops USING gist ADD\n\tFUNCTION\t9 (time, time) gbt_time_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(time without time zone,time without time zone) already exists in operator family ""gist_time_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_date_ops USING gist ADD\n\tFUNCTION\t9 (date, date) gbt_date_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(date,date) already exists in operator family ""gist_date_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_interval_ops USING gist ADD\n\tFUNCTION\t9 (interval, interval) gbt_intv_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(interval,interval) already exists in operator family ""gist_interval_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_cash_ops USING gist ADD\n\tFUNCTION\t9 (money, money) gbt_cash_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(money,money) already exists in operator family ""gist_cash_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_macaddr_ops USING gist ADD\n\tFUNCTION\t9 (macaddr, macaddr) gbt_macad_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(macaddr,macaddr) already exists in operator family ""gist_macaddr_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_text_ops USING gist ADD\n\tFUNCTION\t9 (text, text) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(text,text) already exists in operator family ""gist_text_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_bpchar_ops USING gist ADD\n\tFUNCTION\t9 (bpchar, bpchar) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(character,character) already exists in operator family ""gist_bpchar_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_bytea_ops USING gist ADD\n\tFUNCTION\t9 (bytea, bytea) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(bytea,bytea) already exists in operator family ""gist_bytea_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_numeric_ops USING gist ADD\n\tFUNCTION\t9 (numeric, numeric) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(numeric,numeric) already exists in operator family ""gist_numeric_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_bit_ops USING gist ADD\n\tFUNCTION\t9 (bit, bit) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(bit,bit) already exists in operator family ""gist_bit_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_vbit_ops USING gist ADD\n\tFUNCTION\t9 (varbit, varbit) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'function 9(bit varying,bit varying) already exists in operator family ""gist_vbit_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
btree_gist--1.1--1.2.sql,postgresql,"[{'query': '/* contrib/btree_gist/btree_gist--1.1--1.2.sql */\n\n-- complain if script is sourced in psql, rather than via ALTER EXTENSION\n\\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.2\'"" to load this file. \\quit\n\n-- Update procedure signatures the hard way.\n-- We use to_regprocedure() so that query doesn\'t fail if run against 9.6beta1 definitions,\n-- wherein the signatures have been updated already.  In that case to_regprocedure() will\n-- return NULL and no updates will happen.\n\nDO LANGUAGE plpgsql\n$$\nDECLARE\n  my_schema pg_catalog.text := pg_catalog.quote_ident(pg_catalog.current_schema())', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.2\'"" to lo...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""old_path pg_catalog.text := pg_catalog.current_setting('search_path')"", 'source_success': False, 'source_exception': 'syntax error at or near ""old_path""\nLINE 1: old_path pg_catalog.text := pg_catalog.current_setting(\'sear...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""old_path"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""BEGIN\n-- for safety, transiently set search_path to just pg_catalog+pg_temp\nPERFORM pg_catalog.set_config('search_path', 'pg_catalog, pg_temp', true)"", 'source_success': False, 'source_exception': 'syntax error at or near ""PERFORM""\nLINE 3: PERFORM pg_catalog.set_config(\'search_path\', \'pg_catalog, pg...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""PERFORM"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""UPDATE pg_catalog.pg_proc SET\n  proargtypes = pg_catalog.array_to_string(newtypes::pg_catalog.oid[], ' ')::pg_catalog.oidvector,\n  pronargs = pg_catalog.array_length(newtypes, 1)\nFROM (VALUES\n(NULL::pg_catalog.text, NULL::pg_catalog.text[]), -- establish column types\n('gbt_oid_distance(internal,oid,int2,oid)', '{internal,oid,int2,oid,internal}'),\n('gbt_oid_union(bytea,internal)', '{internal,internal}'),\n('gbt_oid_same(internal,internal,internal)', '{SCH.gbtreekey8,SCH.gbtreekey8,internal}'),\n('gbt_int2_distance(internal,int2,int2,oid)', '{internal,int2,int2,oid,internal}'),\n('gbt_int2_union(bytea,internal)', '{internal,internal}'),\n('gbt_int2_same(internal,internal,internal)', '{SCH.gbtreekey4,SCH.gbtreekey4,internal}'),\n('gbt_int4_distance(internal,int4,int2,oid)', '{internal,int4,int2,oid,internal}'),\n('gbt_int4_union(bytea,internal)', '{internal,internal}'),\n('gbt_int4_same(internal,internal,internal)', '{SCH.gbtreekey8,SCH.gbtreekey8,internal}'),\n('gbt_int8_distance(internal,int8,int2,oid)', '{internal,int8,int2,oid,internal}'),\n('gbt_int8_union(bytea,internal)', '{internal,internal}'),\n('gbt_int8_same(internal,internal,internal)', '{SCH.gbtreekey16,SCH.gbtreekey16,internal}'),\n('gbt_float4_distance(internal,float4,int2,oid)', '{internal,float4,int2,oid,internal}'),\n('gbt_float4_union(bytea,internal)', '{internal,internal}'),\n('gbt_float4_same(internal,internal,internal)', '{SCH.gbtreekey8,SCH.gbtreekey8,internal}'),\n('gbt_float8_distance(internal,float8,int2,oid)', '{internal,float8,int2,oid,internal}'),\n('gbt_float8_union(bytea,internal)', '{internal,internal}'),\n('gbt_float8_same(internal,internal,internal)', '{SCH.gbtreekey16,SCH.gbtreekey16,internal}'),\n('gbt_ts_distance(internal,timestamp,int2,oid)', '{internal,timestamp,int2,oid,internal}'),\n('gbt_tstz_distance(internal,timestamptz,int2,oid)', '{internal,timestamptz,int2,oid,internal}'),\n('gbt_ts_union(bytea,internal)', '{internal,internal}'),\n('gbt_ts_same(internal,internal,internal)', '{SCH.gbtreekey16,SCH.gbtreekey16,internal}'),\n('gbt_time_distance(internal,time,int2,oid)', '{internal,time,int2,oid,internal}'),\n('gbt_time_union(bytea,internal)', '{internal,internal}'),\n('gbt_time_same(internal,internal,internal)', '{SCH.gbtreekey16,SCH.gbtreekey16,internal}'),\n('gbt_date_distance(internal,date,int2,oid)', '{internal,date,int2,oid,internal}'),\n('gbt_date_union(bytea,internal)', '{internal,internal}'),\n('gbt_date_same(internal,internal,internal)', '{SCH.gbtreekey8,SCH.gbtreekey8,internal}'),\n('gbt_intv_distance(internal,interval,int2,oid)', '{internal,interval,int2,oid,internal}'),\n('gbt_intv_union(bytea,internal)', '{internal,internal}'),\n('gbt_intv_same(internal,internal,internal)', '{SCH.gbtreekey32,SCH.gbtreekey32,internal}'),\n('gbt_cash_distance(internal,money,int2,oid)', '{internal,money,int2,oid,internal}'),\n('gbt_cash_union(bytea,internal)', '{internal,internal}'),\n('gbt_cash_same(internal,internal,internal)', '{SCH.gbtreekey16,SCH.gbtreekey16,internal}'),\n('gbt_macad_union(bytea,internal)', '{internal,internal}'),\n('gbt_macad_same(internal,internal,internal)', '{SCH.gbtreekey16,SCH.gbtreekey16,internal}'),\n('gbt_text_union(bytea,internal)', '{internal,internal}'),\n('gbt_text_same(internal,internal,internal)', '{SCH.gbtreekey_var,SCH.gbtreekey_var,internal}'),\n('gbt_bytea_union(bytea,internal)', '{internal,internal}'),\n('gbt_bytea_same(internal,internal,internal)', '{SCH.gbtreekey_var,SCH.gbtreekey_var,internal}'),\n('gbt_numeric_union(bytea,internal)', '{internal,internal}'),\n('gbt_numeric_same(internal,internal,internal)', '{SCH.gbtreekey_var,SCH.gbtreekey_var,internal}'),\n('gbt_bit_union(bytea,internal)', '{internal,internal}'),\n('gbt_bit_same(internal,internal,internal)', '{SCH.gbtreekey_var,SCH.gbtreekey_var,internal}'),\n('gbt_inet_union(bytea,internal)', '{internal,internal}'),\n('gbt_inet_same(internal,internal,internal)', '{SCH.gbtreekey16,SCH.gbtreekey16,internal}')\n) AS update_data (oldproc, newtypestext),\nLATERAL (\n  SELECT array_agg(replace(typ, 'SCH', my_schema)::regtype) as newtypes FROM unnest(newtypestext) typ\n) ls\nWHERE oid = to_regprocedure(my_schema || '.' || replace(oldproc, 'SCH', my_schema))"", 'source_success': False, 'source_exception': 'column ""my_schema"" does not exist\nLINE 54:   SELECT array_agg(replace(typ, \'SCH\', my_schema)::regtype) ...\n                                                ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""PERFORM pg_catalog.set_config('search_path', old_path, true)"", 'source_success': False, 'source_exception': 'syntax error at or near ""PERFORM""\nLINE 1: PERFORM pg_catalog.set_config(\'search_path\', old_path, true)\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""PERFORM"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'END\n$$', 'source_success': False, 'source_exception': 'unterminated dollar-quoted string at or near ""$$""\nLINE 2: $$\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""$$"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
btree_gist--1.2--1.3.sql,postgresql,"[{'query': '/* contrib/btree_gist/btree_gist--1.2--1.3.sql */\n\n-- complain if script is sourced in psql, rather than via ALTER EXTENSION\n\\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.3\'"" to load this file. \\quit\n\n-- Add support for indexing UUID columns\n\n-- define the GiST support methods\nCREATE FUNCTION gbt_uuid_consistent(internal,uuid,int2,oid,internal)\nRETURNS bool\nAS \'MODULE_PATHNAME\'\nLANGUAGE C IMMUTABLE STRICT', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.3\'"" to lo...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_uuid_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_uuid_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_uuid_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_uuid_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_uuid_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_uuid_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_uuid_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_uuid_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_uuid_union(internal, internal)\nRETURNS gbtreekey32\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_uuid_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_uuid_same(gbtreekey32, gbtreekey32, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_uuid_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_uuid_ops\nDEFAULT FOR TYPE uuid USING gist\nAS\n\tOPERATOR\t1\t<   ,\n\tOPERATOR\t2\t<=  ,\n\tOPERATOR\t3\t=   ,\n\tOPERATOR\t4\t>=  ,\n\tOPERATOR\t5\t>   ,\n\tFUNCTION\t1\tgbt_uuid_consistent (internal, uuid, int2, oid, internal),\n\tFUNCTION\t2\tgbt_uuid_union (internal, internal),\n\tFUNCTION\t3\tgbt_uuid_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_uuid_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_uuid_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_uuid_same (gbtreekey32, gbtreekey32, internal),\n\tSTORAGE\t\tgbtreekey32', 'source_success': False, 'source_exception': 'operator class ""gist_uuid_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- These are ""loose"" in the opfamily for consistency with the rest of btree_gist\nALTER OPERATOR FAMILY gist_uuid_ops USING gist ADD\n\tOPERATOR\t6\t<>  (uuid, uuid) ,\n\tFUNCTION\t9 (uuid, uuid) gbt_uuid_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(uuid,uuid) already exists in operator family ""gist_uuid_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
btree_gist--1.2.sql,postgresql,"[{'query': '/* contrib/btree_gist/btree_gist--1.2.sql */\n\n-- complain if script is sourced in psql, rather than via CREATE EXTENSION\n\\echo Use ""CREATE EXTENSION btree_gist"" to load this file. \\quit\n\nCREATE FUNCTION gbtreekey4_in(cstring)\nRETURNS gbtreekey4\nAS \'MODULE_PATHNAME\', \'gbtreekey_in\'\nLANGUAGE C IMMUTABLE STRICT', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""CREATE EXTENSION btree_gist"" to load this file. \\...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbtreekey4_out(gbtreekey4)\nRETURNS cstring\nAS 'MODULE_PATHNAME', 'gbtreekey_out'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbtreekey4_out"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE TYPE gbtreekey4 (\n\tINTERNALLENGTH = 4,\n\tINPUT  = gbtreekey4_in,\n\tOUTPUT = gbtreekey4_out\n)', 'source_success': False, 'source_exception': 'type ""gbtreekey4"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""TYPE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbtreekey8_in(cstring)\nRETURNS gbtreekey8\nAS 'MODULE_PATHNAME', 'gbtreekey_in'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbtreekey8_in"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbtreekey8_out(gbtreekey8)\nRETURNS cstring\nAS 'MODULE_PATHNAME', 'gbtreekey_out'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbtreekey8_out"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE TYPE gbtreekey8 (\n\tINTERNALLENGTH = 8,\n\tINPUT  = gbtreekey8_in,\n\tOUTPUT = gbtreekey8_out\n)', 'source_success': False, 'source_exception': 'type ""gbtreekey8"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""TYPE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbtreekey16_in(cstring)\nRETURNS gbtreekey16\nAS 'MODULE_PATHNAME', 'gbtreekey_in'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbtreekey16_in"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbtreekey16_out(gbtreekey16)\nRETURNS cstring\nAS 'MODULE_PATHNAME', 'gbtreekey_out'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbtreekey16_out"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE TYPE gbtreekey16 (\n\tINTERNALLENGTH = 16,\n\tINPUT  = gbtreekey16_in,\n\tOUTPUT = gbtreekey16_out\n)', 'source_success': False, 'source_exception': 'type ""gbtreekey16"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""TYPE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbtreekey32_in(cstring)\nRETURNS gbtreekey32\nAS 'MODULE_PATHNAME', 'gbtreekey_in'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbtreekey32_in"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbtreekey32_out(gbtreekey32)\nRETURNS cstring\nAS 'MODULE_PATHNAME', 'gbtreekey_out'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbtreekey32_out"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE TYPE gbtreekey32 (\n\tINTERNALLENGTH = 32,\n\tINPUT  = gbtreekey32_in,\n\tOUTPUT = gbtreekey32_out\n)', 'source_success': False, 'source_exception': 'type ""gbtreekey32"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""TYPE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbtreekey_var_in(cstring)\nRETURNS gbtreekey_var\nAS 'MODULE_PATHNAME', 'gbtreekey_in'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbtreekey_var_in"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbtreekey_var_out(gbtreekey_var)\nRETURNS cstring\nAS 'MODULE_PATHNAME', 'gbtreekey_out'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbtreekey_var_out"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE TYPE gbtreekey_var (\n\tINTERNALLENGTH = VARIABLE,\n\tINPUT  = gbtreekey_var_in,\n\tOUTPUT = gbtreekey_var_out,\n\tSTORAGE = EXTENDED\n)', 'source_success': False, 'source_exception': 'type ""gbtreekey_var"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""TYPE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--distance operators\n\nCREATE FUNCTION cash_dist(money, money)\nRETURNS money\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""cash_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = money,\n\tRIGHTARG = money,\n\tPROCEDURE = cash_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION date_dist(date, date)\nRETURNS int4\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""date_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = date,\n\tRIGHTARG = date,\n\tPROCEDURE = date_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION float4_dist(float4, float4)\nRETURNS float4\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""float4_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = float4,\n\tRIGHTARG = float4,\n\tPROCEDURE = float4_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION float8_dist(float8, float8)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""float8_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = float8,\n\tRIGHTARG = float8,\n\tPROCEDURE = float8_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION int2_dist(int2, int2)\nRETURNS int2\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""int2_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = int2,\n\tRIGHTARG = int2,\n\tPROCEDURE = int2_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION int4_dist(int4, int4)\nRETURNS int4\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""int4_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = int4,\n\tRIGHTARG = int4,\n\tPROCEDURE = int4_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION int8_dist(int8, int8)\nRETURNS int8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""int8_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = int8,\n\tRIGHTARG = int8,\n\tPROCEDURE = int8_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION interval_dist(interval, interval)\nRETURNS interval\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""interval_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = interval,\n\tRIGHTARG = interval,\n\tPROCEDURE = interval_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION oid_dist(oid, oid)\nRETURNS oid\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""oid_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = oid,\n\tRIGHTARG = oid,\n\tPROCEDURE = oid_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION time_dist(time, time)\nRETURNS interval\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""time_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = time,\n\tRIGHTARG = time,\n\tPROCEDURE = time_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION ts_dist(timestamp, timestamp)\nRETURNS interval\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""ts_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = timestamp,\n\tRIGHTARG = timestamp,\n\tPROCEDURE = ts_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION tstz_dist(timestamptz, timestamptz)\nRETURNS interval\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""tstz_dist"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = timestamptz,\n\tRIGHTARG = timestamptz,\n\tPROCEDURE = tstz_dist,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- oid ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_oid_consistent(internal,oid,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_oid_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_oid_distance(internal,oid,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_oid_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_oid_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_oid_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_oid_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_oid_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_decompress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_decompress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_var_decompress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_var_decompress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_var_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_var_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_oid_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_oid_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_oid_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_oid_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_oid_union(internal, internal)\nRETURNS gbtreekey8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_oid_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_oid_same(gbtreekey8, gbtreekey8, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_oid_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_oid_ops\nDEFAULT FOR TYPE oid USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_oid_consistent (internal, oid, int2, oid, internal),\n\tFUNCTION\t2\tgbt_oid_union (internal, internal),\n\tFUNCTION\t3\tgbt_oid_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_oid_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_oid_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_oid_same (gbtreekey8, gbtreekey8, internal),\n\tSTORAGE\t\tgbtreekey8', 'source_success': False, 'source_exception': 'operator class ""gist_oid_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Add operators that are new in 9.1.  We do it like this, leaving them\n-- ""loose"" in the operator family rather than bound into the opclass, because\n-- that\'s the only state that can be reproduced during an upgrade from 9.0.\nALTER OPERATOR FAMILY gist_oid_ops USING gist ADD\n\tOPERATOR\t6\t<> (oid, oid) ,\n\tOPERATOR\t15\t<-> (oid, oid) FOR ORDER BY pg_catalog.oid_ops ,\n\tFUNCTION\t8 (oid, oid) gbt_oid_distance (internal, oid, int2, oid, internal) ,\n\t-- Also add support function for index-only-scans, added in 9.5.\n\tFUNCTION\t9 (oid, oid) gbt_oid_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(oid,oid) already exists in operator family ""gist_oid_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- int2 ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_int2_consistent(internal,int2,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int2_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int2_distance(internal,int2,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int2_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int2_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int2_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int2_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int2_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int2_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int2_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int2_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int2_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int2_union(internal, internal)\nRETURNS gbtreekey4\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int2_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int2_same(gbtreekey4, gbtreekey4, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int2_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_int2_ops\nDEFAULT FOR TYPE int2 USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_int2_consistent (internal, int2, int2, oid, internal),\n\tFUNCTION\t2\tgbt_int2_union (internal, internal),\n\tFUNCTION\t3\tgbt_int2_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_int2_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_int2_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_int2_same (gbtreekey4, gbtreekey4, internal),\n\tSTORAGE\t\tgbtreekey4', 'source_success': False, 'source_exception': 'operator class ""gist_int2_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_int2_ops USING gist ADD\n\tOPERATOR\t6\t<> (int2, int2) ,\n\tOPERATOR\t15\t<-> (int2, int2) FOR ORDER BY pg_catalog.integer_ops ,\n\tFUNCTION\t8 (int2, int2) gbt_int2_distance (internal, int2, int2, oid, internal) ,\n\tFUNCTION\t9 (int2, int2) gbt_int2_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(smallint,smallint) already exists in operator family ""gist_int2_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- int4 ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_int4_consistent(internal,int4,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int4_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int4_distance(internal,int4,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int4_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int4_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int4_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int4_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int4_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int4_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int4_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int4_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int4_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int4_union(internal, internal)\nRETURNS gbtreekey8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int4_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int4_same(gbtreekey8, gbtreekey8, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int4_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_int4_ops\nDEFAULT FOR TYPE int4 USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_int4_consistent (internal, int4, int2, oid, internal),\n\tFUNCTION\t2\tgbt_int4_union (internal, internal),\n\tFUNCTION\t3\tgbt_int4_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_int4_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_int4_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_int4_same (gbtreekey8, gbtreekey8, internal),\n\tSTORAGE\t\tgbtreekey8', 'source_success': False, 'source_exception': 'operator class ""gist_int4_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_int4_ops USING gist ADD\n\tOPERATOR\t6\t<> (int4, int4) ,\n\tOPERATOR\t15\t<-> (int4, int4) FOR ORDER BY pg_catalog.integer_ops ,\n\tFUNCTION\t8 (int4, int4) gbt_int4_distance (internal, int4, int2, oid, internal) ,\n\tFUNCTION\t9 (int4, int4) gbt_int4_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(integer,integer) already exists in operator family ""gist_int4_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- int8 ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_int8_consistent(internal,int8,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int8_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int8_distance(internal,int8,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int8_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int8_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int8_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int8_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int8_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int8_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int8_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int8_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int8_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int8_union(internal, internal)\nRETURNS gbtreekey16\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int8_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_int8_same(gbtreekey16, gbtreekey16, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_int8_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_int8_ops\nDEFAULT FOR TYPE int8 USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_int8_consistent (internal, int8, int2, oid, internal),\n\tFUNCTION\t2\tgbt_int8_union (internal, internal),\n\tFUNCTION\t3\tgbt_int8_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_int8_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_int8_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_int8_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_int8_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_int8_ops USING gist ADD\n\tOPERATOR\t6\t<> (int8, int8) ,\n\tOPERATOR\t15\t<-> (int8, int8) FOR ORDER BY pg_catalog.integer_ops ,\n\tFUNCTION\t8 (int8, int8) gbt_int8_distance (internal, int8, int2, oid, internal) ,\n\tFUNCTION\t9 (int8, int8) gbt_int8_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(bigint,bigint) already exists in operator family ""gist_int8_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- float4 ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_float4_consistent(internal,float4,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float4_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float4_distance(internal,float4,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float4_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float4_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float4_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float4_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float4_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float4_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float4_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float4_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float4_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float4_union(internal, internal)\nRETURNS gbtreekey8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float4_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float4_same(gbtreekey8, gbtreekey8, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float4_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_float4_ops\nDEFAULT FOR TYPE float4 USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_float4_consistent (internal, float4, int2, oid, internal),\n\tFUNCTION\t2\tgbt_float4_union (internal, internal),\n\tFUNCTION\t3\tgbt_float4_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_float4_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_float4_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_float4_same (gbtreekey8, gbtreekey8, internal),\n\tSTORAGE\t\tgbtreekey8', 'source_success': False, 'source_exception': 'operator class ""gist_float4_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_float4_ops USING gist ADD\n\tOPERATOR\t6\t<> (float4, float4) ,\n\tOPERATOR\t15\t<-> (float4, float4) FOR ORDER BY pg_catalog.float_ops ,\n\tFUNCTION\t8 (float4, float4) gbt_float4_distance (internal, float4, int2, oid, internal) ,\n\tFUNCTION\t9 (float4, float4) gbt_float4_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(real,real) already exists in operator family ""gist_float4_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- float8 ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_float8_consistent(internal,float8,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float8_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float8_distance(internal,float8,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float8_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float8_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float8_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float8_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float8_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float8_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float8_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float8_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float8_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float8_union(internal, internal)\nRETURNS gbtreekey16\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float8_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_float8_same(gbtreekey16, gbtreekey16, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_float8_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_float8_ops\nDEFAULT FOR TYPE float8 USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_float8_consistent (internal, float8, int2, oid, internal),\n\tFUNCTION\t2\tgbt_float8_union (internal, internal),\n\tFUNCTION\t3\tgbt_float8_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_float8_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_float8_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_float8_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_float8_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_float8_ops USING gist ADD\n\tOPERATOR\t6\t<> (float8, float8) ,\n\tOPERATOR\t15\t<-> (float8, float8) FOR ORDER BY pg_catalog.float_ops ,\n\tFUNCTION\t8 (float8, float8) gbt_float8_distance (internal, float8, int2, oid, internal) ,\n\tFUNCTION\t9 (float8, float8) gbt_float8_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(double precision,double precision) already exists in operator family ""gist_float8_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- timestamp ops\n--\n--\n--\n\nCREATE FUNCTION gbt_ts_consistent(internal,timestamp,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_ts_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_ts_distance(internal,timestamp,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_ts_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_tstz_consistent(internal,timestamptz,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_tstz_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_tstz_distance(internal,timestamptz,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_tstz_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_ts_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_ts_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_tstz_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_tstz_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_ts_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_ts_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_ts_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_ts_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_ts_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_ts_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_ts_union(internal, internal)\nRETURNS gbtreekey16\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_ts_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_ts_same(gbtreekey16, gbtreekey16, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_ts_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_timestamp_ops\nDEFAULT FOR TYPE timestamp USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_ts_consistent (internal, timestamp, int2, oid, internal),\n\tFUNCTION\t2\tgbt_ts_union (internal, internal),\n\tFUNCTION\t3\tgbt_ts_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_ts_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_ts_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_ts_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_timestamp_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_timestamp_ops USING gist ADD\n\tOPERATOR\t6\t<> (timestamp, timestamp) ,\n\tOPERATOR\t15\t<-> (timestamp, timestamp) FOR ORDER BY pg_catalog.interval_ops ,\n\tFUNCTION\t8 (timestamp, timestamp) gbt_ts_distance (internal, timestamp, int2, oid, internal) ,\n\tFUNCTION\t9 (timestamp, timestamp) gbt_ts_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(timestamp without time zone,timestamp without time zone) already exists in operator family ""gist_timestamp_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_timestamptz_ops\nDEFAULT FOR TYPE timestamptz USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_tstz_consistent (internal, timestamptz, int2, oid, internal),\n\tFUNCTION\t2\tgbt_ts_union (internal, internal),\n\tFUNCTION\t3\tgbt_tstz_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_ts_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_ts_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_ts_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_timestamptz_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_timestamptz_ops USING gist ADD\n\tOPERATOR\t6\t<> (timestamptz, timestamptz) ,\n\tOPERATOR\t15\t<-> (timestamptz, timestamptz) FOR ORDER BY pg_catalog.interval_ops ,\n\tFUNCTION\t8 (timestamptz, timestamptz) gbt_tstz_distance (internal, timestamptz, int2, oid, internal) ,\n\tFUNCTION\t9 (timestamptz, timestamptz) gbt_ts_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(timestamp with time zone,timestamp with time zone) already exists in operator family ""gist_timestamptz_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- time ops\n--\n--\n--\n\nCREATE FUNCTION gbt_time_consistent(internal,time,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_time_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_time_distance(internal,time,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_time_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_timetz_consistent(internal,timetz,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_timetz_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_time_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_time_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_timetz_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_timetz_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_time_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_time_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_time_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_time_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_time_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_time_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_time_union(internal, internal)\nRETURNS gbtreekey16\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_time_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_time_same(gbtreekey16, gbtreekey16, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_time_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_time_ops\nDEFAULT FOR TYPE time USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_time_consistent (internal, time, int2, oid, internal),\n\tFUNCTION\t2\tgbt_time_union (internal, internal),\n\tFUNCTION\t3\tgbt_time_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_time_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_time_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_time_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_time_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_time_ops USING gist ADD\n\tOPERATOR\t6\t<> (time, time) ,\n\tOPERATOR\t15\t<-> (time, time) FOR ORDER BY pg_catalog.interval_ops ,\n\tFUNCTION\t8 (time, time) gbt_time_distance (internal, time, int2, oid, internal) ,\n\tFUNCTION\t9 (time, time) gbt_time_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(time without time zone,time without time zone) already exists in operator family ""gist_time_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE OPERATOR CLASS gist_timetz_ops\nDEFAULT FOR TYPE timetz USING gist\nAS\n\tOPERATOR\t1\t<   ,\n\tOPERATOR\t2\t<=  ,\n\tOPERATOR\t3\t=   ,\n\tOPERATOR\t4\t>=  ,\n\tOPERATOR\t5\t>   ,\n\tFUNCTION\t1\tgbt_timetz_consistent (internal, timetz, int2, oid, internal),\n\tFUNCTION\t2\tgbt_time_union (internal, internal),\n\tFUNCTION\t3\tgbt_timetz_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_time_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_time_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_time_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_timetz_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_timetz_ops USING gist ADD\n\tOPERATOR\t6\t<> (timetz, timetz)', 'source_success': False, 'source_exception': 'operator 6(time with time zone,time with time zone) already exists in operator family ""gist_timetz_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""-- no 'fetch' function, as the compress function is lossy.\n\n\n--\n--\n--\n-- date ops\n--\n--\n--\n\nCREATE FUNCTION gbt_date_consistent(internal,date,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_date_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_date_distance(internal,date,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_date_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_date_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_date_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_date_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_date_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_date_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_date_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_date_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_date_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_date_union(internal, internal)\nRETURNS gbtreekey8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_date_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_date_same(gbtreekey8, gbtreekey8, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_date_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_date_ops\nDEFAULT FOR TYPE date USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_date_consistent (internal, date, int2, oid, internal),\n\tFUNCTION\t2\tgbt_date_union (internal, internal),\n\tFUNCTION\t3\tgbt_date_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_date_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_date_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_date_same (gbtreekey8, gbtreekey8, internal),\n\tSTORAGE\t\tgbtreekey8', 'source_success': False, 'source_exception': 'operator class ""gist_date_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_date_ops USING gist ADD\n\tOPERATOR\t6\t<> (date, date) ,\n\tOPERATOR\t15\t<-> (date, date) FOR ORDER BY pg_catalog.integer_ops ,\n\tFUNCTION\t8 (date, date) gbt_date_distance (internal, date, int2, oid, internal) ,\n\tFUNCTION\t9 (date, date) gbt_date_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(date,date) already exists in operator family ""gist_date_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- interval ops\n--\n--\n--\n\nCREATE FUNCTION gbt_intv_consistent(internal,interval,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_intv_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_intv_distance(internal,interval,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_intv_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_intv_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_intv_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_intv_decompress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_intv_decompress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_intv_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_intv_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_intv_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_intv_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_intv_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_intv_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_intv_union(internal, internal)\nRETURNS gbtreekey32\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_intv_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_intv_same(gbtreekey32, gbtreekey32, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_intv_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_interval_ops\nDEFAULT FOR TYPE interval USING gist\nAS\n\tOPERATOR\t1\t< ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t= ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t> ,\n\tFUNCTION\t1\tgbt_intv_consistent (internal, interval, int2, oid, internal),\n\tFUNCTION\t2\tgbt_intv_union (internal, internal),\n\tFUNCTION\t3\tgbt_intv_compress (internal),\n\tFUNCTION\t4\tgbt_intv_decompress (internal),\n\tFUNCTION\t5\tgbt_intv_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_intv_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_intv_same (gbtreekey32, gbtreekey32, internal),\n\tSTORAGE\t\tgbtreekey32', 'source_success': False, 'source_exception': 'operator class ""gist_interval_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_interval_ops USING gist ADD\n\tOPERATOR\t6\t<> (interval, interval) ,\n\tOPERATOR\t15\t<-> (interval, interval) FOR ORDER BY pg_catalog.interval_ops ,\n\tFUNCTION\t8 (interval, interval) gbt_intv_distance (internal, interval, int2, oid, internal) ,\n\tFUNCTION\t9 (interval, interval) gbt_intv_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(interval,interval) already exists in operator family ""gist_interval_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- cash ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_cash_consistent(internal,money,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_cash_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_cash_distance(internal,money,int2,oid,internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_cash_distance"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_cash_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_cash_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_cash_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_cash_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_cash_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_cash_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_cash_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_cash_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_cash_union(internal, internal)\nRETURNS gbtreekey16\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_cash_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_cash_same(gbtreekey16, gbtreekey16, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_cash_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_cash_ops\nDEFAULT FOR TYPE money USING gist\nAS\n\tOPERATOR\t1\t< ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t= ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t> ,\n\tFUNCTION\t1\tgbt_cash_consistent (internal, money, int2, oid, internal),\n\tFUNCTION\t2\tgbt_cash_union (internal, internal),\n\tFUNCTION\t3\tgbt_cash_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_cash_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_cash_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_cash_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_cash_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_cash_ops USING gist ADD\n\tOPERATOR\t6\t<> (money, money) ,\n\tOPERATOR\t15\t<-> (money, money) FOR ORDER BY pg_catalog.money_ops ,\n\tFUNCTION\t8 (money, money) gbt_cash_distance (internal, money, int2, oid, internal) ,\n\tFUNCTION\t9 (money, money) gbt_cash_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(money,money) already exists in operator family ""gist_cash_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- macaddr ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_macad_consistent(internal,macaddr,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad_union(internal, internal)\nRETURNS gbtreekey16\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad_same(gbtreekey16, gbtreekey16, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_macaddr_ops\nDEFAULT FOR TYPE macaddr USING gist\nAS\n\tOPERATOR\t1\t< ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t= ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t> ,\n\tFUNCTION\t1\tgbt_macad_consistent (internal, macaddr, int2, oid, internal),\n\tFUNCTION\t2\tgbt_macad_union (internal, internal),\n\tFUNCTION\t3\tgbt_macad_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_macad_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_macad_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_macad_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_macaddr_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_macaddr_ops USING gist ADD\n\tOPERATOR\t6\t<> (macaddr, macaddr) ,\n\tFUNCTION\t9 (macaddr, macaddr) gbt_macad_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(macaddr,macaddr) already exists in operator family ""gist_macaddr_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- text/ bpchar ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_text_consistent(internal,text,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_text_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bpchar_consistent(internal,bpchar,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bpchar_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_text_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_text_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bpchar_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bpchar_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_text_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_text_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_text_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_text_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_text_union(internal, internal)\nRETURNS gbtreekey_var\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_text_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_text_same(gbtreekey_var, gbtreekey_var, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_text_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_text_ops\nDEFAULT FOR TYPE text USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_text_consistent (internal, text, int2, oid, internal),\n\tFUNCTION\t2\tgbt_text_union (internal, internal),\n\tFUNCTION\t3\tgbt_text_compress (internal),\n\tFUNCTION\t4\tgbt_var_decompress (internal),\n\tFUNCTION\t5\tgbt_text_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_text_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_text_same (gbtreekey_var, gbtreekey_var, internal),\n\tSTORAGE\t\t\tgbtreekey_var', 'source_success': False, 'source_exception': 'operator class ""gist_text_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_text_ops USING gist ADD\n\tOPERATOR\t6\t<> (text, text) ,\n\tFUNCTION\t9 (text, text) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(text,text) already exists in operator family ""gist_text_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '---- Create the operator class\nCREATE OPERATOR CLASS gist_bpchar_ops\nDEFAULT FOR TYPE bpchar USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_bpchar_consistent (internal, bpchar , int2, oid, internal),\n\tFUNCTION\t2\tgbt_text_union (internal, internal),\n\tFUNCTION\t3\tgbt_bpchar_compress (internal),\n\tFUNCTION\t4\tgbt_var_decompress (internal),\n\tFUNCTION\t5\tgbt_text_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_text_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_text_same (gbtreekey_var, gbtreekey_var, internal),\n\tSTORAGE\t\t\tgbtreekey_var', 'source_success': False, 'source_exception': 'operator class ""gist_bpchar_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_bpchar_ops USING gist ADD\n\tOPERATOR\t6\t<> (bpchar, bpchar) ,\n\tFUNCTION\t9 (bpchar, bpchar) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(character,character) already exists in operator family ""gist_bpchar_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n-- bytea ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_bytea_consistent(internal,bytea,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bytea_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bytea_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bytea_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bytea_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bytea_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bytea_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bytea_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bytea_union(internal, internal)\nRETURNS gbtreekey_var\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bytea_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bytea_same(gbtreekey_var, gbtreekey_var, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bytea_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_bytea_ops\nDEFAULT FOR TYPE bytea USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_bytea_consistent (internal, bytea, int2, oid, internal),\n\tFUNCTION\t2\tgbt_bytea_union (internal, internal),\n\tFUNCTION\t3\tgbt_bytea_compress (internal),\n\tFUNCTION\t4\tgbt_var_decompress (internal),\n\tFUNCTION\t5\tgbt_bytea_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_bytea_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_bytea_same (gbtreekey_var, gbtreekey_var, internal),\n\tSTORAGE\t\t\tgbtreekey_var', 'source_success': False, 'source_exception': 'operator class ""gist_bytea_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_bytea_ops USING gist ADD\n\tOPERATOR\t6\t<> (bytea, bytea) ,\n\tFUNCTION\t9 (bytea, bytea) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(bytea,bytea) already exists in operator family ""gist_bytea_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- numeric ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_numeric_consistent(internal,numeric,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_numeric_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_numeric_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_numeric_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_numeric_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_numeric_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_numeric_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_numeric_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_numeric_union(internal, internal)\nRETURNS gbtreekey_var\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_numeric_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_numeric_same(gbtreekey_var, gbtreekey_var, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_numeric_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_numeric_ops\nDEFAULT FOR TYPE numeric USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_numeric_consistent (internal, numeric, int2, oid, internal),\n\tFUNCTION\t2\tgbt_numeric_union (internal, internal),\n\tFUNCTION\t3\tgbt_numeric_compress (internal),\n\tFUNCTION\t4\tgbt_var_decompress (internal),\n\tFUNCTION\t5\tgbt_numeric_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_numeric_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_numeric_same (gbtreekey_var, gbtreekey_var, internal),\n\tSTORAGE\t\t\tgbtreekey_var', 'source_success': False, 'source_exception': 'operator class ""gist_numeric_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_numeric_ops USING gist ADD\n\tOPERATOR\t6\t<> (numeric, numeric) ,\n\tFUNCTION\t9 (numeric, numeric) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(numeric,numeric) already exists in operator family ""gist_numeric_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n-- bit ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_bit_consistent(internal,bit,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bit_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bit_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bit_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bit_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bit_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bit_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bit_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bit_union(internal, internal)\nRETURNS gbtreekey_var\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bit_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bit_same(gbtreekey_var, gbtreekey_var, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bit_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_bit_ops\nDEFAULT FOR TYPE bit USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_bit_consistent (internal, bit, int2, oid, internal),\n\tFUNCTION\t2\tgbt_bit_union (internal, internal),\n\tFUNCTION\t3\tgbt_bit_compress (internal),\n\tFUNCTION\t4\tgbt_var_decompress (internal),\n\tFUNCTION\t5\tgbt_bit_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_bit_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_bit_same (gbtreekey_var, gbtreekey_var, internal),\n\tSTORAGE\t\t\tgbtreekey_var', 'source_success': False, 'source_exception': 'operator class ""gist_bit_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_bit_ops USING gist ADD\n\tOPERATOR\t6\t<> (bit, bit) ,\n\tFUNCTION\t9 (bit, bit) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(bit,bit) already exists in operator family ""gist_bit_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_vbit_ops\nDEFAULT FOR TYPE varbit USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_bit_consistent (internal, bit, int2, oid, internal),\n\tFUNCTION\t2\tgbt_bit_union (internal, internal),\n\tFUNCTION\t3\tgbt_bit_compress (internal),\n\tFUNCTION\t4\tgbt_var_decompress (internal),\n\tFUNCTION\t5\tgbt_bit_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_bit_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_bit_same (gbtreekey_var, gbtreekey_var, internal),\n\tSTORAGE\t\t\tgbtreekey_var', 'source_success': False, 'source_exception': 'operator class ""gist_vbit_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_vbit_ops USING gist ADD\n\tOPERATOR\t6\t<> (varbit, varbit) ,\n\tFUNCTION\t9 (varbit, varbit) gbt_var_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(bit varying,bit varying) already exists in operator family ""gist_vbit_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""--\n--\n--\n-- inet/cidr ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_inet_consistent(internal,inet,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_inet_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_inet_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_inet_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_inet_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_inet_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_inet_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_inet_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_inet_union(internal, internal)\nRETURNS gbtreekey16\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_inet_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_inet_same(gbtreekey16, gbtreekey16, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_inet_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_inet_ops\nDEFAULT FOR TYPE inet USING gist\nAS\n\tOPERATOR\t1\t<   ,\n\tOPERATOR\t2\t<=  ,\n\tOPERATOR\t3\t=   ,\n\tOPERATOR\t4\t>=  ,\n\tOPERATOR\t5\t>   ,\n\tFUNCTION\t1\tgbt_inet_consistent (internal, inet, int2, oid, internal),\n\tFUNCTION\t2\tgbt_inet_union (internal, internal),\n\tFUNCTION\t3\tgbt_inet_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_inet_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_inet_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_inet_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_inet_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_inet_ops USING gist ADD\n\tOPERATOR\t6\t<>  (inet, inet)', 'source_success': False, 'source_exception': 'operator 6(inet,inet) already exists in operator family ""gist_inet_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- no fetch support, the compress function is lossy\n\n-- Create the operator class\nCREATE OPERATOR CLASS gist_cidr_ops\nDEFAULT FOR TYPE cidr USING gist\nAS\n\tOPERATOR\t1\t<  (inet, inet)  ,\n\tOPERATOR\t2\t<= (inet, inet)  ,\n\tOPERATOR\t3\t=  (inet, inet)  ,\n\tOPERATOR\t4\t>= (inet, inet)  ,\n\tOPERATOR\t5\t>  (inet, inet)  ,\n\tFUNCTION\t1\tgbt_inet_consistent (internal, inet, int2, oid, internal),\n\tFUNCTION\t2\tgbt_inet_union (internal, internal),\n\tFUNCTION\t3\tgbt_inet_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_inet_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_inet_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_inet_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_cidr_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_cidr_ops USING gist ADD\n\tOPERATOR\t6\t<> (inet, inet)', 'source_success': False, 'source_exception': 'operator 6(inet,inet) already exists in operator family ""gist_cidr_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- no fetch support, the compress function is lossy', 'source_success': False, 'source_exception': ""can't execute an empty query"", 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
btree_gist--1.3--1.4.sql,postgresql,"[{'query': '/* contrib/btree_gist/btree_gist--1.3--1.4.sql */\n\n-- complain if script is sourced in psql, rather than via ALTER EXTENSION\n\\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.4\'"" to load this file. \\quit\n\n-- Add support for indexing macaddr8 columns\n\n-- define the GiST support methods\nCREATE FUNCTION gbt_macad8_consistent(internal,macaddr8,int2,oid,internal)\nRETURNS bool\nAS \'MODULE_PATHNAME\'\nLANGUAGE C IMMUTABLE STRICT', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.4\'"" to lo...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad8_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad8_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad8_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad8_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad8_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad8_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad8_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad8_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad8_union(internal, internal)\nRETURNS gbtreekey16\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad8_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_macad8_same(gbtreekey16, gbtreekey16, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_macad8_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_macaddr8_ops\nDEFAULT FOR TYPE macaddr8 USING gist\nAS\n\tOPERATOR\t1\t< ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t= ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t> ,\n\tFUNCTION\t1\tgbt_macad8_consistent (internal, macaddr8, int2, oid, internal),\n\tFUNCTION\t2\tgbt_macad8_union (internal, internal),\n\tFUNCTION\t3\tgbt_macad8_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_macad8_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_macad8_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_macad8_same (gbtreekey16, gbtreekey16, internal),\n\tSTORAGE\t\tgbtreekey16', 'source_success': False, 'source_exception': 'operator class ""gist_macaddr8_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_macaddr8_ops USING gist ADD\n\tOPERATOR\t6\t<> (macaddr8, macaddr8) ,\n\tFUNCTION\t9 (macaddr8, macaddr8) gbt_macad8_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(macaddr8,macaddr8) already exists in operator family ""gist_macaddr8_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
btree_gist--1.4--1.5.sql,postgresql,"[{'query': '/* contrib/btree_gist/btree_gist--1.4--1.5.sql */\n\n-- complain if script is sourced in psql, rather than via CREATE EXTENSION\n\\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.5\'"" to load this file. \\quit\n\n--\n--\n--\n-- enum ops\n--\n--\n--\n-- define the GiST support methods\nCREATE FUNCTION gbt_enum_consistent(internal,anyenum,int2,oid,internal)\nRETURNS bool\nAS \'MODULE_PATHNAME\'\nLANGUAGE C IMMUTABLE STRICT', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.5\'"" to lo...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_enum_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_enum_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_enum_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_enum_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_enum_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_enum_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_enum_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_enum_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_enum_union(internal, internal)\nRETURNS gbtreekey8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_enum_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_enum_same(gbtreekey8, gbtreekey8, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_enum_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_enum_ops\nDEFAULT FOR TYPE anyenum USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tFUNCTION\t1\tgbt_enum_consistent (internal, anyenum, int2, oid, internal),\n\tFUNCTION\t2\tgbt_enum_union (internal, internal),\n\tFUNCTION\t3\tgbt_enum_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_enum_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_enum_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_enum_same (gbtreekey8, gbtreekey8, internal),\n\tSTORAGE\t\tgbtreekey8', 'source_success': False, 'source_exception': 'operator class ""gist_enum_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_enum_ops USING gist ADD\n\tOPERATOR\t6\t<> (anyenum, anyenum) ,\n\tFUNCTION\t9 (anyenum, anyenum) gbt_enum_fetch (internal)', 'source_success': False, 'source_exception': 'operator 6(anyenum,anyenum) already exists in operator family ""gist_enum_ops""\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
btree_gist--1.5--1.6.sql,postgresql,"[{'query': '/* contrib/btree_gist/btree_gist--1.5--1.6.sql */\n\n-- complain if script is sourced in psql, rather than via CREATE EXTENSION\n\\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.6\'"" to load this file. \\quit\n\n-- This upgrade script marks all btree_gist functions as parallel safe.\n\n-- Input/output functions for GiST key types (gbtreekey*)\nALTER FUNCTION gbtreekey4_in(cstring) PARALLEL SAFE', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.6\'"" to lo...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbtreekey4_out(gbtreekey4) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbtreekey8_in(cstring) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbtreekey8_out(gbtreekey8) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbtreekey16_in(cstring) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbtreekey16_out(gbtreekey16) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbtreekey32_in(cstring) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbtreekey32_out(gbtreekey32) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbtreekey_var_in(cstring) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbtreekey_var_out(gbtreekey_var) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Functions, which implement distance operators (<->)\nALTER FUNCTION cash_dist(money, money) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION date_dist(date, date) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION float4_dist(real, real) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION float8_dist(double precision, double precision) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION int2_dist(smallint, smallint) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION int4_dist(integer, integer) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION int8_dist(bigint, bigint) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION interval_dist(interval, interval) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION oid_dist(oid, oid) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION time_dist(time without time zone, time without time zone) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION ts_dist(timestamp without time zone, timestamp without time zone) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION tstz_dist(timestamp with time zone, timestamp with time zone) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- GiST support methods\nALTER FUNCTION gbt_oid_consistent(internal, oid, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_oid_distance(internal, oid, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_oid_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_oid_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_decompress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_var_decompress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_var_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_oid_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_oid_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_oid_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_oid_same(gbtreekey8, gbtreekey8, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int2_consistent(internal, smallint, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int2_distance(internal, smallint, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int2_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int2_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int2_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int2_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int2_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int2_same(gbtreekey4, gbtreekey4, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int4_consistent(internal, integer, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int4_distance(internal, integer, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int4_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int4_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int4_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int4_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int4_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int4_same(gbtreekey8, gbtreekey8, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int8_consistent(internal, bigint, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int8_distance(internal, bigint, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int8_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int8_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int8_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int8_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int8_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_int8_same(gbtreekey16, gbtreekey16, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float4_consistent(internal, real, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float4_distance(internal, real, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float4_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float4_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float4_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float4_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float4_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float4_same(gbtreekey8, gbtreekey8, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float8_consistent(internal, double precision, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float8_distance(internal, double precision, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float8_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float8_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float8_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float8_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float8_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_float8_same(gbtreekey16, gbtreekey16, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_ts_consistent(internal, timestamp without time zone, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_ts_distance(internal, timestamp without time zone, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_tstz_consistent(internal, timestamp with time zone, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_tstz_distance(internal, timestamp with time zone, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_ts_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_tstz_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_ts_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_ts_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_ts_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_ts_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_ts_same(gbtreekey16, gbtreekey16, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_time_consistent(internal, time without time zone, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_time_distance(internal, time without time zone, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_timetz_consistent(internal, time with time zone, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_time_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_timetz_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_time_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_time_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_time_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_time_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_time_same(gbtreekey16, gbtreekey16, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_date_consistent(internal, date, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_date_distance(internal, date, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_date_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_date_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_date_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_date_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_date_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_date_same(gbtreekey8, gbtreekey8, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_intv_consistent(internal, interval, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_intv_distance(internal, interval, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_intv_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_intv_decompress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_intv_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_intv_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_intv_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_intv_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_intv_same(gbtreekey32, gbtreekey32, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_cash_consistent(internal, money, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_cash_distance(internal, money, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_cash_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_cash_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_cash_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_cash_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_cash_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_cash_same(gbtreekey16, gbtreekey16, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad_consistent(internal, macaddr, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad_same(gbtreekey16, gbtreekey16, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_text_consistent(internal, text, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bpchar_consistent(internal, character, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_text_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bpchar_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_text_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_text_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_text_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_text_same(gbtreekey_var, gbtreekey_var, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bytea_consistent(internal, bytea, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bytea_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bytea_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bytea_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bytea_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bytea_same(gbtreekey_var, gbtreekey_var, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_numeric_consistent(internal, numeric, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_numeric_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_numeric_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_numeric_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_numeric_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_numeric_same(gbtreekey_var, gbtreekey_var, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bit_consistent(internal, bit, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bit_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bit_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bit_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bit_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_bit_same(gbtreekey_var, gbtreekey_var, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_inet_consistent(internal, inet, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_inet_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_inet_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_inet_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_inet_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_inet_same(gbtreekey16, gbtreekey16, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_uuid_consistent(internal, uuid, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_uuid_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_uuid_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_uuid_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_uuid_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_uuid_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_uuid_same(gbtreekey32, gbtreekey32, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad8_consistent(internal, macaddr8, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad8_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad8_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad8_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad8_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad8_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_macad8_same(gbtreekey16, gbtreekey16, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_enum_consistent(internal, anyenum, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_enum_compress(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_enum_fetch(internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_enum_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_enum_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_enum_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION gbt_enum_same(gbtreekey8, gbtreekey8, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
btree_gist--1.6--1.7.sql,postgresql,"[{'query': '/* contrib/btree_gist/btree_gist--1.6--1.7.sql */\n\n-- complain if script is sourced in psql, rather than via CREATE EXTENSION\n\\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.7\'"" to load this file. \\quit\n\n-- This upgrade scripts add support for bool.\nCREATE FUNCTION gbtreekey2_in(cstring)\nRETURNS gbtreekey2\nAS \'MODULE_PATHNAME\', \'gbtreekey_in\'\nLANGUAGE C IMMUTABLE STRICT PARALLEL SAFE', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""ALTER EXTENSION btree_gist UPDATE TO \'1.7\'"" to lo...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbtreekey2_out(gbtreekey2)\nRETURNS cstring\nAS 'MODULE_PATHNAME', 'gbtreekey_out'\nLANGUAGE C IMMUTABLE STRICT PARALLEL SAFE"", 'source_success': False, 'source_exception': 'function ""gbtreekey2_out"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE TYPE gbtreekey2 (\n\tINTERNALLENGTH = 2,\n\tINPUT  = gbtreekey2_in,\n\tOUTPUT = gbtreekey2_out\n)', 'source_success': False, 'source_exception': 'type ""gbtreekey2"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""TYPE"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""-- Define the GiST support methods\nCREATE FUNCTION gbt_bool_consistent(internal,bool,int2,oid,internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bool_consistent"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bool_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bool_compress"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bool_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bool_fetch"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bool_penalty(internal,internal,internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bool_penalty"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bool_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bool_picksplit"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bool_union(internal, internal)\nRETURNS gbtreekey2\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bool_union"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION gbt_bool_same(gbtreekey2, gbtreekey2, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""gbt_bool_same"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': '-- Create the operator class\nCREATE OPERATOR CLASS gist_bool_ops\nDEFAULT FOR TYPE bool USING gist\nAS\n\tOPERATOR\t1\t<  ,\n\tOPERATOR\t2\t<= ,\n\tOPERATOR\t3\t=  ,\n\tOPERATOR\t4\t>= ,\n\tOPERATOR\t5\t>  ,\n\tOPERATOR\t6\t<> ,\n\tFUNCTION\t1\tgbt_bool_consistent (internal, bool, int2, oid, internal),\n\tFUNCTION\t2\tgbt_bool_union (internal, internal),\n\tFUNCTION\t3\tgbt_bool_compress (internal),\n\tFUNCTION\t4\tgbt_decompress (internal),\n\tFUNCTION\t5\tgbt_bool_penalty (internal, internal, internal),\n\tFUNCTION\t6\tgbt_bool_picksplit (internal, internal),\n\tFUNCTION\t7\tgbt_bool_same (gbtreekey2, gbtreekey2, internal),\n\tFUNCTION\t9   gbt_bool_fetch (internal),\n\tSTORAGE\t\tgbtreekey2', 'source_success': False, 'source_exception': 'operator class ""gist_bool_ops"" for access method ""gist"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
bytea.sql,postgresql,"[{'query': '-- bytea check\n\nCREATE TABLE byteatmp (a bytea)', 'source_success': False, 'source_exception': 'relation ""byteatmp"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""\\copy byteatmp from 'data/text.data'\n\\copy byteatmp from 'data/char.data'\n\nSET enable_seqscan=on"", 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 1: \\copy byteatmp from \'data/text.data\'\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a <   '31b0'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a <=  '31b0'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a  =  '31b0'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a >=  '31b0'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a >   '31b0'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'CREATE INDEX byteaidx ON byteatmp USING GIST ( a )', 'source_success': False, 'source_exception': 'relation ""byteaidx"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USING"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_seqscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a <   '31b0'::bytea"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a <=  '31b0'::bytea"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a  =  '31b0'::bytea"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a >=  '31b0'::bytea"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a >   '31b0'::bytea"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM byteatmp WHERE a  =  '2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809 2eb2c961c1cbf6 cf8d7b68cb9a2f36 7bbedb4ae7 06ec46c55611a466eb7e3edcc009ca6 e 5ed9cd0ea5a4e55d601027c56a  64cacf3a42afc 90e63000c34506993345355640 79bce 173bb7 c5 574ea7c921cb0f25 089d56d16dff24f336e4740 6870470f1f9afcb4f7c56c9f b97e117fc965 7013029 e48f6dd481 7d00e1e227beef84a9 904d4c34241f cb5c0f14 3a8a70 f51a73164e92052fbb53b4cc2f1fed 3c3fecaa0270175 2521ef03594 fa05756812648f450fb 13c2f b39a0729d6182e9 15b5ea204fe73 d8991afd72d21acd188df1 a29fff57ab897338 de549b3ed5a024534c007125c 2fcf3e5c3e3 7427b6daec5c3f 473 8 a5d9 840410976ac2eeab58e1ca8bf46c2b7 1db9cc85a336f1291ea19922 db808f3548cda91 2e379ce80af12bd7ed56d0338c a ea67a7c847f6620fc894f0ba10044 0e 52e97d975af7201d8 d95e6f08184d8ff 19762476fa 42f278f3534f3f2be0abaed71 f0aba11835e4e1d94 e8534cf677046eafb8f5f761865 ffbee273c7bb 2bb77f6e780 c77e81851c491 e a9f45d765b01a030d5d317 ff7345a22bc360 c87363ba121297b063e83 13ea32e9618d 40304f6c2a7e92c1c66ff4208e a781b4a21419abfdf5eb467e4d48908 8a65656e514b2b3ef8f86310aaf85 4 90b7b2862e3dbc8f0eef3dfc6075bfa eb94a1c a58abb5def4fa43840e6e2716 260e6eaebb 42415d712bf83944dcd1204e 305254fc3b849150b5 5bbd7f8471dcd3621 2ae0548115a250 0c1988e9 76f98bef45639b7 0d5a28f01dc b71 c046576faa4d49eff8 c1e8d01c 10c86c457ea050455a742da4f8 ea7676af85c71c7eeca635 6a07137227404d a4 7186172 8150f31c9a15401c f1bb9057a9938bfa 22b482be08f424ec4 21daea994293589 15bff393f6b17fef24786dd6f9 d5a2d 4b3b5dd9370543e b4a93b2ac4341945d06 d384447812e0 4e3c97e9b8f7 f7d4d644b2a1d373 5102c b9531f725674b28 1aa16e7e34285797c1439 51aa762ea14b40fb8876c887eea6 45a62d3d5d3e946250904697486591 b3f1a8 243524767bf846d 8 95 45a922872 dd2497eb1e3da8d513d2 7821db9e14d4f 24c4f085de60d7c0c6ea3fc6bc e4c9f8c68596d7d afd6c8cb0f2516b87f24bbd8 61d2e457c70949 d2d362cdc657 3605f9d27fd6d72 32de91d66fe5bf537530 859e1a08b65 9b5a55f 4116cda9fddeb843964002 e81f3b2c0ca566ad3dbbc6e234 0d3b1d54 10c440be5c0bca95 7dad841f a61f041967972e805ccfee55c deee9cc16e92ab197 7627554073c1f56b9e 21bebcbfd2e2282f84 7b121a83eeb91db8bda81ba88c634b46394 59885ebc737617addaaf0cb809'::bytea"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': '-- Test index-only scans\nSET enable_bitmapscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""EXPLAIN (COSTS OFF)\nSELECT a FROM byteatmp where a > 'ffa'::bytea"", 'source_success': True, 'source_exception': '', 'source_result': ""                                   QUERY PLAN\n0  Index Only Scan using byteaidx on byteatmp\n1         Index Cond: (a > '\\x666661'::bytea)"", 'source_shape': (2, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT a FROM byteatmp where a > 'ffa'::bytea"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
cash.sql,postgresql,"[{'query': '-- money check\n\nCREATE TABLE moneytmp (a money)', 'source_success': False, 'source_exception': 'relation ""moneytmp"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""\\copy moneytmp from 'data/cash.data'\n\nSET enable_seqscan=on"", 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 1: \\copy moneytmp from \'data/cash.data\'\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT count(*) FROM moneytmp WHERE a <  '22649.64'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM moneytmp WHERE a <= '22649.64'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM moneytmp WHERE a  = '22649.64'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM moneytmp WHERE a >= '22649.64'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM moneytmp WHERE a >  '22649.64'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT a, a <-> '21472.79' FROM moneytmp ORDER BY a <-> '21472.79' LIMIT 3"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""->"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE INDEX moneyidx ON moneytmp USING gist ( a )', 'source_success': False, 'source_exception': 'relation ""moneyidx"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USING"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_seqscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT count(*) FROM moneytmp WHERE a <  '22649.64'::money"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM moneytmp WHERE a <= '22649.64'::money"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM moneytmp WHERE a  = '22649.64'::money"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM moneytmp WHERE a >= '22649.64'::money"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM moneytmp WHERE a >  '22649.64'::money"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""EXPLAIN (COSTS OFF)\nSELECT a, a <-> '21472.79' FROM moneytmp ORDER BY a <-> '21472.79' LIMIT 3"", 'source_success': True, 'source_exception': '', 'source_result': ""                                         QUERY PLAN\n0                                             Limit\n1    ->  Index Only Scan using moneyidx on moneytmp\n2             Order By: (a <-> '$21,472.79'::money)"", 'source_shape': (3, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT a, a <-> '21472.79' FROM moneytmp ORDER BY a <-> '21472.79' LIMIT 3"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""->"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
char.sql,postgresql,"[{'query': '-- char check\n\nCREATE TABLE chartmp (a char(32))', 'source_success': False, 'source_exception': 'relation ""chartmp"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""\\copy chartmp from 'data/char.data'\n\nSET enable_seqscan=on"", 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 1: \\copy chartmp from \'data/char.data\'\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT count(*) FROM chartmp WHERE a <   '31b0'::char(32)"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM chartmp WHERE a <=  '31b0'::char(32)"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM chartmp WHERE a  =  '31b0'::char(32)"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM chartmp WHERE a >=  '31b0'::char(32)"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM chartmp WHERE a >   '31b0'::char(32)"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'CREATE INDEX charidx ON chartmp USING GIST ( a )', 'source_success': False, 'source_exception': 'relation ""charidx"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USING"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_seqscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT count(*) FROM chartmp WHERE a <   '31b0'::char(32)"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM chartmp WHERE a <=  '31b0'::char(32)"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM chartmp WHERE a  =  '31b0'::char(32)"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM chartmp WHERE a >=  '31b0'::char(32)"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM chartmp WHERE a >   '31b0'::char(32)"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': '-- Test index-only scans\nSET enable_bitmapscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""EXPLAIN (COSTS OFF)\nSELECT * FROM chartmp WHERE a BETWEEN '31a' AND '31c'"", 'source_success': True, 'source_exception': '', 'source_result': ""                                                      QUERY PLAN\n0                       Index Only Scan using charidx on chartmp\n1    Index Cond: ((a >= '31a'::bpchar) AND (a <= '31c'::bpchar))"", 'source_shape': (2, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT * FROM chartmp WHERE a BETWEEN '31a' AND '31c'"", 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': True, 'result': '', 'error': '', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
cidr.sql,postgresql,"[{'query': '-- cidr check\n\nCREATE TABLE cidrtmp AS\n  SELECT cidr(a) AS a FROM inettmp', 'source_success': False, 'source_exception': 'relation ""cidrtmp"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: inettmp', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_seqscan=on', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT count(*) FROM cidrtmp WHERE a <  '121.111.63.82'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: cidrtmp', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM cidrtmp WHERE a <= '121.111.63.82'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: cidrtmp', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM cidrtmp WHERE a  = '121.111.63.82'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: cidrtmp', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM cidrtmp WHERE a >= '121.111.63.82'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: cidrtmp', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM cidrtmp WHERE a >  '121.111.63.82'"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'no such table: cidrtmp', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': 'CREATE INDEX cidridx ON cidrtmp USING gist ( a )', 'source_success': False, 'source_exception': 'relation ""cidridx"" already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""USING"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'SET enable_seqscan=off', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""SET"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""SELECT count(*) FROM cidrtmp WHERE a <  '121.111.63.82'::cidr"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM cidrtmp WHERE a <= '121.111.63.82'::cidr"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM cidrtmp WHERE a  = '121.111.63.82'::cidr"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM cidrtmp WHERE a >= '121.111.63.82'::cidr"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT count(*) FROM cidrtmp WHERE a >  '121.111.63.82'::cidr"", 'source_success': True, 'source_exception': '', 'source_result': '   count\n0      0', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}]"
cleanup.sql,postgresql,"[{'query': 'DROP EXTENSION pg_stat_statements', 'source_success': False, 'source_exception': 'extension ""pg_stat_statements"" does not exist\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""EXTENSION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
cube--1.0--1.1.sql,postgresql,"[{'query': '/* contrib/cube/cube--1.0--1.1.sql */\n\n-- complain if script is sourced in psql, rather than via ALTER EXTENSION\n\\echo Use ""ALTER EXTENSION cube UPDATE TO \'1.1\'"" to load this file. \\quit\n\nCREATE FUNCTION distance_chebyshev(cube, cube)\nRETURNS float8\nAS \'MODULE_PATHNAME\'\nLANGUAGE C IMMUTABLE STRICT', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""ALTER EXTENSION cube UPDATE TO \'1.1\'"" to load thi...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION distance_taxicab(cube, cube)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""distance_taxicab"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION cube_coord(cube, int4)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""cube_coord"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION cube_coord_llur(cube, int4)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'function ""cube_coord_llur"" already exists with same argument types\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE OPERATOR -> (\n\tLEFTARG = cube, RIGHTARG = int, PROCEDURE = cube_coord\n)', 'source_success': False, 'source_exception': 'operator -> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'CREATE OPERATOR ~> (\n\tLEFTARG = cube, RIGHTARG = int, PROCEDURE = cube_coord_llur\n)', 'source_success': False, 'source_exception': 'operator ~> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <#> (\n\tLEFTARG = cube, RIGHTARG = cube, PROCEDURE = distance_taxicab,\n\tCOMMUTATOR = '<#>'\n)"", 'source_success': False, 'source_exception': 'operator <#> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <-> (\n\tLEFTARG = cube, RIGHTARG = cube, PROCEDURE = cube_distance,\n\tCOMMUTATOR = '<->'\n)"", 'source_success': False, 'source_exception': 'operator <-> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE OPERATOR <=> (\n\tLEFTARG = cube, RIGHTARG = cube, PROCEDURE = distance_chebyshev,\n\tCOMMUTATOR = '<=>'\n)"", 'source_success': False, 'source_exception': 'operator <=> already exists\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""CREATE FUNCTION g_cube_distance (internal, cube, smallint, oid)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C IMMUTABLE STRICT"", 'source_success': False, 'source_exception': 'could not access file ""MODULE_PATHNAME"": No such file or directory\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR FAMILY gist_cube_ops USING gist ADD\n\tOPERATOR\t15\t~> (cube, int) FOR ORDER BY float_ops,\n\tOPERATOR\t16\t<#> (cube, cube) FOR ORDER BY float_ops,\n\tOPERATOR\t17\t<-> (cube, cube) FOR ORDER BY float_ops,\n\tOPERATOR\t18\t<=> (cube, cube) FOR ORDER BY float_ops,\n\tFUNCTION\t8\t(cube, cube)\tg_cube_distance (internal, cube, smallint, oid)', 'source_success': False, 'source_exception': 'function g_cube_distance(internal, cube, smallint, oid) does not exist\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
cube--1.1--1.2.sql,postgresql,"[{'query': '/* contrib/cube/cube--1.1--1.2.sql */\n\n-- complain if script is sourced in psql, rather than via ALTER EXTENSION\n\\echo Use ""ALTER EXTENSION cube UPDATE TO \'1.2\'"" to load this file. \\quit\n\n-- Update procedure signatures the hard way.\n-- We use to_regprocedure() so that query doesn\'t fail if run against 9.6beta1 definitions,\n-- wherein the signatures have been updated already.  In that case to_regprocedure() will\n-- return NULL and no updates will happen.\nDO LANGUAGE plpgsql\n$$\nDECLARE\n  my_schema pg_catalog.text := pg_catalog.quote_ident(pg_catalog.current_schema())', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""ALTER EXTENSION cube UPDATE TO \'1.2\'"" to load thi...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""old_path pg_catalog.text := pg_catalog.current_setting('search_path')"", 'source_success': False, 'source_exception': 'syntax error at or near ""old_path""\nLINE 1: old_path pg_catalog.text := pg_catalog.current_setting(\'sear...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""old_path"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""BEGIN\n-- for safety, transiently set search_path to just pg_catalog+pg_temp\nPERFORM pg_catalog.set_config('search_path', 'pg_catalog, pg_temp', true)"", 'source_success': False, 'source_exception': 'syntax error at or near ""PERFORM""\nLINE 3: PERFORM pg_catalog.set_config(\'search_path\', \'pg_catalog, pg...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""PERFORM"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""UPDATE pg_catalog.pg_proc SET\n  proargtypes = pg_catalog.array_to_string(newtypes::pg_catalog.oid[], ' ')::pg_catalog.oidvector,\n  pronargs = pg_catalog.array_length(newtypes, 1)\nFROM (VALUES\n(NULL::pg_catalog.text, NULL::pg_catalog.text[]), -- establish column types\n('g_cube_consistent(internal,SCH.cube,int4,oid,internal)', '{internal,SCH.cube,int2,oid,internal}'),\n('g_cube_distance(internal,SCH.cube,smallint,oid)', '{internal,SCH.cube,smallint,oid,internal}')\n) AS update_data (oldproc, newtypestext),\nLATERAL (\n  SELECT array_agg(replace(typ, 'SCH', my_schema)::regtype) as newtypes FROM unnest(newtypestext) typ\n) ls\nWHERE oid = to_regprocedure(my_schema || '.' || replace(oldproc, 'SCH', my_schema))"", 'source_success': False, 'source_exception': 'column ""my_schema"" does not exist\nLINE 10:   SELECT array_agg(replace(typ, \'SCH\', my_schema)::regtype) ...\n                                                ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""("": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': ""PERFORM pg_catalog.set_config('search_path', old_path, true)"", 'source_success': False, 'source_exception': 'syntax error at or near ""PERFORM""\nLINE 1: PERFORM pg_catalog.set_config(\'search_path\', old_path, true)\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""PERFORM"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'END\n$$', 'source_success': False, 'source_exception': 'unterminated dollar-quoted string at or near ""$$""\nLINE 2: $$\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""$$"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_in(cstring) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube(float8[], float8[]) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube(float8[]) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_out(cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_eq(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_ne(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_lt(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_gt(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_le(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_ge(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_cmp(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_contains(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_contained(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_overlap(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_union(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_inter(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_size(cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_subset(cube, int4[]) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_distance(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION distance_chebyshev(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION distance_taxicab(cube, cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_dim(cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_ll_coord(cube, int4) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_ur_coord(cube, int4) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_coord(cube, int4) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_coord_llur(cube, int4) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube(float8) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube(float8, float8) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube(cube, float8) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube(cube, float8, float8) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_is_point(cube) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION cube_enlarge(cube, float8, int4) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION g_cube_consistent(internal, cube, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION g_cube_compress(internal) PARALLEL SAFE', 'source_success': False, 'source_exception': 'function g_cube_compress(internal) does not exist\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION g_cube_decompress(internal) PARALLEL SAFE', 'source_success': False, 'source_exception': 'function g_cube_decompress(internal) does not exist\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION g_cube_penalty(internal, internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION g_cube_picksplit(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION g_cube_union(internal, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION g_cube_same(cube, cube, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER FUNCTION g_cube_distance(internal, cube, smallint, oid, internal) PARALLEL SAFE', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""FUNCTION"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
cube--1.2--1.3.sql,postgresql,"[{'query': '/* contrib/cube/cube--1.2--1.3.sql */\n\n-- complain if script is sourced in psql, rather than via ALTER EXTENSION\n\\echo Use ""ALTER EXTENSION cube UPDATE TO \'1.3\'"" to load this file. \\quit\n\nALTER OPERATOR <= (cube, cube) SET (\n\tRESTRICT = scalarlesel, JOIN = scalarlejoinsel\n)', 'source_success': False, 'source_exception': 'syntax error at or near ""\\""\nLINE 4: \\echo Use ""ALTER EXTENSION cube UPDATE TO \'1.3\'"" to load thi...\n        ^\n', 'source_result': None, 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: ""\\""', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'ALTER OPERATOR >= (cube, cube) SET (\n\tRESTRICT = scalargesel, JOIN = scalargejoinsel\n)', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'near ""OPERATOR"": syntax error', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
cube_sci.sql,postgresql,"[{'query': ""---\n--- Testing cube output in scientific notation.  This was put into separate\n--- test, because has platform-depending output.\n---\n\nSELECT '1e27'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '      cube\n0  (1e+27)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '-1e27'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '       cube\n0  (-1e+27)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '1.0e27'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '      cube\n0  (1e+27)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '-1.0e27'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '       cube\n0  (-1e+27)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '1e+27'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '      cube\n0  (1e+27)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '-1e+27'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '       cube\n0  (-1e+27)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '1.0e+27'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '      cube\n0  (1e+27)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '-1.0e+27'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '       cube\n0  (-1e+27)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '1e-7'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '      cube\n0  (1e-07)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '-1e-7'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '       cube\n0  (-1e-07)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '1.0e-7'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '      cube\n0  (1e-07)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '-1.0e-7'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '       cube\n0  (-1e-07)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '1e-300'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '       cube\n0  (1e-300)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '-1e-300'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '        cube\n0  (-1e-300)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '1234567890123456'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '                      cube\n0  (1.234567890123456e+15)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '+1234567890123456'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '                      cube\n0  (1.234567890123456e+15)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}, {'query': ""SELECT '-1234567890123456'::cube AS cube"", 'source_success': True, 'source_exception': '', 'source_result': '                       cube\n0  (-1.234567890123456e+15)', 'source_shape': (1, 1), 'target_dbs': [{'db': 'sqlite', 'success': False, 'result': '', 'error': 'unrecognized token: "":""', 'shape_equal': False, 'columns_equal': False, 'dtypes_equal': False, 'values_equal': False, 'full_match': False, 'shape': None}]}]"
shared3,sqlite,"[{'query': 'PRAGMA auto_vacuum = 2;\nCREATE TABLE t1(x, y);\nINSERT INTO t1 VALUES(randomblob(500), randomblob(500));\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\n', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'postgresql', 'success': False, 'result': '', 'error': 'syntax error at or near ""PRAGMA""\nLINE 1: PRAGMA auto_vacuum = 2;\n        ^\n', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}, {'query': 'BEGIN;\nDELETE FROM t1 WHERE 1;\nPRAGMA incremental_vacuum;\n', 'source_success': True, 'source_exception': '', 'source_result': '', 'source_shape': None, 'target_dbs': [{'db': 'postgresql', 'success': False, 'result': '', 'error': 'syntax error at or near ""PRAGMA""\nLINE 3: PRAGMA incremental_vacuum;\n        ^\n', 'shape_equal': True, 'columns_equal': True, 'dtypes_equal': True, 'values_equal': True, 'full_match': True, 'shape': None}]}]"
