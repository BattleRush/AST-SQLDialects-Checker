[
    {
        "test_name": "00001_select_1.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT 1\n;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   1\n0  1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00005_shard_format_ast_and_remote_table_lambda.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: shard\n\nSELECT count() FROM remote('127.0.0.{2,3}', system, one) WHERE arrayExists((x) -> x = 1, [1, 2, 3])\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 279, e.displayText() = DB::NetException: All connection tries failed. Log: \n\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\n\n, e.what() = DB::NetException\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: remote",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00040_array_enumerate_uniq.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT max(arrayJoin(arr)) FROM (SELECT arrayEnumerateUniq(groupArray(intDiv(number, 54321)) AS nums, groupArray(toString(intDiv(number, 98765)))) AS arr FROM (SELECT number FROM system.numbers LIMIT 1000000) GROUP BY intHash32(number) % 100000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   max(arrayJoin(arr))\n0                    6",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"AS\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT arrayEnumerateUniq([[1], [2], [34], [1]]);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  arrayEnumerateUniq(array([1], [2], [34], [1]))\n0                                   [1, 1, 1, 2]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"]\"",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT arrayEnumerateUniq([(1, 2), (3, 4), (1, 2)]);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  arrayEnumerateUniq(array(tuple(1, 2), tuple(3, 4), tuple(1, 2)))\n0                                                        [1, 1, 2]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: (1, 2), (3, 4), (1, 2)",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00053_all_inner_join.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT a.*, b.* FROM\n(\n    SELECT number AS k FROM system.numbers LIMIT 10\n) AS a\nALL INNER JOIN\n(\n    SELECT intDiv(number, 2) AS k, number AS joined FROM system.numbers LIMIT 10\n) AS b\nUSING k\nORDER BY k, joined;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   k  b.k  joined\n0  0    0       0\n1  0    1       1\n2  1    2       2\n3  1    3       3\n4  2    4       4\n5  2    0       5\n6  3    0       6\n7  3    0       7\n8  4    0       8\n9  4    0       9",
                "source_shape": [
                    10,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ALL\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00067_replicate_segfault.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: replica\n\nSELECT arrayFilter(x -> materialize(0), materialize([0])) AS p, arrayAll(y -> arrayExists(x -> y != x, p), p) AS test;",
                "source_success": true,
                "source_exception": "",
                "source_result": "    p  test\n0  []     1",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: 0",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT arrayFilter(x -> materialize(0), materialize([''])) AS p, arrayAll(y -> arrayExists(x -> y != x, p), p) AS test;",
                "source_success": true,
                "source_exception": "",
                "source_result": "    p  test\n0  []     1",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: ''",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00075_shard_formatting_negate_of_negative_literal.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: shard\n\nSELECT -(-1) FROM remote('127.0.0.{2,3}', system, one)\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 279, e.displayText() = DB::NetException: All connection tries failed. Log: \n\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\n\n, e.what() = DB::NetException\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: remote",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00098_e_union_all.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS data2013;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS data2015;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE data2013 (name String, value UInt32) ENGINE = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE data2015 (data_name String, data_value UInt32) ENGINE = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO data2013(name,value) VALUES('Alice', 1000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2013",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO data2013(name,value) VALUES('Bob', 2000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2013",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO data2013(name,value) VALUES('Carol', 5000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2013",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO data2015(data_name, data_value) VALUES('Foo', 42);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2015",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO data2015(data_name, data_value) VALUES('Bar', 1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2015",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT X FROM (SELECT name AS X FROM data2013 UNION ALL SELECT data_name FROM data2015) ORDER BY X ASC;",
                "source_success": true,
                "source_exception": "",
                "source_result": "       X\n0  Alice\n1    Bar\n2    Bob\n3  Carol\n4    Foo",
                "source_shape": [
                    5,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2015",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE data2013;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2013",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE data2015;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2015",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00098_f_union_all.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS data2013;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS data2015;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE data2013 (name String, value UInt32) ENGINE = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE data2015 (data_name String, data_value UInt32) ENGINE = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO data2013(name,value) VALUES('Alice', 1000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2013",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO data2013(name,value) VALUES('Bob', 2000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2013",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO data2013(name,value) VALUES('Carol', 5000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2013",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO data2015(data_name, data_value) VALUES('Foo', 42);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2015",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO data2015(data_name, data_value) VALUES('Bar', 1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2015",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT name FROM (SELECT name FROM data2013 UNION ALL SELECT data_name AS name FROM data2015) ORDER BY name ASC;",
                "source_success": true,
                "source_exception": "",
                "source_result": "    name\n0  Alice\n1    Bar\n2    Bob\n3  Carol\n4    Foo",
                "source_shape": [
                    5,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2015",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE data2013;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2013",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE data2015;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data2015",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00098_h_union_all.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT X FROM (SELECT 1 AS X, 2 AS Y UNION ALL SELECT * FROM (SELECT 3, 4)) ORDER BY X ASC;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   X\n0  1\n1  3",
                "source_shape": [
                    2,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00124_shard_distributed_with_many_replicas.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: replica, distributed\n\nSET allow_experimental_parallel_reading_from_replicas = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 91 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET max_parallel_replicas = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 33 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS report;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nset allow_deprecated_syntax_for_merge_tree=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 49 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE report(id UInt32, event_date Date, priority UInt32, description String) ENGINE = MergeTree(event_date, intHash32(id), (id, event_date, intHash32(id)), 8192);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO report(id,event_date,priority,description) VALUES (1, '2015-01-01', 1, 'foo')(2, '2015-02-01', 2, 'bar')(3, '2015-03-01', 3, 'foo')(4, '2015-04-01', 4, 'bar')(5, '2015-05-01', 5, 'foo');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM (SELECT id, event_date, priority, description FROM remote('127.0.0.{2|3}', currentDatabase(), report)) ORDER BY id ASC;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 279, e.displayText() = DB::NetException: All connection tries failed. Log: \n\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.3:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.3:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.3:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\n\n, e.what() = DB::NetException\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: remote",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE report;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: report",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00128_group_by_number_and_fixed_string.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT n, k FROM (SELECT number AS n, toFixedString(materialize('   '), 3) AS k FROM system.numbers LIMIT 100000) GROUP BY n, k ORDER BY n DESC, k LIMIT 10;",
                "source_success": true,
                "source_exception": "",
                "source_result": "       n       k\n0  99999  b'   '\n1  99998  b'   '\n2  99997  b'   '\n3  99996  b'   '\n4  99995  b'   '\n5  99994  b'   '\n6  99993  b'   '\n7  99992  b'   '\n8  99991  b'   '\n9  99990  b'   '",
                "source_shape": [
                    10,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.numbers",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00252_shard_global_in_aggregate_function.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: shard\n\nDROP TABLE IF EXISTS storage;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE storage(UserID UInt64) ENGINE=Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO storage(UserID) values (6460432721393873721)(6460432721393873721)(6460432721393873721)(6460432721393873721)(6460432721393873721)(6460432721393873721)(6460432721393873721)(402895971392036118)(402895971392036118)(402895971392036118);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sum(UserID GLOBAL IN (SELECT UserID FROM remote('127.0.0.{2,3}', currentDatabase(), storage))) FROM remote('127.0.0.{2,3}', currentDatabase(), storage);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 279, e.displayText() = DB::NetException: All connection tries failed. Log: \n\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\n\n, e.what() = DB::NetException\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"GLOBAL\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sum(UserID GLOBAL IN (SELECT UserID FROM storage)) FROM remote('127.0.0.{2,3}', currentDatabase(), storage);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 279, e.displayText() = DB::NetException: All connection tries failed. Log: \n\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\nCode: 210, e.displayText() = DB::NetException: Connection refused (127.0.0.2:9000), e.what() = DB::NetException\n\n, e.what() = DB::NetException\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"GLOBAL\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE storage;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: storage",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00254_tuple_extremes.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "drop table if exists numbers_10;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ncreate table numbers_10 (number UInt64) engine = MergeTree order by number;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into numbers_10 select number from system.numbers limit 10;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers_10",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT number, (number, toDate('2015-01-01') + number) FROM numbers_10 LIMIT 10 SETTINGS extremes = 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   number tuple(number, plus(toDate('2015-01-01'), number))\n0       0                                   (0, 2015-01-01)\n1       1                                   (1, 2015-01-02)\n2       2                                   (2, 2015-01-03)\n3       3                                   (3, 2015-01-04)\n4       4                                   (4, 2015-01-05)\n5       5                                   (5, 2015-01-06)\n6       6                                   (6, 2015-01-07)\n7       7                                   (7, 2015-01-08)\n8       8                                   (8, 2015-01-09)\n9       9                                   (9, 2015-01-10)",
                "source_shape": [
                    10,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ndrop table if exists numbers_10;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00273_quantiles.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT quantiles(0.5)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  quantiles(0.5)(x)\n0           [500.0]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT quantilesExact(0.5)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  quantilesExact(0.5)(x)\n0                  [500]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT quantilesTDigest(0.5)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  quantilesTDigest(0.5)(x)\n0                  [500.0]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT quantilesDeterministic(0.5)(x, x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  quantilesDeterministic(0.5)(x, x)\n0                           [500.0]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT arrayMap(a -> round(a, 2), quantilesDD(0.01, 0.5)(x)) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function quantilesDD, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT quantiles(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);",
                "source_success": true,
                "source_exception": "",
                "source_result": "                quantiles(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x)\n0  [0.0, 1.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 950.0, 990.0, 999.0, 1000.0]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT quantilesExact(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  quantilesExact(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x)\n0                           [0, 1, 10, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950, 990, 999, 1000]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT quantilesTDigest(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);",
                "source_success": true,
                "source_exception": "",
                "source_result": "                    quantilesTDigest(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x)\n0  [0.0, 0.50100005, 9.51, 49.55, 99.6, 199.7, 299.8, 399.9, 500.0, 600.1, 700.2, 800.3, 900.4, 950.45, 990.49, 999.499, 1000.0]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT quantilesDeterministic(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x, x) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  quantilesDeterministic(0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x, x)\n0    [0.0, 1.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 950.0, 990.0, 999.0, 1000.0]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT arrayMap(a -> round(a, 2), quantilesDD(0.01, 0, 0.001, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99, 0.999, 1)(x)) FROM (SELECT number AS x FROM system.numbers LIMIT 1001);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function quantilesDD, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- The result slightly differs but it's ok since `quantilesDeterministic` is an approximate function.\nSET max_bytes_before_external_group_by = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 149 (line 5, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT round(1000000 / (number + 1)) AS k, count() AS c, arrayMap(x -> round(x, 6), quantilesDeterministic(0.1, 0.5, 0.9)(number, intHash64(number))) AS q1, quantilesExact(0.1, 0.5, 0.9)(number) AS q2 FROM (SELECT number FROM system.numbers LIMIT 1000000) GROUP BY k ORDER BY k;",
                "source_success": true,
                "source_exception": "",
                "source_result": "              k       c                              q1                        q2\n0           1.0  333334  [699140.3, 835642.0, 967430.8]  [699999, 833333, 966666]\n1           2.0  266666  [426549.5, 536255.5, 638957.6]  [426666, 533333, 639999]\n2           3.0  114286  [296938.5, 342335.0, 388777.5]  [297142, 342857, 388571]\n3           4.0   63492  [228370.2, 254019.5, 279351.4]  [228571, 253968, 279364]\n4           5.0   40404  [185603.4, 202009.0, 218107.0]  [185858, 202020, 218181]\n5           6.0   27972  [156598.6, 167864.0, 179118.4]  [156643, 167832, 179020]\n6           7.0   20513  [135401.0, 143553.5, 151792.5]  [135384, 143589, 151794]\n7           8.0   15686  [119239.2, 125463.0, 131772.4]  [119215, 125490, 131764]\n8           9.0   12384  [106509.8, 111538.0, 116415.8]  [106501, 111455, 116408]\n9          10.0   10025   [96223.6, 100347.0, 104288.6]   [96240, 100250, 104260]\n10         11.0    8282     [87732.7, 91035.0, 94408.6]     [87784, 91097, 94409]\n11         12.0    6956     [80695.5, 83477.5, 86259.5]     [80695, 83478, 86260]\n12         13.0    5926     [74666.5, 77036.5, 79406.5]     [74666, 77037, 79407]\n13         14.0    5109     [69475.8, 71519.0, 73562.2]     [69475, 71519, 73563]\n14         15.0    4449     [64960.8, 66740.0, 68519.2]     [64960, 66740, 68520]\n15         16.0    3910     [60996.9, 62560.5, 64124.1]     [60997, 62561, 64125]\n16         17.0    3464     [57488.3, 58873.5, 60258.7]     [57488, 58874, 60259]\n17         18.0    3088     [54362.7, 55597.5, 56832.3]     [54362, 55598, 56833]\n18         19.0    2772     [51559.1, 52667.5, 53775.9]     [51559, 52668, 53776]\n19         20.0    2502     [49030.1, 50030.5, 51030.9]     [49030, 50031, 51031]\n20         21.0    2269     [46737.8, 47645.0, 48552.2]     [46737, 47645, 48553]\n21         22.0    2067     [44650.6, 45477.0, 46303.4]     [44650, 45477, 46304]\n22         23.0    1891     [42742.0, 43498.0, 44254.0]     [42742, 43498, 44254]\n23         24.0    1737     [40989.6, 41684.0, 42378.4]     [40989, 41684, 42379]\n24         25.0    1601     [39375.0, 40015.0, 40655.0]     [39375, 40015, 40655]\n25         26.0    1480     [37882.9, 38474.5, 39066.1]     [37883, 38475, 39067]\n26         27.0    1372     [36500.1, 37048.5, 37596.9]     [36500, 37049, 37597]\n27         28.0    1276     [35214.5, 35724.5, 36234.5]     [35214, 35725, 36235]\n28         29.0    1189     [34016.8, 34492.0, 34967.2]     [34016, 34492, 34968]\n29         30.0    1112     [32897.1, 33341.5, 33785.9]     [32897, 33342, 33786]\n30         31.0    1040     [31849.9, 32265.5, 32681.1]     [31850, 32266, 32682]\n31         32.0     977     [30866.6, 31257.0, 31647.4]     [30866, 31257, 31648]\n32         33.0     919     [29941.8, 30309.0, 30676.2]     [29941, 30309, 30677]\n33         34.0     865     [29071.4, 29417.0, 29762.6]     [29071, 29417, 29763]\n34         35.0     816     [28250.5, 28576.5, 28902.5]     [28250, 28577, 28903]\n35         36.0     772     [27474.1, 27782.5, 28090.9]     [27474, 27783, 28091]\n36         37.0     731     [26739.0, 27031.0, 27323.0]     [26739, 27031, 27323]\n37         38.0     692     [26043.1, 26319.5, 26595.9]     [26043, 26320, 26596]\n38         39.0     658     [25381.7, 25644.5, 25907.3]     [25381, 25645, 25908]\n39         40.0     625     [24753.4, 25003.0, 25252.6]     [24753, 25003, 25253]\n40         41.0     595     [24155.4, 24393.0, 24630.6]     [24155, 24393, 24631]\n41         42.0     567     [23585.6, 23812.0, 24038.4]     [23585, 23812, 24039]\n42         43.0     541     [23042.0, 23258.0, 23474.0]     [23042, 23258, 23474]\n43         44.0     517     [22522.6, 22729.0, 22935.4]     [22522, 22729, 22936]\n44         45.0     493     [22027.2, 22224.0, 22420.8]     [22027, 22224, 22421]\n45         46.0     473     [21552.2, 21741.0, 21929.8]     [21552, 21741, 21930]\n46         47.0     453     [21097.2, 21278.0, 21458.8]     [21097, 21278, 21459]\n47         48.0     434     [20661.3, 20834.5, 21007.7]     [20661, 20835, 21008]\n48         49.0     416     [20243.5, 20409.5, 20575.5]     [20243, 20410, 20576]\n49         50.0     401     [19841.0, 20001.0, 20161.0]     [19841, 20001, 20161]\n50         51.0     384     [19455.3, 19608.5, 19761.7]     [19455, 19609, 19762]\n51         52.0     370     [19083.9, 19231.5, 19379.1]     [19084, 19232, 19380]\n52         53.0     356     [18726.5, 18868.5, 19010.5]     [18726, 18869, 19011]\n53         54.0     343     [18382.2, 18519.0, 18655.8]     [18382, 18519, 18656]\n54         55.0     330     [18050.9, 18182.5, 18314.1]     [18051, 18183, 18315]\n55         56.0     319     [17730.8, 17858.0, 17985.2]     [17730, 17858, 17986]\n56         57.0     308     [17421.7, 17544.5, 17667.3]     [17421, 17545, 17668]\n57         58.0     297     [17123.6, 17242.0, 17360.4]     [17123, 17242, 17361]\n58         59.0     288     [16834.7, 16949.5, 17064.3]     [16834, 16950, 17065]\n59         60.0     278     [16555.7, 16666.5, 16777.3]     [16555, 16667, 16778]\n60         61.0     268     [16286.7, 16393.5, 16500.3]     [16286, 16394, 16501]\n61         62.0     260     [16025.9, 16129.5, 16233.1]     [16026, 16130, 16234]\n62         63.0     252     [15773.1, 15873.5, 15973.9]     [15773, 15874, 15974]\n63         64.0     245     [15527.4, 15625.0, 15722.6]     [15527, 15625, 15723]\n64         65.0     236     [15290.5, 15384.5, 15478.5]     [15290, 15385, 15479]\n65         66.0     230     [15059.9, 15151.5, 15243.1]     [15060, 15152, 15244]\n66         67.0     223     [14836.2, 14925.0, 15013.8]     [14836, 14925, 15014]\n67         68.0     216     [14619.5, 14705.5, 14791.5]     [14619, 14706, 14792]\n68         69.0     210     [14408.9, 14492.5, 14576.1]     [14409, 14493, 14577]\n69         70.0     204     [14204.3, 14285.5, 14366.7]     [14204, 14286, 14367]\n70         71.0     198     [14005.7, 14084.5, 14163.3]     [14005, 14085, 14164]\n71         72.0     193     [13812.2, 13889.0, 13965.8]     [13812, 13889, 13966]\n72         73.0     188     [13623.7, 13698.5, 13773.3]     [13623, 13699, 13774]\n73         74.0     183     [13440.2, 13513.0, 13585.8]     [13440, 13513, 13586]\n74         75.0     177     [13262.6, 13333.0, 13403.4]     [13262, 13333, 13404]\n75         76.0     174     [13088.3, 13157.5, 13226.7]     [13088, 13158, 13227]\n76         77.0     168     [12919.7, 12986.5, 13053.3]     [12919, 12987, 13054]\n77         78.0     165     [12754.4, 12820.0, 12885.6]     [12754, 12820, 12886]\n78         79.0     160     [12593.9, 12657.5, 12721.1]     [12594, 12658, 12722]\n79         80.0     156     [12437.5, 12499.5, 12561.5]     [12437, 12500, 12562]\n80         81.0     153     [12284.2, 12345.0, 12405.8]     [12284, 12345, 12406]\n81         82.0     148     [12135.7, 12194.5, 12253.3]     [12135, 12195, 12254]\n82         83.0     145     [11990.4, 12048.0, 12105.6]     [11990, 12048, 12106]\n83         84.0     142     [11848.1, 11904.5, 11960.9]     [11848, 11905, 11961]\n84         85.0     139     [11708.8, 11764.0, 11819.2]     [11708, 11764, 11820]\n85         86.0     135     [11573.4, 11627.0, 11680.6]     [11573, 11627, 11681]\n86         87.0     132     [11441.1, 11493.5, 11545.9]     [11441, 11494, 11546]\n87         88.0     129     [11311.8, 11363.0, 11414.2]     [11311, 11363, 11415]\n88         89.0     126     [11185.5, 11235.5, 11285.5]     [11185, 11236, 11286]\n89         90.0     124     [11061.3, 11110.5, 11159.7]     [11061, 11111, 11160]\n90         91.0     121     [10940.0, 10988.0, 11036.0]     [10940, 10988, 11036]\n91         92.0     118     [10821.7, 10868.5, 10915.3]     [10821, 10869, 10916]\n92         93.0     115     [10706.4, 10752.0, 10797.6]     [10706, 10752, 10798]\n93         94.0     113     [10593.2, 10638.0, 10682.8]     [10593, 10638, 10683]\n94         95.0     111     [10482.0, 10526.0, 10570.0]     [10482, 10526, 10570]\n95         96.0     109     [10372.8, 10416.0, 10459.2]     [10372, 10416, 10460]\n96         97.0     106     [10266.5, 10308.5, 10350.5]     [10266, 10309, 10351]\n97         98.0     104     [10162.3, 10203.5, 10244.7]     [10162, 10204, 10245]\n98         99.0     102     [10060.1, 10100.5, 10140.9]     [10060, 10101, 10141]\n99        100.0     100       [9959.9, 9999.5, 10039.1]      [9960, 10000, 10040]\n100       101.0      98        [9861.7, 9900.5, 9939.3]        [9861, 9901, 9940]\n101       102.0      96        [9765.5, 9803.5, 9841.5]        [9765, 9804, 9842]\n102       103.0      95        [9670.4, 9708.0, 9745.6]        [9670, 9708, 9746]\n103       104.0      92        [9578.1, 9614.5, 9650.9]        [9578, 9615, 9651]\n104       105.0      91        [9487.0, 9523.0, 9559.0]        [9487, 9523, 9559]\n105       106.0      89        [9397.8, 9433.0, 9468.2]        [9397, 9433, 9469]\n106       107.0      87        [9310.6, 9345.0, 9379.4]        [9310, 9345, 9380]\n107       108.0      86        [9224.5, 9258.5, 9292.5]        [9224, 9259, 9293]\n108       109.0      84        [9140.3, 9173.5, 9206.7]        [9140, 9174, 9207]\n109       110.0      83        [9057.2, 9090.0, 9122.8]        [9057, 9090, 9123]\n110       111.0      81        [8976.0, 9008.0, 9040.0]        [8976, 9008, 9040]\n111       112.0      80        [8895.9, 8927.5, 8959.1]        [8896, 8928, 8960]\n112       113.0      78        [8817.7, 8848.5, 8879.3]        [8817, 8849, 8880]\n113       114.0      77        [8740.6, 8771.0, 8801.4]        [8740, 8771, 8802]\n114       115.0      75        [8665.4, 8695.0, 8724.6]        [8665, 8695, 8725]\n115       116.0      75        [8590.4, 8620.0, 8649.6]        [8590, 8620, 8650]\n116       117.0      73        [8517.2, 8546.0, 8574.8]        [8517, 8546, 8575]\n117       118.0      72        [8445.1, 8473.5, 8501.9]        [8445, 8474, 8502]\n118       119.0      70        [8374.9, 8402.5, 8430.1]        [8375, 8403, 8431]\n119       120.0      70        [8304.9, 8332.5, 8360.1]        [8305, 8333, 8361]\n120       121.0      68        [8236.7, 8263.5, 8290.3]        [8236, 8264, 8291]\n121       122.0      67        [8169.6, 8196.0, 8222.4]        [8169, 8196, 8223]\n122       123.0      66        [8103.5, 8129.5, 8155.5]        [8103, 8130, 8156]\n123       124.0      65        [8038.4, 8064.0, 8089.6]        [8038, 8064, 8090]\n124       125.0      64        [7974.3, 7999.5, 8024.7]        [7974, 8000, 8025]\n125       126.0      63        [7911.2, 7936.0, 7960.8]        [7911, 7936, 7961]\n126       127.0      62        [7849.1, 7873.5, 7897.9]        [7849, 7874, 7898]\n127       128.0      61        [7788.0, 7812.0, 7836.0]        [7788, 7812, 7836]\n128       129.0      60        [7727.9, 7751.5, 7775.1]        [7728, 7752, 7776]\n129       130.0      60        [7667.9, 7691.5, 7715.1]        [7668, 7692, 7716]\n130       131.0      58        [7609.7, 7632.5, 7655.3]        [7609, 7633, 7656]\n131       132.0      57        [7552.6, 7575.0, 7597.4]        [7552, 7575, 7598]\n132       133.0      57        [7495.6, 7518.0, 7540.4]        [7495, 7518, 7541]\n133       134.0      56        [7439.5, 7461.5, 7483.5]        [7439, 7462, 7484]\n134       135.0      54        [7385.3, 7406.5, 7427.7]        [7385, 7407, 7428]\n135       136.0      54        [7331.3, 7352.5, 7373.7]        [7331, 7353, 7374]\n136       137.0      54        [7277.3, 7298.5, 7319.7]        [7277, 7299, 7320]\n137       138.0      52        [7225.1, 7245.5, 7265.9]        [7225, 7246, 7266]\n138       139.0      52        [7173.1, 7193.5, 7213.9]        [7173, 7194, 7214]\n139       140.0      51        [7122.0, 7142.0, 7162.0]        [7122, 7142, 7162]\n140       141.0      50        [7071.9, 7091.5, 7111.1]        [7072, 7092, 7112]\n141       142.0      50        [7021.9, 7041.5, 7061.1]        [7022, 7042, 7062]\n142       143.0      49        [6972.8, 6992.0, 7011.2]        [6972, 6992, 7012]\n143       144.0      48        [6924.7, 6943.5, 6962.3]        [6924, 6944, 6963]\n144       145.0      48        [6876.7, 6895.5, 6914.3]        [6876, 6896, 6915]\n145       146.0      47        [6829.6, 6848.0, 6866.4]        [6829, 6848, 6867]\n146       147.0      46        [6783.5, 6801.5, 6819.5]        [6783, 6802, 6820]\n147       148.0      45        [6738.4, 6756.0, 6773.6]        [6738, 6756, 6774]\n148       149.0      46        [6692.5, 6710.5, 6728.5]        [6692, 6711, 6729]\n149       150.0      44        [6648.3, 6665.5, 6682.7]        [6648, 6666, 6683]\n150       151.0      44        [6604.3, 6621.5, 6638.7]        [6604, 6622, 6639]\n151       152.0      43        [6561.2, 6578.0, 6594.8]        [6561, 6578, 6595]\n152       153.0      43        [6518.2, 6535.0, 6551.8]        [6518, 6535, 6552]\n153       154.0      42        [6476.1, 6492.5, 6508.9]        [6476, 6493, 6509]\n154       155.0      42        [6434.1, 6450.5, 6466.9]        [6434, 6451, 6467]\n155       156.0      41        [6393.0, 6409.0, 6425.0]        [6393, 6409, 6425]\n156       157.0      40        [6352.9, 6368.5, 6384.1]        [6353, 6369, 6385]\n157       158.0      40        [6312.9, 6328.5, 6344.1]        [6313, 6329, 6345]\n158       159.0      40        [6272.9, 6288.5, 6304.1]        [6273, 6289, 6305]\n159       160.0      39        [6233.8, 6249.0, 6264.2]        [6233, 6249, 6265]\n160       161.0      39        [6194.8, 6210.0, 6225.2]        [6194, 6210, 6226]\n161       162.0      38        [6156.7, 6171.5, 6186.3]        [6156, 6172, 6187]\n162       163.0      37        [6119.6, 6134.0, 6148.4]        [6119, 6134, 6149]\n163       164.0      37        [6082.6, 6097.0, 6111.4]        [6082, 6097, 6112]\n164       165.0      37        [6045.6, 6060.0, 6074.4]        [6045, 6060, 6075]\n165       166.0      36        [6009.5, 6023.5, 6037.5]        [6009, 6024, 6038]\n166       167.0      36        [5973.5, 5987.5, 6001.5]        [5973, 5988, 6002]\n167       168.0      36        [5937.5, 5951.5, 5965.5]        [5937, 5952, 5966]\n168       169.0      35        [5902.4, 5916.0, 5929.6]        [5902, 5916, 5930]\n169       170.0      34        [5868.3, 5881.5, 5894.7]        [5868, 5882, 5895]\n170       171.0      35        [5833.4, 5847.0, 5860.6]        [5833, 5847, 5861]\n171       172.0      33        [5800.2, 5813.0, 5825.8]        [5800, 5813, 5826]\n172       173.0      34        [5766.3, 5779.5, 5792.7]        [5766, 5780, 5793]\n173       174.0      33        [5733.2, 5746.0, 5758.8]        [5733, 5746, 5759]\n174       175.0      32        [5701.1, 5713.5, 5725.9]        [5701, 5714, 5726]\n175       176.0      33        [5668.2, 5681.0, 5693.8]        [5668, 5681, 5694]\n176       177.0      32        [5636.1, 5648.5, 5660.9]        [5636, 5649, 5661]\n177       178.0      31        [5605.0, 5617.0, 5629.0]        [5605, 5617, 5629]\n178       179.0      31        [5574.0, 5586.0, 5598.0]        [5574, 5586, 5598]\n179       180.0      31        [5543.0, 5555.0, 5567.0]        [5543, 5555, 5567]\n180       181.0      31        [5512.0, 5524.0, 5536.0]        [5512, 5524, 5536]\n181       182.0      30        [5481.9, 5493.5, 5505.1]        [5482, 5494, 5506]\n182       183.0      30        [5451.9, 5463.5, 5475.1]        [5452, 5464, 5476]\n183       184.0      29        [5422.8, 5434.0, 5445.2]        [5422, 5434, 5446]\n184       185.0      30        [5392.9, 5404.5, 5416.1]        [5393, 5405, 5417]\n185       186.0      29        [5363.8, 5375.0, 5386.2]        [5363, 5375, 5387]\n186       187.0      28        [5335.7, 5346.5, 5357.3]        [5335, 5347, 5358]\n187       188.0      28        [5307.7, 5318.5, 5329.3]        [5307, 5319, 5330]\n188       189.0      28        [5279.7, 5290.5, 5301.3]        [5279, 5291, 5302]\n189       190.0      28        [5251.7, 5262.5, 5273.3]        [5251, 5263, 5274]\n190       191.0      28        [5223.7, 5234.5, 5245.3]        [5223, 5235, 5246]\n191       192.0      27        [5196.6, 5207.0, 5217.4]        [5196, 5207, 5218]\n192       193.0      27        [5169.6, 5180.0, 5190.4]        [5169, 5180, 5191]\n193       194.0      26        [5143.5, 5153.5, 5163.5]        [5143, 5154, 5164]\n194       195.0      26        [5117.5, 5127.5, 5137.5]        [5117, 5128, 5138]\n195       196.0      26        [5091.5, 5101.5, 5111.5]        [5091, 5102, 5112]\n196       197.0      26        [5065.5, 5075.5, 5085.5]        [5065, 5076, 5086]\n197       198.0      26        [5039.5, 5049.5, 5059.5]        [5039, 5050, 5060]\n198       199.0      25        [5014.4, 5024.0, 5033.6]        [5014, 5024, 5034]\n199       200.0      25        [4989.4, 4999.0, 5008.6]        [4989, 4999, 5009]\n200       201.0      25        [4964.4, 4974.0, 4983.6]        [4964, 4974, 4984]\n201       202.0      24        [4940.3, 4949.5, 4958.7]        [4940, 4950, 4959]\n202       203.0      24        [4916.3, 4925.5, 4934.7]        [4916, 4926, 4935]\n203       204.0      25        [4891.4, 4901.0, 4910.6]        [4891, 4901, 4911]\n204       205.0      23        [4868.2, 4877.0, 4885.8]        [4868, 4877, 4886]\n205       206.0      24        [4844.3, 4853.5, 4862.7]        [4844, 4854, 4863]\n206       207.0      23        [4821.2, 4830.0, 4838.8]        [4821, 4830, 4839]\n207       208.0      23        [4798.2, 4807.0, 4815.8]        [4798, 4807, 4816]\n208       209.0      23        [4775.2, 4784.0, 4792.8]        [4775, 4784, 4793]\n209       210.0      23        [4752.2, 4761.0, 4769.8]        [4752, 4761, 4770]\n210       211.0      22        [4730.1, 4738.5, 4746.9]        [4730, 4739, 4747]\n211       212.0      23        [4707.2, 4716.0, 4724.8]        [4707, 4716, 4725]\n212       213.0      22        [4685.1, 4693.5, 4701.9]        [4685, 4694, 4702]\n213       214.0      21        [4664.0, 4672.0, 4680.0]        [4664, 4672, 4680]\n214       215.0      22        [4642.1, 4650.5, 4658.9]        [4642, 4651, 4659]\n215       216.0      22        [4620.1, 4628.5, 4636.9]        [4620, 4629, 4637]\n216       217.0      21        [4599.0, 4607.0, 4615.0]        [4599, 4607, 4615]\n217       218.0      21        [4578.0, 4586.0, 4594.0]        [4578, 4586, 4594]\n218       219.0      21        [4557.0, 4565.0, 4573.0]        [4557, 4565, 4573]\n219       220.0      20        [4536.9, 4544.5, 4552.1]        [4537, 4545, 4553]\n220       221.0      21        [4516.0, 4524.0, 4532.0]        [4516, 4524, 4532]\n221       222.0      20        [4495.9, 4503.5, 4511.1]        [4496, 4504, 4512]\n222       223.0      20        [4475.9, 4483.5, 4491.1]        [4476, 4484, 4492]\n223       224.0      20        [4455.9, 4463.5, 4471.1]        [4456, 4464, 4472]\n224       225.0      20        [4435.9, 4443.5, 4451.1]        [4436, 4444, 4452]\n225       226.0      19        [4416.8, 4424.0, 4431.2]        [4416, 4424, 4432]\n226       227.0      20        [4396.9, 4404.5, 4412.1]        [4397, 4405, 4413]\n227       228.0      19        [4377.8, 4385.0, 4392.2]        [4377, 4385, 4393]\n228       229.0      19        [4358.8, 4366.0, 4373.2]        [4358, 4366, 4374]\n229       230.0      19        [4339.8, 4347.0, 4354.2]        [4339, 4347, 4355]\n230       231.0      19        [4320.8, 4328.0, 4335.2]        [4320, 4328, 4336]\n231       232.0      18        [4302.7, 4309.5, 4316.3]        [4302, 4310, 4317]\n232       233.0      19        [4283.8, 4291.0, 4298.2]        [4283, 4291, 4299]\n233       234.0      18        [4265.7, 4272.5, 4279.3]        [4265, 4273, 4280]\n234       235.0      18        [4247.7, 4254.5, 4261.3]        [4247, 4255, 4262]\n235       236.0      18        [4229.7, 4236.5, 4243.3]        [4229, 4237, 4244]\n236       237.0      18        [4211.7, 4218.5, 4225.3]        [4211, 4219, 4226]\n237       238.0      18        [4193.7, 4200.5, 4207.3]        [4193, 4201, 4208]\n238       239.0      17        [4176.6, 4183.0, 4189.4]        [4176, 4183, 4190]\n239       240.0      17        [4159.6, 4166.0, 4172.4]        [4159, 4166, 4173]\n240       241.0      18        [4141.7, 4148.5, 4155.3]        [4141, 4149, 4156]\n241       242.0      17        [4124.6, 4131.0, 4137.4]        [4124, 4131, 4138]\n242       243.0      17        [4107.6, 4114.0, 4120.4]        [4107, 4114, 4121]\n243       244.0      17        [4090.6, 4097.0, 4103.4]        [4090, 4097, 4104]\n244       245.0      16        [4074.5, 4080.5, 4086.5]        [4074, 4081, 4087]\n245       246.0      17        [4057.6, 4064.0, 4070.4]        [4057, 4064, 4071]\n246       247.0      16        [4041.5, 4047.5, 4053.5]        [4041, 4048, 4054]\n247       248.0      16        [4025.5, 4031.5, 4037.5]        [4025, 4032, 4038]\n248       249.0      16        [4009.5, 4015.5, 4021.5]        [4009, 4016, 4022]\n249       250.0      16        [3993.5, 3999.5, 4005.5]        [3993, 4000, 4006]\n250       251.0      16        [3977.5, 3983.5, 3989.5]        [3977, 3984, 3990]\n251       252.0      16        [3961.5, 3967.5, 3973.5]        [3961, 3968, 3974]\n252       253.0      16        [3945.5, 3951.5, 3957.5]        [3945, 3952, 3958]\n253       254.0      15        [3930.4, 3936.0, 3941.6]        [3930, 3936, 3942]\n254       255.0      16        [3914.5, 3920.5, 3926.5]        [3914, 3921, 3927]\n255       256.0      15        [3899.4, 3905.0, 3910.6]        [3899, 3905, 3911]\n256       257.0      15        [3884.4, 3890.0, 3895.6]        [3884, 3890, 3896]\n257       258.0      15        [3869.4, 3875.0, 3880.6]        [3869, 3875, 3881]\n258       259.0      15        [3854.4, 3860.0, 3865.6]        [3854, 3860, 3866]\n259       260.0      15        [3839.4, 3845.0, 3850.6]        [3839, 3845, 3851]\n260       261.0      14        [3825.3, 3830.5, 3835.7]        [3825, 3831, 3836]\n261       262.0      15        [3810.4, 3816.0, 3821.6]        [3810, 3816, 3822]\n262       263.0      14        [3796.3, 3801.5, 3806.7]        [3796, 3802, 3807]\n263       264.0      15        [3781.4, 3787.0, 3792.6]        [3781, 3787, 3793]\n264       265.0      14        [3767.3, 3772.5, 3777.7]        [3767, 3773, 3778]\n265       266.0      14        [3753.3, 3758.5, 3763.7]        [3753, 3759, 3764]\n266       267.0      14        [3739.3, 3744.5, 3749.7]        [3739, 3745, 3750]\n267       268.0      14        [3725.3, 3730.5, 3735.7]        [3725, 3731, 3736]\n268       269.0      14        [3711.3, 3716.5, 3721.7]        [3711, 3717, 3722]\n269       270.0      14        [3697.3, 3702.5, 3707.7]        [3697, 3703, 3708]\n270       271.0      13        [3684.2, 3689.0, 3693.8]        [3684, 3689, 3694]\n271       272.0      14        [3670.3, 3675.5, 3680.7]        [3670, 3676, 3681]\n272       273.0      13        [3657.2, 3662.0, 3666.8]        [3657, 3662, 3667]\n273       274.0      14        [3643.3, 3648.5, 3653.7]        [3643, 3649, 3654]\n274       275.0      13        [3630.2, 3635.0, 3639.8]        [3630, 3635, 3640]\n275       276.0      13        [3617.2, 3622.0, 3626.8]        [3617, 3622, 3627]\n276       277.0      13        [3604.2, 3609.0, 3613.8]        [3604, 3609, 3614]\n277       278.0      13        [3591.2, 3596.0, 3600.8]        [3591, 3596, 3601]\n278       279.0      13        [3578.2, 3583.0, 3587.8]        [3578, 3583, 3588]\n279       280.0      12        [3566.1, 3570.5, 3574.9]        [3566, 3571, 3575]\n280       281.0      13        [3553.2, 3558.0, 3562.8]        [3553, 3558, 3563]\n281       282.0      13        [3540.2, 3545.0, 3549.8]        [3540, 3545, 3550]\n282       283.0      12        [3528.1, 3532.5, 3536.9]        [3528, 3533, 3537]\n283       284.0      13        [3515.2, 3520.0, 3524.8]        [3515, 3520, 3525]\n284       285.0      12        [3503.1, 3507.5, 3511.9]        [3503, 3508, 3512]\n285       286.0      12        [3491.1, 3495.5, 3499.9]        [3491, 3496, 3500]\n286       287.0      12        [3479.1, 3483.5, 3487.9]        [3479, 3484, 3488]\n287       288.0      12        [3467.1, 3471.5, 3475.9]        [3467, 3472, 3476]\n288       289.0      12        [3455.1, 3459.5, 3463.9]        [3455, 3460, 3464]\n289       290.0      12        [3443.1, 3447.5, 3451.9]        [3443, 3448, 3452]\n290       291.0      12        [3431.1, 3435.5, 3439.9]        [3431, 3436, 3440]\n291       292.0      12        [3419.1, 3423.5, 3427.9]        [3419, 3424, 3428]\n292       293.0      11        [3408.0, 3412.0, 3416.0]        [3408, 3412, 3416]\n293       294.0      12        [3396.1, 3400.5, 3404.9]        [3396, 3401, 3405]\n294       295.0      11        [3385.0, 3389.0, 3393.0]        [3385, 3389, 3393]\n295       296.0      12        [3373.1, 3377.5, 3381.9]        [3373, 3378, 3382]\n296       297.0      11        [3362.0, 3366.0, 3370.0]        [3362, 3366, 3370]\n297       298.0      11        [3351.0, 3355.0, 3359.0]        [3351, 3355, 3359]\n298       299.0      12        [3339.1, 3343.5, 3347.9]        [3339, 3344, 3348]\n299       300.0      11        [3328.0, 3332.0, 3336.0]        [3328, 3332, 3336]\n300       301.0      11        [3317.0, 3321.0, 3325.0]        [3317, 3321, 3325]\n301       302.0      11        [3306.0, 3310.0, 3314.0]        [3306, 3310, 3314]\n302       303.0      11        [3295.0, 3299.0, 3303.0]        [3295, 3299, 3303]\n303       304.0      10        [3284.9, 3288.5, 3292.1]        [3285, 3289, 3293]\n304       305.0      11        [3274.0, 3278.0, 3282.0]        [3274, 3278, 3282]\n305       306.0      11        [3263.0, 3267.0, 3271.0]        [3263, 3267, 3271]\n306       307.0      10        [3252.9, 3256.5, 3260.1]        [3253, 3257, 3261]\n307       308.0      11        [3242.0, 3246.0, 3250.0]        [3242, 3246, 3250]\n308       309.0      10        [3231.9, 3235.5, 3239.1]        [3232, 3236, 3240]\n309       310.0      11        [3221.0, 3225.0, 3229.0]        [3221, 3225, 3229]\n310       311.0      10        [3210.9, 3214.5, 3218.1]        [3211, 3215, 3219]\n311       312.0      10        [3200.9, 3204.5, 3208.1]        [3201, 3205, 3209]\n312       313.0      11        [3190.0, 3194.0, 3198.0]        [3190, 3194, 3198]\n313       314.0      10        [3179.9, 3183.5, 3187.1]        [3180, 3184, 3188]\n314       315.0      10        [3169.9, 3173.5, 3177.1]        [3170, 3174, 3178]\n315       316.0      10        [3159.9, 3163.5, 3167.1]        [3160, 3164, 3168]\n316       317.0      10        [3149.9, 3153.5, 3157.1]        [3150, 3154, 3158]\n317       318.0      10        [3139.9, 3143.5, 3147.1]        [3140, 3144, 3148]\n318       319.0      10        [3129.9, 3133.5, 3137.1]        [3130, 3134, 3138]\n319       320.0       9        [3120.8, 3124.0, 3127.2]        [3120, 3124, 3128]\n320       321.0      10        [3110.9, 3114.5, 3118.1]        [3111, 3115, 3119]\n321       322.0      10        [3100.9, 3104.5, 3108.1]        [3101, 3105, 3109]\n322       323.0       9        [3091.8, 3095.0, 3098.2]        [3091, 3095, 3099]\n323       324.0      10        [3081.9, 3085.5, 3089.1]        [3082, 3086, 3090]\n324       325.0       9        [3072.8, 3076.0, 3079.2]        [3072, 3076, 3080]\n325       326.0      10        [3062.9, 3066.5, 3070.1]        [3063, 3067, 3071]\n326       327.0       9        [3053.8, 3057.0, 3060.2]        [3053, 3057, 3061]\n327       328.0       9        [3044.8, 3048.0, 3051.2]        [3044, 3048, 3052]\n328       329.0      10        [3034.9, 3038.5, 3042.1]        [3035, 3039, 3043]\n329       330.0       9        [3025.8, 3029.0, 3032.2]        [3025, 3029, 3033]\n330       331.0       9        [3016.8, 3020.0, 3023.2]        [3016, 3020, 3024]\n331       332.0       9        [3007.8, 3011.0, 3014.2]        [3007, 3011, 3015]\n332       333.0       9        [2998.8, 3002.0, 3005.2]        [2998, 3002, 3006]\n333       334.0       9        [2989.8, 2993.0, 2996.2]        [2989, 2993, 2997]\n334       335.0       9        [2980.8, 2984.0, 2987.2]        [2980, 2984, 2988]\n335       336.0       9        [2971.8, 2975.0, 2978.2]        [2971, 2975, 2979]\n336       337.0       9        [2962.8, 2966.0, 2969.2]        [2962, 2966, 2970]\n337       338.0       8        [2954.7, 2957.5, 2960.3]        [2954, 2958, 2961]\n338       339.0       9        [2945.8, 2949.0, 2952.2]        [2945, 2949, 2953]\n339       340.0       9        [2936.8, 2940.0, 2943.2]        [2936, 2940, 2944]\n340       341.0       8        [2928.7, 2931.5, 2934.3]        [2928, 2932, 2935]\n341       342.0       9        [2919.8, 2923.0, 2926.2]        [2919, 2923, 2927]\n342       343.0       8        [2911.7, 2914.5, 2917.3]        [2911, 2915, 2918]\n343       344.0       9        [2902.8, 2906.0, 2909.2]        [2902, 2906, 2910]\n344       345.0       8        [2894.7, 2897.5, 2900.3]        [2894, 2898, 2901]\n345       346.0       8        [2886.7, 2889.5, 2892.3]        [2886, 2890, 2893]\n346       347.0       9        [2877.8, 2881.0, 2884.2]        [2877, 2881, 2885]\n347       348.0       8        [2869.7, 2872.5, 2875.3]        [2869, 2873, 2876]\n348       349.0       8        [2861.7, 2864.5, 2867.3]        [2861, 2865, 2868]\n349       350.0       8        [2853.7, 2856.5, 2859.3]        [2853, 2857, 2860]\n350       351.0       9        [2844.8, 2848.0, 2851.2]        [2844, 2848, 2852]\n351       352.0       8        [2836.7, 2839.5, 2842.3]        [2836, 2840, 2843]\n352       353.0       8        [2828.7, 2831.5, 2834.3]        [2828, 2832, 2835]\n353       354.0       8        [2820.7, 2823.5, 2826.3]        [2820, 2824, 2827]\n354       355.0       8        [2812.7, 2815.5, 2818.3]        [2812, 2816, 2819]\n355       356.0       7        [2805.6, 2808.0, 2810.4]        [2805, 2808, 2811]\n356       357.0       8        [2797.7, 2800.5, 2803.3]        [2797, 2801, 2804]\n357       358.0       8        [2789.7, 2792.5, 2795.3]        [2789, 2793, 2796]\n358       359.0       8        [2781.7, 2784.5, 2787.3]        [2781, 2785, 2788]\n359       360.0       8        [2773.7, 2776.5, 2779.3]        [2773, 2777, 2780]\n360       361.0       7        [2766.6, 2769.0, 2771.4]        [2766, 2769, 2772]\n361       362.0       8        [2758.7, 2761.5, 2764.3]        [2758, 2762, 2765]\n362       363.0       7        [2751.6, 2754.0, 2756.4]        [2751, 2754, 2757]\n363       364.0       8        [2743.7, 2746.5, 2749.3]        [2743, 2747, 2750]\n364       365.0       8        [2735.7, 2738.5, 2741.3]        [2735, 2739, 2742]\n365       366.0       7        [2728.6, 2731.0, 2733.4]        [2728, 2731, 2734]\n366       367.0       7        [2721.6, 2724.0, 2726.4]        [2721, 2724, 2727]\n367       368.0       8        [2713.7, 2716.5, 2719.3]        [2713, 2717, 2720]\n368       369.0       7        [2706.6, 2709.0, 2711.4]        [2706, 2709, 2712]\n369       370.0       7        [2699.6, 2702.0, 2704.4]        [2699, 2702, 2705]\n370       371.0       8        [2691.7, 2694.5, 2697.3]        [2691, 2695, 2698]\n371       372.0       7        [2684.6, 2687.0, 2689.4]        [2684, 2687, 2690]\n372       373.0       7        [2677.6, 2680.0, 2682.4]        [2677, 2680, 2683]\n373       374.0       7        [2670.6, 2673.0, 2675.4]        [2670, 2673, 2676]\n374       375.0       7        [2663.6, 2666.0, 2668.4]        [2663, 2666, 2669]\n375       376.0       7        [2656.6, 2659.0, 2661.4]        [2656, 2659, 2662]\n376       377.0       7        [2649.6, 2652.0, 2654.4]        [2649, 2652, 2655]\n377       378.0       7        [2642.6, 2645.0, 2647.4]        [2642, 2645, 2648]\n378       379.0       7        [2635.6, 2638.0, 2640.4]        [2635, 2638, 2641]\n379       380.0       7        [2628.6, 2631.0, 2633.4]        [2628, 2631, 2634]\n380       381.0       7        [2621.6, 2624.0, 2626.4]        [2621, 2624, 2627]\n381       382.0       7        [2614.6, 2617.0, 2619.4]        [2614, 2617, 2620]\n382       383.0       7        [2607.6, 2610.0, 2612.4]        [2607, 2610, 2613]\n383       384.0       7        [2600.6, 2603.0, 2605.4]        [2600, 2603, 2606]\n384       385.0       6        [2594.5, 2596.5, 2598.5]        [2594, 2597, 2599]\n385       386.0       7        [2587.6, 2590.0, 2592.4]        [2587, 2590, 2593]\n386       387.0       7        [2580.6, 2583.0, 2585.4]        [2580, 2583, 2586]\n387       388.0       6        [2574.5, 2576.5, 2578.5]        [2574, 2577, 2579]\n388       389.0       7        [2567.6, 2570.0, 2572.4]        [2567, 2570, 2573]\n389       390.0       7        [2560.6, 2563.0, 2565.4]        [2560, 2563, 2566]\n390       391.0       6        [2554.5, 2556.5, 2558.5]        [2554, 2557, 2559]\n391       392.0       7        [2547.6, 2550.0, 2552.4]        [2547, 2550, 2553]\n392       393.0       6        [2541.5, 2543.5, 2545.5]        [2541, 2544, 2546]\n393       394.0       7        [2534.6, 2537.0, 2539.4]        [2534, 2537, 2540]\n394       395.0       6        [2528.5, 2530.5, 2532.5]        [2528, 2531, 2533]\n395       396.0       6        [2522.5, 2524.5, 2526.5]        [2522, 2525, 2527]\n396       397.0       7        [2515.6, 2518.0, 2520.4]        [2515, 2518, 2521]\n397       398.0       6        [2509.5, 2511.5, 2513.5]        [2509, 2512, 2514]\n398       399.0       6        [2503.5, 2505.5, 2507.5]        [2503, 2506, 2508]\n399       400.0       7        [2496.6, 2499.0, 2501.4]        [2496, 2499, 2502]\n400       401.0       6        [2490.5, 2492.5, 2494.5]        [2490, 2493, 2495]\n401       402.0       6        [2484.5, 2486.5, 2488.5]        [2484, 2487, 2489]\n402       403.0       6        [2478.5, 2480.5, 2482.5]        [2478, 2481, 2483]\n403       404.0       6        [2472.5, 2474.5, 2476.5]        [2472, 2475, 2477]\n404       405.0       6        [2466.5, 2468.5, 2470.5]        [2466, 2469, 2471]\n405       406.0       6        [2460.5, 2462.5, 2464.5]        [2460, 2463, 2465]\n406       407.0       7        [2453.6, 2456.0, 2458.4]        [2453, 2456, 2459]\n407       408.0       6        [2447.5, 2449.5, 2451.5]        [2447, 2450, 2452]\n408       409.0       5        [2442.4, 2444.0, 2445.6]        [2442, 2444, 2446]\n409       410.0       6        [2436.5, 2438.5, 2440.5]        [2436, 2439, 2441]\n410       411.0       6        [2430.5, 2432.5, 2434.5]        [2430, 2433, 2435]\n411       412.0       6        [2424.5, 2426.5, 2428.5]        [2424, 2427, 2429]\n412       413.0       6        [2418.5, 2420.5, 2422.5]        [2418, 2421, 2423]\n413       414.0       6        [2412.5, 2414.5, 2416.5]        [2412, 2415, 2417]\n414       415.0       6        [2406.5, 2408.5, 2410.5]        [2406, 2409, 2411]\n415       416.0       6        [2400.5, 2402.5, 2404.5]        [2400, 2403, 2405]\n416       417.0       5        [2395.4, 2397.0, 2398.6]        [2395, 2397, 2399]\n417       418.0       6        [2389.5, 2391.5, 2393.5]        [2389, 2392, 2394]\n418       419.0       6        [2383.5, 2385.5, 2387.5]        [2383, 2386, 2388]\n419       420.0       5        [2378.4, 2380.0, 2381.6]        [2378, 2380, 2382]\n420       421.0       6        [2372.5, 2374.5, 2376.5]        [2372, 2375, 2377]\n421       422.0       6        [2366.5, 2368.5, 2370.5]        [2366, 2369, 2371]\n422       423.0       5        [2361.4, 2363.0, 2364.6]        [2361, 2363, 2365]\n423       424.0       6        [2355.5, 2357.5, 2359.5]        [2355, 2358, 2360]\n424       425.0       5        [2350.4, 2352.0, 2353.6]        [2350, 2352, 2354]\n425       426.0       6        [2344.5, 2346.5, 2348.5]        [2344, 2347, 2349]\n426       427.0       5        [2339.4, 2341.0, 2342.6]        [2339, 2341, 2343]\n427       428.0       6        [2333.5, 2335.5, 2337.5]        [2333, 2336, 2338]\n428       429.0       5        [2328.4, 2330.0, 2331.6]        [2328, 2330, 2332]\n429       430.0       6        [2322.5, 2324.5, 2326.5]        [2322, 2325, 2327]\n430       431.0       5        [2317.4, 2319.0, 2320.6]        [2317, 2319, 2321]\n431       432.0       5        [2312.4, 2314.0, 2315.6]        [2312, 2314, 2316]\n432       433.0       6        [2306.5, 2308.5, 2310.5]        [2306, 2309, 2311]\n433       434.0       5        [2301.4, 2303.0, 2304.6]        [2301, 2303, 2305]\n434       435.0       5        [2296.4, 2298.0, 2299.6]        [2296, 2298, 2300]\n435       436.0       6        [2290.5, 2292.5, 2294.5]        [2290, 2293, 2295]\n436       437.0       5        [2285.4, 2287.0, 2288.6]        [2285, 2287, 2289]\n437       438.0       5        [2280.4, 2282.0, 2283.6]        [2280, 2282, 2284]\n438       439.0       5        [2275.4, 2277.0, 2278.6]        [2275, 2277, 2279]\n439       440.0       5        [2270.4, 2272.0, 2273.6]        [2270, 2272, 2274]\n440       441.0       5        [2265.4, 2267.0, 2268.6]        [2265, 2267, 2269]\n441       442.0       6        [2259.5, 2261.5, 2263.5]        [2259, 2262, 2264]\n442       443.0       5        [2254.4, 2256.0, 2257.6]        [2254, 2256, 2258]\n443       444.0       5        [2249.4, 2251.0, 2252.6]        [2249, 2251, 2253]\n444       445.0       5        [2244.4, 2246.0, 2247.6]        [2244, 2246, 2248]\n445       446.0       5        [2239.4, 2241.0, 2242.6]        [2239, 2241, 2243]\n446       447.0       5        [2234.4, 2236.0, 2237.6]        [2234, 2236, 2238]\n447       448.0       5        [2229.4, 2231.0, 2232.6]        [2229, 2231, 2233]\n448       449.0       5        [2224.4, 2226.0, 2227.6]        [2224, 2226, 2228]\n449       450.0       5        [2219.4, 2221.0, 2222.6]        [2219, 2221, 2223]\n450       451.0       5        [2214.4, 2216.0, 2217.6]        [2214, 2216, 2218]\n451       452.0       5        [2209.4, 2211.0, 2212.6]        [2209, 2211, 2213]\n452       453.0       4        [2205.3, 2206.5, 2207.7]        [2205, 2207, 2208]\n453       454.0       5        [2200.4, 2202.0, 2203.6]        [2200, 2202, 2204]\n454       455.0       5        [2195.4, 2197.0, 2198.6]        [2195, 2197, 2199]\n455       456.0       5        [2190.4, 2192.0, 2193.6]        [2190, 2192, 2194]\n456       457.0       5        [2185.4, 2187.0, 2188.6]        [2185, 2187, 2189]\n457       458.0       4        [2181.3, 2182.5, 2183.7]        [2181, 2183, 2184]\n458       459.0       5        [2176.4, 2178.0, 2179.6]        [2176, 2178, 2180]\n459       460.0       5        [2171.4, 2173.0, 2174.6]        [2171, 2173, 2175]\n460       461.0       5        [2166.4, 2168.0, 2169.6]        [2166, 2168, 2170]\n461       462.0       4        [2162.3, 2163.5, 2164.7]        [2162, 2164, 2165]\n462       463.0       5        [2157.4, 2159.0, 2160.6]        [2157, 2159, 2161]\n463       464.0       5        [2152.4, 2154.0, 2155.6]        [2152, 2154, 2156]\n464       465.0       4        [2148.3, 2149.5, 2150.7]        [2148, 2150, 2151]\n465       466.0       5        [2143.4, 2145.0, 2146.6]        [2143, 2145, 2147]\n466       467.0       4        [2139.3, 2140.5, 2141.7]        [2139, 2141, 2142]\n467       468.0       5        [2134.4, 2136.0, 2137.6]        [2134, 2136, 2138]\n468       469.0       5        [2129.4, 2131.0, 2132.6]        [2129, 2131, 2133]\n469       470.0       4        [2125.3, 2126.5, 2127.7]        [2125, 2127, 2128]\n470       471.0       5        [2120.4, 2122.0, 2123.6]        [2120, 2122, 2124]\n471       472.0       4        [2116.3, 2117.5, 2118.7]        [2116, 2118, 2119]\n472       473.0       5        [2111.4, 2113.0, 2114.6]        [2111, 2113, 2115]\n473       474.0       4        [2107.3, 2108.5, 2109.7]        [2107, 2109, 2110]\n474       475.0       4        [2103.3, 2104.5, 2105.7]        [2103, 2105, 2106]\n475       476.0       5        [2098.4, 2100.0, 2101.6]        [2098, 2100, 2102]\n476       477.0       4        [2094.3, 2095.5, 2096.7]        [2094, 2096, 2097]\n477       478.0       5        [2089.4, 2091.0, 2092.6]        [2089, 2091, 2093]\n478       479.0       4        [2085.3, 2086.5, 2087.7]        [2085, 2087, 2088]\n479       480.0       4        [2081.3, 2082.5, 2083.7]        [2081, 2083, 2084]\n480       481.0       5        [2076.4, 2078.0, 2079.6]        [2076, 2078, 2080]\n481       482.0       4        [2072.3, 2073.5, 2074.7]        [2072, 2074, 2075]\n482       483.0       4        [2068.3, 2069.5, 2070.7]        [2068, 2070, 2071]\n483       484.0       5        [2063.4, 2065.0, 2066.6]        [2063, 2065, 2067]\n484       485.0       4        [2059.3, 2060.5, 2061.7]        [2059, 2061, 2062]\n485       486.0       4        [2055.3, 2056.5, 2057.7]        [2055, 2057, 2058]\n486       487.0       4        [2051.3, 2052.5, 2053.7]        [2051, 2053, 2054]\n487       488.0       4        [2047.3, 2048.5, 2049.7]        [2047, 2049, 2050]\n488       489.0       5        [2042.4, 2044.0, 2045.6]        [2042, 2044, 2046]\n489       490.0       4        [2038.3, 2039.5, 2040.7]        [2038, 2040, 2041]\n490       491.0       4        [2034.3, 2035.5, 2036.7]        [2034, 2036, 2037]\n491       492.0       4        [2030.3, 2031.5, 2032.7]        [2030, 2032, 2033]\n492       493.0       4        [2026.3, 2027.5, 2028.7]        [2026, 2028, 2029]\n493       494.0       4        [2022.3, 2023.5, 2024.7]        [2022, 2024, 2025]\n494       495.0       4        [2018.3, 2019.5, 2020.7]        [2018, 2020, 2021]\n495       496.0       4        [2014.3, 2015.5, 2016.7]        [2014, 2016, 2017]\n496       497.0       4        [2010.3, 2011.5, 2012.7]        [2010, 2012, 2013]\n497       498.0       4        [2006.3, 2007.5, 2008.7]        [2006, 2008, 2009]\n498       499.0       4        [2002.3, 2003.5, 2004.7]        [2002, 2004, 2005]\n499       500.0       4        [1998.3, 1999.5, 2000.7]        [1998, 2000, 2001]\n500       501.0       4        [1994.3, 1995.5, 1996.7]        [1994, 1996, 1997]\n501       502.0       4        [1990.3, 1991.5, 1992.7]        [1990, 1992, 1993]\n502       503.0       4        [1986.3, 1987.5, 1988.7]        [1986, 1988, 1989]\n503       504.0       4        [1982.3, 1983.5, 1984.7]        [1982, 1984, 1985]\n504       505.0       4        [1978.3, 1979.5, 1980.7]        [1978, 1980, 1981]\n505       506.0       4        [1974.3, 1975.5, 1976.7]        [1974, 1976, 1977]\n506       507.0       4        [1970.3, 1971.5, 1972.7]        [1970, 1972, 1973]\n507       508.0       4        [1966.3, 1967.5, 1968.7]        [1966, 1968, 1969]\n508       509.0       4        [1962.3, 1963.5, 1964.7]        [1962, 1964, 1965]\n509       510.0       4        [1958.3, 1959.5, 1960.7]        [1958, 1960, 1961]\n510       511.0       3        [1955.2, 1956.0, 1956.8]        [1955, 1956, 1957]\n511       512.0       4        [1951.3, 1952.5, 1953.7]        [1951, 1953, 1954]\n512       513.0       4        [1947.3, 1948.5, 1949.7]        [1947, 1949, 1950]\n513       514.0       4        [1943.3, 1944.5, 1945.7]        [1943, 1945, 1946]\n514       515.0       4        [1939.3, 1940.5, 1941.7]        [1939, 1941, 1942]\n515       516.0       3        [1936.2, 1937.0, 1937.8]        [1936, 1937, 1938]\n516       517.0       4        [1932.3, 1933.5, 1934.7]        [1932, 1934, 1935]\n517       518.0       4        [1928.3, 1929.5, 1930.7]        [1928, 1930, 1931]\n518       519.0       4        [1924.3, 1925.5, 1926.7]        [1924, 1926, 1927]\n519       520.0       3        [1921.2, 1922.0, 1922.8]        [1921, 1922, 1923]\n520       521.0       4        [1917.3, 1918.5, 1919.7]        [1917, 1919, 1920]\n521       522.0       4        [1913.3, 1914.5, 1915.7]        [1913, 1915, 1916]\n522       523.0       3        [1910.2, 1911.0, 1911.8]        [1910, 1911, 1912]\n523       524.0       4        [1906.3, 1907.5, 1908.7]        [1906, 1908, 1909]\n524       525.0       4        [1902.3, 1903.5, 1904.7]        [1902, 1904, 1905]\n525       526.0       3        [1899.2, 1900.0, 1900.8]        [1899, 1900, 1901]\n526       527.0       4        [1895.3, 1896.5, 1897.7]        [1895, 1897, 1898]\n527       528.0       3        [1892.2, 1893.0, 1893.8]        [1892, 1893, 1894]\n528       529.0       4        [1888.3, 1889.5, 1890.7]        [1888, 1890, 1891]\n529       530.0       3        [1885.2, 1886.0, 1886.8]        [1885, 1886, 1887]\n530       531.0       4        [1881.3, 1882.5, 1883.7]        [1881, 1883, 1884]\n531       532.0       4        [1877.3, 1878.5, 1879.7]        [1877, 1879, 1880]\n532       533.0       3        [1874.2, 1875.0, 1875.8]        [1874, 1875, 1876]\n533       534.0       4        [1870.3, 1871.5, 1872.7]        [1870, 1872, 1873]\n534       535.0       3        [1867.2, 1868.0, 1868.8]        [1867, 1868, 1869]\n535       536.0       4        [1863.3, 1864.5, 1865.7]        [1863, 1865, 1866]\n536       537.0       3        [1860.2, 1861.0, 1861.8]        [1860, 1861, 1862]\n537       538.0       3        [1857.2, 1858.0, 1858.8]        [1857, 1858, 1859]\n538       539.0       4        [1853.3, 1854.5, 1855.7]        [1853, 1855, 1856]\n539       540.0       3        [1850.2, 1851.0, 1851.8]        [1850, 1851, 1852]\n540       541.0       4        [1846.3, 1847.5, 1848.7]        [1846, 1848, 1849]\n541       542.0       3        [1843.2, 1844.0, 1844.8]        [1843, 1844, 1845]\n542       543.0       4        [1839.3, 1840.5, 1841.7]        [1839, 1841, 1842]\n543       544.0       3        [1836.2, 1837.0, 1837.8]        [1836, 1837, 1838]\n544       545.0       3        [1833.2, 1834.0, 1834.8]        [1833, 1834, 1835]\n545       546.0       4        [1829.3, 1830.5, 1831.7]        [1829, 1831, 1832]\n546       547.0       3        [1826.2, 1827.0, 1827.8]        [1826, 1827, 1828]\n547       548.0       3        [1823.2, 1824.0, 1824.8]        [1823, 1824, 1825]\n548       549.0       4        [1819.3, 1820.5, 1821.7]        [1819, 1821, 1822]\n549       550.0       3        [1816.2, 1817.0, 1817.8]        [1816, 1817, 1818]\n550       551.0       3        [1813.2, 1814.0, 1814.8]        [1813, 1814, 1815]\n551       552.0       4        [1809.3, 1810.5, 1811.7]        [1809, 1811, 1812]\n552       553.0       3        [1806.2, 1807.0, 1807.8]        [1806, 1807, 1808]\n553       554.0       3        [1803.2, 1804.0, 1804.8]        [1803, 1804, 1805]\n554       555.0       3        [1800.2, 1801.0, 1801.8]        [1800, 1801, 1802]\n555       556.0       4        [1796.3, 1797.5, 1798.7]        [1796, 1798, 1799]\n556       557.0       3        [1793.2, 1794.0, 1794.8]        [1793, 1794, 1795]\n557       558.0       3        [1790.2, 1791.0, 1791.8]        [1790, 1791, 1792]\n558       559.0       3        [1787.2, 1788.0, 1788.8]        [1787, 1788, 1789]\n559       560.0       3        [1784.2, 1785.0, 1785.8]        [1784, 1785, 1786]\n560       561.0       4        [1780.3, 1781.5, 1782.7]        [1780, 1782, 1783]\n561       562.0       3        [1777.2, 1778.0, 1778.8]        [1777, 1778, 1779]\n562       563.0       3        [1774.2, 1775.0, 1775.8]        [1774, 1775, 1776]\n563       564.0       3        [1771.2, 1772.0, 1772.8]        [1771, 1772, 1773]\n564       565.0       3        [1768.2, 1769.0, 1769.8]        [1768, 1769, 1770]\n565       566.0       3        [1765.2, 1766.0, 1766.8]        [1765, 1766, 1767]\n566       567.0       3        [1762.2, 1763.0, 1763.8]        [1762, 1763, 1764]\n567       568.0       3        [1759.2, 1760.0, 1760.8]        [1759, 1760, 1761]\n568       569.0       4        [1755.3, 1756.5, 1757.7]        [1755, 1757, 1758]\n569       570.0       3        [1752.2, 1753.0, 1753.8]        [1752, 1753, 1754]\n570       571.0       3        [1749.2, 1750.0, 1750.8]        [1749, 1750, 1751]\n571       572.0       3        [1746.2, 1747.0, 1747.8]        [1746, 1747, 1748]\n572       573.0       3        [1743.2, 1744.0, 1744.8]        [1743, 1744, 1745]\n573       574.0       3        [1740.2, 1741.0, 1741.8]        [1740, 1741, 1742]\n574       575.0       3        [1737.2, 1738.0, 1738.8]        [1737, 1738, 1739]\n575       576.0       3        [1734.2, 1735.0, 1735.8]        [1734, 1735, 1736]\n576       577.0       3        [1731.2, 1732.0, 1732.8]        [1731, 1732, 1733]\n577       578.0       3        [1728.2, 1729.0, 1729.8]        [1728, 1729, 1730]\n578       579.0       3        [1725.2, 1726.0, 1726.8]        [1725, 1726, 1727]\n579       580.0       3        [1722.2, 1723.0, 1723.8]        [1722, 1723, 1724]\n580       581.0       3        [1719.2, 1720.0, 1720.8]        [1719, 1720, 1721]\n581       582.0       3        [1716.2, 1717.0, 1717.8]        [1716, 1717, 1718]\n582       583.0       3        [1713.2, 1714.0, 1714.8]        [1713, 1714, 1715]\n583       584.0       3        [1710.2, 1711.0, 1711.8]        [1710, 1711, 1712]\n584       585.0       3        [1707.2, 1708.0, 1708.8]        [1707, 1708, 1709]\n585       586.0       2        [1705.1, 1705.5, 1705.9]        [1705, 1706, 1706]\n586       587.0       3        [1702.2, 1703.0, 1703.8]        [1702, 1703, 1704]\n587       588.0       3        [1699.2, 1700.0, 1700.8]        [1699, 1700, 1701]\n588       589.0       3        [1696.2, 1697.0, 1697.8]        [1696, 1697, 1698]\n589       590.0       3        [1693.2, 1694.0, 1694.8]        [1693, 1694, 1695]\n590       591.0       3        [1690.2, 1691.0, 1691.8]        [1690, 1691, 1692]\n591       592.0       3        [1687.2, 1688.0, 1688.8]        [1687, 1688, 1689]\n592       593.0       3        [1684.2, 1685.0, 1685.8]        [1684, 1685, 1686]\n593       594.0       2        [1682.1, 1682.5, 1682.9]        [1682, 1683, 1683]\n594       595.0       3        [1679.2, 1680.0, 1680.8]        [1679, 1680, 1681]\n595       596.0       3        [1676.2, 1677.0, 1677.8]        [1676, 1677, 1678]\n596       597.0       3        [1673.2, 1674.0, 1674.8]        [1673, 1674, 1675]\n597       598.0       3        [1670.2, 1671.0, 1671.8]        [1670, 1671, 1672]\n598       599.0       2        [1668.1, 1668.5, 1668.9]        [1668, 1669, 1669]\n599       600.0       3        [1665.2, 1666.0, 1666.8]        [1665, 1666, 1667]\n600       601.0       3        [1662.2, 1663.0, 1663.8]        [1662, 1663, 1664]\n601       602.0       3        [1659.2, 1660.0, 1660.8]        [1659, 1660, 1661]\n602       603.0       2        [1657.1, 1657.5, 1657.9]        [1657, 1658, 1658]\n603       604.0       3        [1654.2, 1655.0, 1655.8]        [1654, 1655, 1656]\n604       605.0       3        [1651.2, 1652.0, 1652.8]        [1651, 1652, 1653]\n605       606.0       3        [1648.2, 1649.0, 1649.8]        [1648, 1649, 1650]\n606       607.0       2        [1646.1, 1646.5, 1646.9]        [1646, 1647, 1647]\n607       608.0       3        [1643.2, 1644.0, 1644.8]        [1643, 1644, 1645]\n608       609.0       3        [1640.2, 1641.0, 1641.8]        [1640, 1641, 1642]\n609       610.0       2        [1638.1, 1638.5, 1638.9]        [1638, 1639, 1639]\n610       611.0       3        [1635.2, 1636.0, 1636.8]        [1635, 1636, 1637]\n611       612.0       3        [1632.2, 1633.0, 1633.8]        [1632, 1633, 1634]\n612       613.0       3        [1629.2, 1630.0, 1630.8]        [1629, 1630, 1631]\n613       614.0       2        [1627.1, 1627.5, 1627.9]        [1627, 1628, 1628]\n614       615.0       3        [1624.2, 1625.0, 1625.8]        [1624, 1625, 1626]\n615       616.0       2        [1622.1, 1622.5, 1622.9]        [1622, 1623, 1623]\n616       617.0       3        [1619.2, 1620.0, 1620.8]        [1619, 1620, 1621]\n617       618.0       3        [1616.2, 1617.0, 1617.8]        [1616, 1617, 1618]\n618       619.0       2        [1614.1, 1614.5, 1614.9]        [1614, 1615, 1615]\n619       620.0       3        [1611.2, 1612.0, 1612.8]        [1611, 1612, 1613]\n620       621.0       2        [1609.1, 1609.5, 1609.9]        [1609, 1610, 1610]\n621       622.0       3        [1606.2, 1607.0, 1607.8]        [1606, 1607, 1608]\n622       623.0       3        [1603.2, 1604.0, 1604.8]        [1603, 1604, 1605]\n623       624.0       2        [1601.1, 1601.5, 1601.9]        [1601, 1602, 1602]\n624       625.0       3        [1598.2, 1599.0, 1599.8]        [1598, 1599, 1600]\n625       626.0       2        [1596.1, 1596.5, 1596.9]        [1596, 1597, 1597]\n626       627.0       3        [1593.2, 1594.0, 1594.8]        [1593, 1594, 1595]\n627       628.0       2        [1591.1, 1591.5, 1591.9]        [1591, 1592, 1592]\n628       629.0       3        [1588.2, 1589.0, 1589.8]        [1588, 1589, 1590]\n629       630.0       2        [1586.1, 1586.5, 1586.9]        [1586, 1587, 1587]\n630       631.0       3        [1583.2, 1584.0, 1584.8]        [1583, 1584, 1585]\n631       632.0       2        [1581.1, 1581.5, 1581.9]        [1581, 1582, 1582]\n632       633.0       3        [1578.2, 1579.0, 1579.8]        [1578, 1579, 1580]\n633       634.0       2        [1576.1, 1576.5, 1576.9]        [1576, 1577, 1577]\n634       635.0       3        [1573.2, 1574.0, 1574.8]        [1573, 1574, 1575]\n635       636.0       2        [1571.1, 1571.5, 1571.9]        [1571, 1572, 1572]\n636       637.0       3        [1568.2, 1569.0, 1569.8]        [1568, 1569, 1570]\n637       638.0       2        [1566.1, 1566.5, 1566.9]        [1566, 1567, 1567]\n638       639.0       3        [1563.2, 1564.0, 1564.8]        [1563, 1564, 1565]\n639       640.0       2        [1561.1, 1561.5, 1561.9]        [1561, 1562, 1562]\n640       641.0       3        [1558.2, 1559.0, 1559.8]        [1558, 1559, 1560]\n641       642.0       2        [1556.1, 1556.5, 1556.9]        [1556, 1557, 1557]\n642       643.0       2        [1554.1, 1554.5, 1554.9]        [1554, 1555, 1555]\n643       644.0       3        [1551.2, 1552.0, 1552.8]        [1551, 1552, 1553]\n644       645.0       2        [1549.1, 1549.5, 1549.9]        [1549, 1550, 1550]\n645       646.0       3        [1546.2, 1547.0, 1547.8]        [1546, 1547, 1548]\n646       647.0       2        [1544.1, 1544.5, 1544.9]        [1544, 1545, 1545]\n647       648.0       2        [1542.1, 1542.5, 1542.9]        [1542, 1543, 1543]\n648       649.0       3        [1539.2, 1540.0, 1540.8]        [1539, 1540, 1541]\n649       650.0       2        [1537.1, 1537.5, 1537.9]        [1537, 1538, 1538]\n650       651.0       3        [1534.2, 1535.0, 1535.8]        [1534, 1535, 1536]\n651       652.0       2        [1532.1, 1532.5, 1532.9]        [1532, 1533, 1533]\n652       653.0       2        [1530.1, 1530.5, 1530.9]        [1530, 1531, 1531]\n653       654.0       3        [1527.2, 1528.0, 1528.8]        [1527, 1528, 1529]\n654       655.0       2        [1525.1, 1525.5, 1525.9]        [1525, 1526, 1526]\n655       656.0       2        [1523.1, 1523.5, 1523.9]        [1523, 1524, 1524]\n656       657.0       3        [1520.2, 1521.0, 1521.8]        [1520, 1521, 1522]\n657       658.0       2        [1518.1, 1518.5, 1518.9]        [1518, 1519, 1519]\n658       659.0       2        [1516.1, 1516.5, 1516.9]        [1516, 1517, 1517]\n659       660.0       2        [1514.1, 1514.5, 1514.9]        [1514, 1515, 1515]\n660       661.0       3        [1511.2, 1512.0, 1512.8]        [1511, 1512, 1513]\n661       662.0       2        [1509.1, 1509.5, 1509.9]        [1509, 1510, 1510]\n662       663.0       2        [1507.1, 1507.5, 1507.9]        [1507, 1508, 1508]\n663       664.0       3        [1504.2, 1505.0, 1505.8]        [1504, 1505, 1506]\n664       665.0       2        [1502.1, 1502.5, 1502.9]        [1502, 1503, 1503]\n665       666.0       2        [1500.1, 1500.5, 1500.9]        [1500, 1501, 1501]\n666       667.0       2        [1498.1, 1498.5, 1498.9]        [1498, 1499, 1499]\n667       668.0       3        [1495.2, 1496.0, 1496.8]        [1495, 1496, 1497]\n668       669.0       2        [1493.1, 1493.5, 1493.9]        [1493, 1494, 1494]\n669       670.0       2        [1491.1, 1491.5, 1491.9]        [1491, 1492, 1492]\n670       671.0       2        [1489.1, 1489.5, 1489.9]        [1489, 1490, 1490]\n671       672.0       3        [1486.2, 1487.0, 1487.8]        [1486, 1487, 1488]\n672       673.0       2        [1484.1, 1484.5, 1484.9]        [1484, 1485, 1485]\n673       674.0       2        [1482.1, 1482.5, 1482.9]        [1482, 1483, 1483]\n674       675.0       2        [1480.1, 1480.5, 1480.9]        [1480, 1481, 1481]\n675       676.0       2        [1478.1, 1478.5, 1478.9]        [1478, 1479, 1479]\n676       677.0       2        [1476.1, 1476.5, 1476.9]        [1476, 1477, 1477]\n677       678.0       3        [1473.2, 1474.0, 1474.8]        [1473, 1474, 1475]\n678       679.0       2        [1471.1, 1471.5, 1471.9]        [1471, 1472, 1472]\n679       680.0       2        [1469.1, 1469.5, 1469.9]        [1469, 1470, 1470]\n680       681.0       2        [1467.1, 1467.5, 1467.9]        [1467, 1468, 1468]\n681       682.0       2        [1465.1, 1465.5, 1465.9]        [1465, 1466, 1466]\n682       683.0       2        [1463.1, 1463.5, 1463.9]        [1463, 1464, 1464]\n683       684.0       3        [1460.2, 1461.0, 1461.8]        [1460, 1461, 1462]\n684       685.0       2        [1458.1, 1458.5, 1458.9]        [1458, 1459, 1459]\n685       686.0       2        [1456.1, 1456.5, 1456.9]        [1456, 1457, 1457]\n686       687.0       2        [1454.1, 1454.5, 1454.9]        [1454, 1455, 1455]\n687       688.0       2        [1452.1, 1452.5, 1452.9]        [1452, 1453, 1453]\n688       689.0       2        [1450.1, 1450.5, 1450.9]        [1450, 1451, 1451]\n689       690.0       2        [1448.1, 1448.5, 1448.9]        [1448, 1449, 1449]\n690       691.0       2        [1446.1, 1446.5, 1446.9]        [1446, 1447, 1447]\n691       692.0       2        [1444.1, 1444.5, 1444.9]        [1444, 1445, 1445]\n692       693.0       3        [1441.2, 1442.0, 1442.8]        [1441, 1442, 1443]\n693       694.0       2        [1439.1, 1439.5, 1439.9]        [1439, 1440, 1440]\n694       695.0       2        [1437.1, 1437.5, 1437.9]        [1437, 1438, 1438]\n695       696.0       2        [1435.1, 1435.5, 1435.9]        [1435, 1436, 1436]\n696       697.0       2        [1433.1, 1433.5, 1433.9]        [1433, 1434, 1434]\n697       698.0       2        [1431.1, 1431.5, 1431.9]        [1431, 1432, 1432]\n698       699.0       2        [1429.1, 1429.5, 1429.9]        [1429, 1430, 1430]\n699       700.0       2        [1427.1, 1427.5, 1427.9]        [1427, 1428, 1428]\n700       701.0       2        [1425.1, 1425.5, 1425.9]        [1425, 1426, 1426]\n701       702.0       2        [1423.1, 1423.5, 1423.9]        [1423, 1424, 1424]\n702       703.0       2        [1421.1, 1421.5, 1421.9]        [1421, 1422, 1422]\n703       704.0       2        [1419.1, 1419.5, 1419.9]        [1419, 1420, 1420]\n704       705.0       2        [1417.1, 1417.5, 1417.9]        [1417, 1418, 1418]\n705       706.0       2        [1415.1, 1415.5, 1415.9]        [1415, 1416, 1416]\n706       707.0       2        [1413.1, 1413.5, 1413.9]        [1413, 1414, 1414]\n707       708.0       2        [1411.1, 1411.5, 1411.9]        [1411, 1412, 1412]\n708       709.0       2        [1409.1, 1409.5, 1409.9]        [1409, 1410, 1410]\n709       710.0       2        [1407.1, 1407.5, 1407.9]        [1407, 1408, 1408]\n710       711.0       2        [1405.1, 1405.5, 1405.9]        [1405, 1406, 1406]\n711       712.0       2        [1403.1, 1403.5, 1403.9]        [1403, 1404, 1404]\n712       713.0       2        [1401.1, 1401.5, 1401.9]        [1401, 1402, 1402]\n713       714.0       2        [1399.1, 1399.5, 1399.9]        [1399, 1400, 1400]\n714       715.0       2        [1397.1, 1397.5, 1397.9]        [1397, 1398, 1398]\n715       716.0       2        [1395.1, 1395.5, 1395.9]        [1395, 1396, 1396]\n716       717.0       2        [1393.1, 1393.5, 1393.9]        [1393, 1394, 1394]\n717       718.0       2        [1391.1, 1391.5, 1391.9]        [1391, 1392, 1392]\n718       719.0       2        [1389.1, 1389.5, 1389.9]        [1389, 1390, 1390]\n719       720.0       2        [1387.1, 1387.5, 1387.9]        [1387, 1388, 1388]\n720       721.0       1        [1386.0, 1386.0, 1386.0]        [1386, 1386, 1386]\n721       722.0       2        [1384.1, 1384.5, 1384.9]        [1384, 1385, 1385]\n722       723.0       2        [1382.1, 1382.5, 1382.9]        [1382, 1383, 1383]\n723       724.0       2        [1380.1, 1380.5, 1380.9]        [1380, 1381, 1381]\n724       725.0       2        [1378.1, 1378.5, 1378.9]        [1378, 1379, 1379]\n725       726.0       2        [1376.1, 1376.5, 1376.9]        [1376, 1377, 1377]\n726       727.0       2        [1374.1, 1374.5, 1374.9]        [1374, 1375, 1375]\n727       728.0       2        [1372.1, 1372.5, 1372.9]        [1372, 1373, 1373]\n728       729.0       2        [1370.1, 1370.5, 1370.9]        [1370, 1371, 1371]\n729       730.0       2        [1368.1, 1368.5, 1368.9]        [1368, 1369, 1369]\n730       731.0       1        [1367.0, 1367.0, 1367.0]        [1367, 1367, 1367]\n731       732.0       2        [1365.1, 1365.5, 1365.9]        [1365, 1366, 1366]\n732       733.0       2        [1363.1, 1363.5, 1363.9]        [1363, 1364, 1364]\n733       734.0       2        [1361.1, 1361.5, 1361.9]        [1361, 1362, 1362]\n734       735.0       2        [1359.1, 1359.5, 1359.9]        [1359, 1360, 1360]\n735       736.0       2        [1357.1, 1357.5, 1357.9]        [1357, 1358, 1358]\n736       737.0       2        [1355.1, 1355.5, 1355.9]        [1355, 1356, 1356]\n737       738.0       1        [1354.0, 1354.0, 1354.0]        [1354, 1354, 1354]\n738       739.0       2        [1352.1, 1352.5, 1352.9]        [1352, 1353, 1353]\n739       740.0       2        [1350.1, 1350.5, 1350.9]        [1350, 1351, 1351]\n740       741.0       2        [1348.1, 1348.5, 1348.9]        [1348, 1349, 1349]\n741       742.0       2        [1346.1, 1346.5, 1346.9]        [1346, 1347, 1347]\n742       743.0       2        [1344.1, 1344.5, 1344.9]        [1344, 1345, 1345]\n743       744.0       1        [1343.0, 1343.0, 1343.0]        [1343, 1343, 1343]\n744       745.0       2        [1341.1, 1341.5, 1341.9]        [1341, 1342, 1342]\n745       746.0       2        [1339.1, 1339.5, 1339.9]        [1339, 1340, 1340]\n746       747.0       2        [1337.1, 1337.5, 1337.9]        [1337, 1338, 1338]\n747       748.0       1        [1336.0, 1336.0, 1336.0]        [1336, 1336, 1336]\n748       749.0       2        [1334.1, 1334.5, 1334.9]        [1334, 1335, 1335]\n749       750.0       2        [1332.1, 1332.5, 1332.9]        [1332, 1333, 1333]\n750       751.0       2        [1330.1, 1330.5, 1330.9]        [1330, 1331, 1331]\n751       752.0       2        [1328.1, 1328.5, 1328.9]        [1328, 1329, 1329]\n752       753.0       1        [1327.0, 1327.0, 1327.0]        [1327, 1327, 1327]\n753       754.0       2        [1325.1, 1325.5, 1325.9]        [1325, 1326, 1326]\n754       755.0       2        [1323.1, 1323.5, 1323.9]        [1323, 1324, 1324]\n755       756.0       2        [1321.1, 1321.5, 1321.9]        [1321, 1322, 1322]\n756       757.0       1        [1320.0, 1320.0, 1320.0]        [1320, 1320, 1320]\n757       758.0       2        [1318.1, 1318.5, 1318.9]        [1318, 1319, 1319]\n758       759.0       2        [1316.1, 1316.5, 1316.9]        [1316, 1317, 1317]\n759       760.0       2        [1314.1, 1314.5, 1314.9]        [1314, 1315, 1315]\n760       761.0       1        [1313.0, 1313.0, 1313.0]        [1313, 1313, 1313]\n761       762.0       2        [1311.1, 1311.5, 1311.9]        [1311, 1312, 1312]\n762       763.0       2        [1309.1, 1309.5, 1309.9]        [1309, 1310, 1310]\n763       764.0       1        [1308.0, 1308.0, 1308.0]        [1308, 1308, 1308]\n764       765.0       2        [1306.1, 1306.5, 1306.9]        [1306, 1307, 1307]\n765       766.0       2        [1304.1, 1304.5, 1304.9]        [1304, 1305, 1305]\n766       767.0       2        [1302.1, 1302.5, 1302.9]        [1302, 1303, 1303]\n767       768.0       1        [1301.0, 1301.0, 1301.0]        [1301, 1301, 1301]\n768       769.0       2        [1299.1, 1299.5, 1299.9]        [1299, 1300, 1300]\n769       770.0       2        [1297.1, 1297.5, 1297.9]        [1297, 1298, 1298]\n770       771.0       1        [1296.0, 1296.0, 1296.0]        [1296, 1296, 1296]\n771       772.0       2        [1294.1, 1294.5, 1294.9]        [1294, 1295, 1295]\n772       773.0       2        [1292.1, 1292.5, 1292.9]        [1292, 1293, 1293]\n773       774.0       1        [1291.0, 1291.0, 1291.0]        [1291, 1291, 1291]\n774       775.0       2        [1289.1, 1289.5, 1289.9]        [1289, 1290, 1290]\n775       776.0       2        [1287.1, 1287.5, 1287.9]        [1287, 1288, 1288]\n776       777.0       1        [1286.0, 1286.0, 1286.0]        [1286, 1286, 1286]\n777       778.0       2        [1284.1, 1284.5, 1284.9]        [1284, 1285, 1285]\n778       779.0       2        [1282.1, 1282.5, 1282.9]        [1282, 1283, 1283]\n779       780.0       1        [1281.0, 1281.0, 1281.0]        [1281, 1281, 1281]\n780       781.0       2        [1279.1, 1279.5, 1279.9]        [1279, 1280, 1280]\n781       782.0       2        [1277.1, 1277.5, 1277.9]        [1277, 1278, 1278]\n782       783.0       1        [1276.0, 1276.0, 1276.0]        [1276, 1276, 1276]\n783       784.0       2        [1274.1, 1274.5, 1274.9]        [1274, 1275, 1275]\n784       785.0       1        [1273.0, 1273.0, 1273.0]        [1273, 1273, 1273]\n785       786.0       2        [1271.1, 1271.5, 1271.9]        [1271, 1272, 1272]\n786       787.0       2        [1269.1, 1269.5, 1269.9]        [1269, 1270, 1270]\n787       788.0       1        [1268.0, 1268.0, 1268.0]        [1268, 1268, 1268]\n788       789.0       2        [1266.1, 1266.5, 1266.9]        [1266, 1267, 1267]\n789       790.0       1        [1265.0, 1265.0, 1265.0]        [1265, 1265, 1265]\n790       791.0       2        [1263.1, 1263.5, 1263.9]        [1263, 1264, 1264]\n791       792.0       2        [1261.1, 1261.5, 1261.9]        [1261, 1262, 1262]\n792       793.0       1        [1260.0, 1260.0, 1260.0]        [1260, 1260, 1260]\n793       794.0       2        [1258.1, 1258.5, 1258.9]        [1258, 1259, 1259]\n794       795.0       1        [1257.0, 1257.0, 1257.0]        [1257, 1257, 1257]\n795       796.0       2        [1255.1, 1255.5, 1255.9]        [1255, 1256, 1256]\n796       797.0       2        [1253.1, 1253.5, 1253.9]        [1253, 1254, 1254]\n797       798.0       1        [1252.0, 1252.0, 1252.0]        [1252, 1252, 1252]\n798       799.0       2        [1250.1, 1250.5, 1250.9]        [1250, 1251, 1251]\n799       800.0       1        [1249.0, 1249.0, 1249.0]        [1249, 1249, 1249]\n800       801.0       2        [1247.1, 1247.5, 1247.9]        [1247, 1248, 1248]\n801       802.0       1        [1246.0, 1246.0, 1246.0]        [1246, 1246, 1246]\n802       803.0       2        [1244.1, 1244.5, 1244.9]        [1244, 1245, 1245]\n803       804.0       1        [1243.0, 1243.0, 1243.0]        [1243, 1243, 1243]\n804       805.0       2        [1241.1, 1241.5, 1241.9]        [1241, 1242, 1242]\n805       806.0       2        [1239.1, 1239.5, 1239.9]        [1239, 1240, 1240]\n806       807.0       1        [1238.0, 1238.0, 1238.0]        [1238, 1238, 1238]\n807       808.0       2        [1236.1, 1236.5, 1236.9]        [1236, 1237, 1237]\n808       809.0       1        [1235.0, 1235.0, 1235.0]        [1235, 1235, 1235]\n809       810.0       2        [1233.1, 1233.5, 1233.9]        [1233, 1234, 1234]\n810       811.0       1        [1232.0, 1232.0, 1232.0]        [1232, 1232, 1232]\n811       812.0       2        [1230.1, 1230.5, 1230.9]        [1230, 1231, 1231]\n812       813.0       1        [1229.0, 1229.0, 1229.0]        [1229, 1229, 1229]\n813       814.0       2        [1227.1, 1227.5, 1227.9]        [1227, 1228, 1228]\n814       815.0       1        [1226.0, 1226.0, 1226.0]        [1226, 1226, 1226]\n815       816.0       2        [1224.1, 1224.5, 1224.9]        [1224, 1225, 1225]\n816       817.0       1        [1223.0, 1223.0, 1223.0]        [1223, 1223, 1223]\n817       818.0       2        [1221.1, 1221.5, 1221.9]        [1221, 1222, 1222]\n818       819.0       1        [1220.0, 1220.0, 1220.0]        [1220, 1220, 1220]\n819       820.0       2        [1218.1, 1218.5, 1218.9]        [1218, 1219, 1219]\n820       821.0       1        [1217.0, 1217.0, 1217.0]        [1217, 1217, 1217]\n821       822.0       2        [1215.1, 1215.5, 1215.9]        [1215, 1216, 1216]\n822       823.0       1        [1214.0, 1214.0, 1214.0]        [1214, 1214, 1214]\n823       824.0       2        [1212.1, 1212.5, 1212.9]        [1212, 1213, 1213]\n824       825.0       1        [1211.0, 1211.0, 1211.0]        [1211, 1211, 1211]\n825       826.0       2        [1209.1, 1209.5, 1209.9]        [1209, 1210, 1210]\n826       827.0       1        [1208.0, 1208.0, 1208.0]        [1208, 1208, 1208]\n827       828.0       1        [1207.0, 1207.0, 1207.0]        [1207, 1207, 1207]\n828       829.0       2        [1205.1, 1205.5, 1205.9]        [1205, 1206, 1206]\n829       830.0       1        [1204.0, 1204.0, 1204.0]        [1204, 1204, 1204]\n830       831.0       2        [1202.1, 1202.5, 1202.9]        [1202, 1203, 1203]\n831       832.0       1        [1201.0, 1201.0, 1201.0]        [1201, 1201, 1201]\n832       833.0       2        [1199.1, 1199.5, 1199.9]        [1199, 1200, 1200]\n833       834.0       1        [1198.0, 1198.0, 1198.0]        [1198, 1198, 1198]\n834       835.0       2        [1196.1, 1196.5, 1196.9]        [1196, 1197, 1197]\n835       836.0       1        [1195.0, 1195.0, 1195.0]        [1195, 1195, 1195]\n836       837.0       1        [1194.0, 1194.0, 1194.0]        [1194, 1194, 1194]\n837       838.0       2        [1192.1, 1192.5, 1192.9]        [1192, 1193, 1193]\n838       839.0       1        [1191.0, 1191.0, 1191.0]        [1191, 1191, 1191]\n839       840.0       2        [1189.1, 1189.5, 1189.9]        [1189, 1190, 1190]\n840       841.0       1        [1188.0, 1188.0, 1188.0]        [1188, 1188, 1188]\n841       842.0       2        [1186.1, 1186.5, 1186.9]        [1186, 1187, 1187]\n842       843.0       1        [1185.0, 1185.0, 1185.0]        [1185, 1185, 1185]\n843       844.0       1        [1184.0, 1184.0, 1184.0]        [1184, 1184, 1184]\n844       845.0       2        [1182.1, 1182.5, 1182.9]        [1182, 1183, 1183]\n845       846.0       1        [1181.0, 1181.0, 1181.0]        [1181, 1181, 1181]\n846       847.0       2        [1179.1, 1179.5, 1179.9]        [1179, 1180, 1180]\n847       848.0       1        [1178.0, 1178.0, 1178.0]        [1178, 1178, 1178]\n848       849.0       1        [1177.0, 1177.0, 1177.0]        [1177, 1177, 1177]\n849       850.0       2        [1175.1, 1175.5, 1175.9]        [1175, 1176, 1176]\n850       851.0       1        [1174.0, 1174.0, 1174.0]        [1174, 1174, 1174]\n851       852.0       1        [1173.0, 1173.0, 1173.0]        [1173, 1173, 1173]\n852       853.0       2        [1171.1, 1171.5, 1171.9]        [1171, 1172, 1172]\n853       854.0       1        [1170.0, 1170.0, 1170.0]        [1170, 1170, 1170]\n854       855.0       2        [1168.1, 1168.5, 1168.9]        [1168, 1169, 1169]\n855       856.0       1        [1167.0, 1167.0, 1167.0]        [1167, 1167, 1167]\n856       857.0       1        [1166.0, 1166.0, 1166.0]        [1166, 1166, 1166]\n857       858.0       2        [1164.1, 1164.5, 1164.9]        [1164, 1165, 1165]\n858       859.0       1        [1163.0, 1163.0, 1163.0]        [1163, 1163, 1163]\n859       860.0       1        [1162.0, 1162.0, 1162.0]        [1162, 1162, 1162]\n860       861.0       2        [1160.1, 1160.5, 1160.9]        [1160, 1161, 1161]\n861       862.0       1        [1159.0, 1159.0, 1159.0]        [1159, 1159, 1159]\n862       863.0       1        [1158.0, 1158.0, 1158.0]        [1158, 1158, 1158]\n863       864.0       2        [1156.1, 1156.5, 1156.9]        [1156, 1157, 1157]\n864       865.0       1        [1155.0, 1155.0, 1155.0]        [1155, 1155, 1155]\n865       866.0       1        [1154.0, 1154.0, 1154.0]        [1154, 1154, 1154]\n866       867.0       2        [1152.1, 1152.5, 1152.9]        [1152, 1153, 1153]\n867       868.0       1        [1151.0, 1151.0, 1151.0]        [1151, 1151, 1151]\n868       869.0       1        [1150.0, 1150.0, 1150.0]        [1150, 1150, 1150]\n869       870.0       2        [1148.1, 1148.5, 1148.9]        [1148, 1149, 1149]\n870       871.0       1        [1147.0, 1147.0, 1147.0]        [1147, 1147, 1147]\n871       872.0       1        [1146.0, 1146.0, 1146.0]        [1146, 1146, 1146]\n872       873.0       2        [1144.1, 1144.5, 1144.9]        [1144, 1145, 1145]\n873       874.0       1        [1143.0, 1143.0, 1143.0]        [1143, 1143, 1143]\n874       875.0       1        [1142.0, 1142.0, 1142.0]        [1142, 1142, 1142]\n875       876.0       2        [1140.1, 1140.5, 1140.9]        [1140, 1141, 1141]\n876       877.0       1        [1139.0, 1139.0, 1139.0]        [1139, 1139, 1139]\n877       878.0       1        [1138.0, 1138.0, 1138.0]        [1138, 1138, 1138]\n878       879.0       1        [1137.0, 1137.0, 1137.0]        [1137, 1137, 1137]\n879       880.0       2        [1135.1, 1135.5, 1135.9]        [1135, 1136, 1136]\n880       881.0       1        [1134.0, 1134.0, 1134.0]        [1134, 1134, 1134]\n881       882.0       1        [1133.0, 1133.0, 1133.0]        [1133, 1133, 1133]\n882       883.0       2        [1131.1, 1131.5, 1131.9]        [1131, 1132, 1132]\n883       884.0       1        [1130.0, 1130.0, 1130.0]        [1130, 1130, 1130]\n884       885.0       1        [1129.0, 1129.0, 1129.0]        [1129, 1129, 1129]\n885       886.0       1        [1128.0, 1128.0, 1128.0]        [1128, 1128, 1128]\n886       887.0       2        [1126.1, 1126.5, 1126.9]        [1126, 1127, 1127]\n887       888.0       1        [1125.0, 1125.0, 1125.0]        [1125, 1125, 1125]\n888       889.0       1        [1124.0, 1124.0, 1124.0]        [1124, 1124, 1124]\n889       890.0       2        [1122.1, 1122.5, 1122.9]        [1122, 1123, 1123]\n890       891.0       1        [1121.0, 1121.0, 1121.0]        [1121, 1121, 1121]\n891       892.0       1        [1120.0, 1120.0, 1120.0]        [1120, 1120, 1120]\n892       893.0       1        [1119.0, 1119.0, 1119.0]        [1119, 1119, 1119]\n893       894.0       2        [1117.1, 1117.5, 1117.9]        [1117, 1118, 1118]\n894       895.0       1        [1116.0, 1116.0, 1116.0]        [1116, 1116, 1116]\n895       896.0       1        [1115.0, 1115.0, 1115.0]        [1115, 1115, 1115]\n896       897.0       1        [1114.0, 1114.0, 1114.0]        [1114, 1114, 1114]\n897       898.0       2        [1112.1, 1112.5, 1112.9]        [1112, 1113, 1113]\n898       899.0       1        [1111.0, 1111.0, 1111.0]        [1111, 1111, 1111]\n899       900.0       1        [1110.0, 1110.0, 1110.0]        [1110, 1110, 1110]\n900       901.0       1        [1109.0, 1109.0, 1109.0]        [1109, 1109, 1109]\n901       902.0       1        [1108.0, 1108.0, 1108.0]        [1108, 1108, 1108]\n902       903.0       2        [1106.1, 1106.5, 1106.9]        [1106, 1107, 1107]\n903       904.0       1        [1105.0, 1105.0, 1105.0]        [1105, 1105, 1105]\n904       905.0       1        [1104.0, 1104.0, 1104.0]        [1104, 1104, 1104]\n905       906.0       1        [1103.0, 1103.0, 1103.0]        [1103, 1103, 1103]\n906       907.0       2        [1101.1, 1101.5, 1101.9]        [1101, 1102, 1102]\n907       908.0       1        [1100.0, 1100.0, 1100.0]        [1100, 1100, 1100]\n908       909.0       1        [1099.0, 1099.0, 1099.0]        [1099, 1099, 1099]\n909       910.0       1        [1098.0, 1098.0, 1098.0]        [1098, 1098, 1098]\n910       911.0       1        [1097.0, 1097.0, 1097.0]        [1097, 1097, 1097]\n911       912.0       2        [1095.1, 1095.5, 1095.9]        [1095, 1096, 1096]\n912       913.0       1        [1094.0, 1094.0, 1094.0]        [1094, 1094, 1094]\n913       914.0       1        [1093.0, 1093.0, 1093.0]        [1093, 1093, 1093]\n914       915.0       1        [1092.0, 1092.0, 1092.0]        [1092, 1092, 1092]\n915       916.0       1        [1091.0, 1091.0, 1091.0]        [1091, 1091, 1091]\n916       917.0       2        [1089.1, 1089.5, 1089.9]        [1089, 1090, 1090]\n917       918.0       1        [1088.0, 1088.0, 1088.0]        [1088, 1088, 1088]\n918       919.0       1        [1087.0, 1087.0, 1087.0]        [1087, 1087, 1087]\n919       920.0       1        [1086.0, 1086.0, 1086.0]        [1086, 1086, 1086]\n920       921.0       1        [1085.0, 1085.0, 1085.0]        [1085, 1085, 1085]\n921       922.0       1        [1084.0, 1084.0, 1084.0]        [1084, 1084, 1084]\n922       923.0       2        [1082.1, 1082.5, 1082.9]        [1082, 1083, 1083]\n923       924.0       1        [1081.0, 1081.0, 1081.0]        [1081, 1081, 1081]\n924       925.0       1        [1080.0, 1080.0, 1080.0]        [1080, 1080, 1080]\n925       926.0       1        [1079.0, 1079.0, 1079.0]        [1079, 1079, 1079]\n926       927.0       1        [1078.0, 1078.0, 1078.0]        [1078, 1078, 1078]\n927       928.0       1        [1077.0, 1077.0, 1077.0]        [1077, 1077, 1077]\n928       929.0       2        [1075.1, 1075.5, 1075.9]        [1075, 1076, 1076]\n929       930.0       1        [1074.0, 1074.0, 1074.0]        [1074, 1074, 1074]\n930       931.0       1        [1073.0, 1073.0, 1073.0]        [1073, 1073, 1073]\n931       932.0       1        [1072.0, 1072.0, 1072.0]        [1072, 1072, 1072]\n932       933.0       1        [1071.0, 1071.0, 1071.0]        [1071, 1071, 1071]\n933       934.0       1        [1070.0, 1070.0, 1070.0]        [1070, 1070, 1070]\n934       935.0       2        [1068.1, 1068.5, 1068.9]        [1068, 1069, 1069]\n935       936.0       1        [1067.0, 1067.0, 1067.0]        [1067, 1067, 1067]\n936       937.0       1        [1066.0, 1066.0, 1066.0]        [1066, 1066, 1066]\n937       938.0       1        [1065.0, 1065.0, 1065.0]        [1065, 1065, 1065]\n938       939.0       1        [1064.0, 1064.0, 1064.0]        [1064, 1064, 1064]\n939       940.0       1        [1063.0, 1063.0, 1063.0]        [1063, 1063, 1063]\n940       941.0       1        [1062.0, 1062.0, 1062.0]        [1062, 1062, 1062]\n941       942.0       1        [1061.0, 1061.0, 1061.0]        [1061, 1061, 1061]\n942       943.0       2        [1059.1, 1059.5, 1059.9]        [1059, 1060, 1060]\n943       944.0       1        [1058.0, 1058.0, 1058.0]        [1058, 1058, 1058]\n944       945.0       1        [1057.0, 1057.0, 1057.0]        [1057, 1057, 1057]\n945       946.0       1        [1056.0, 1056.0, 1056.0]        [1056, 1056, 1056]\n946       947.0       1        [1055.0, 1055.0, 1055.0]        [1055, 1055, 1055]\n947       948.0       1        [1054.0, 1054.0, 1054.0]        [1054, 1054, 1054]\n948       949.0       1        [1053.0, 1053.0, 1053.0]        [1053, 1053, 1053]\n949       950.0       1        [1052.0, 1052.0, 1052.0]        [1052, 1052, 1052]\n950       951.0       2        [1050.1, 1050.5, 1050.9]        [1050, 1051, 1051]\n951       952.0       1        [1049.0, 1049.0, 1049.0]        [1049, 1049, 1049]\n952       953.0       1        [1048.0, 1048.0, 1048.0]        [1048, 1048, 1048]\n953       954.0       1        [1047.0, 1047.0, 1047.0]        [1047, 1047, 1047]\n954       955.0       1        [1046.0, 1046.0, 1046.0]        [1046, 1046, 1046]\n955       956.0       1        [1045.0, 1045.0, 1045.0]        [1045, 1045, 1045]\n956       957.0       1        [1044.0, 1044.0, 1044.0]        [1044, 1044, 1044]\n957       958.0       1        [1043.0, 1043.0, 1043.0]        [1043, 1043, 1043]\n958       959.0       1        [1042.0, 1042.0, 1042.0]        [1042, 1042, 1042]\n959       960.0       1        [1041.0, 1041.0, 1041.0]        [1041, 1041, 1041]\n960       961.0       1        [1040.0, 1040.0, 1040.0]        [1040, 1040, 1040]\n961       962.0       2        [1038.1, 1038.5, 1038.9]        [1038, 1039, 1039]\n962       963.0       1        [1037.0, 1037.0, 1037.0]        [1037, 1037, 1037]\n963       964.0       1        [1036.0, 1036.0, 1036.0]        [1036, 1036, 1036]\n964       965.0       1        [1035.0, 1035.0, 1035.0]        [1035, 1035, 1035]\n965       966.0       1        [1034.0, 1034.0, 1034.0]        [1034, 1034, 1034]\n966       967.0       1        [1033.0, 1033.0, 1033.0]        [1033, 1033, 1033]\n967       968.0       1        [1032.0, 1032.0, 1032.0]        [1032, 1032, 1032]\n968       969.0       1        [1031.0, 1031.0, 1031.0]        [1031, 1031, 1031]\n969       970.0       1        [1030.0, 1030.0, 1030.0]        [1030, 1030, 1030]\n970       971.0       1        [1029.0, 1029.0, 1029.0]        [1029, 1029, 1029]\n971       972.0       1        [1028.0, 1028.0, 1028.0]        [1028, 1028, 1028]\n972       973.0       1        [1027.0, 1027.0, 1027.0]        [1027, 1027, 1027]\n973       974.0       1        [1026.0, 1026.0, 1026.0]        [1026, 1026, 1026]\n974       975.0       1        [1025.0, 1025.0, 1025.0]        [1025, 1025, 1025]\n975       976.0       1        [1024.0, 1024.0, 1024.0]        [1024, 1024, 1024]\n976       977.0       1        [1023.0, 1023.0, 1023.0]        [1023, 1023, 1023]\n977       978.0       2        [1021.1, 1021.5, 1021.9]        [1021, 1022, 1022]\n978       979.0       1        [1020.0, 1020.0, 1020.0]        [1020, 1020, 1020]\n979       980.0       1        [1019.0, 1019.0, 1019.0]        [1019, 1019, 1019]\n980       981.0       1        [1018.0, 1018.0, 1018.0]        [1018, 1018, 1018]\n981       982.0       1        [1017.0, 1017.0, 1017.0]        [1017, 1017, 1017]\n982       983.0       1        [1016.0, 1016.0, 1016.0]        [1016, 1016, 1016]\n983       984.0       1        [1015.0, 1015.0, 1015.0]        [1015, 1015, 1015]\n984       985.0       1        [1014.0, 1014.0, 1014.0]        [1014, 1014, 1014]\n985       986.0       1        [1013.0, 1013.0, 1013.0]        [1013, 1013, 1013]\n986       987.0       1        [1012.0, 1012.0, 1012.0]        [1012, 1012, 1012]\n987       988.0       1        [1011.0, 1011.0, 1011.0]        [1011, 1011, 1011]\n988       989.0       1        [1010.0, 1010.0, 1010.0]        [1010, 1010, 1010]\n989       990.0       1        [1009.0, 1009.0, 1009.0]        [1009, 1009, 1009]\n990       991.0       1        [1008.0, 1008.0, 1008.0]        [1008, 1008, 1008]\n991       992.0       1        [1007.0, 1007.0, 1007.0]        [1007, 1007, 1007]\n992       993.0       1        [1006.0, 1006.0, 1006.0]        [1006, 1006, 1006]\n993       994.0       1        [1005.0, 1005.0, 1005.0]        [1005, 1005, 1005]\n994       995.0       1        [1004.0, 1004.0, 1004.0]        [1004, 1004, 1004]\n995       996.0       1        [1003.0, 1003.0, 1003.0]        [1003, 1003, 1003]\n996       997.0       1        [1002.0, 1002.0, 1002.0]        [1002, 1002, 1002]\n997       998.0       1        [1001.0, 1001.0, 1001.0]        [1001, 1001, 1001]\n998       999.0       1        [1000.0, 1000.0, 1000.0]        [1000, 1000, 1000]\n999      1000.0       1           [999.0, 999.0, 999.0]           [999, 999, 999]\n1000     1001.0       1           [998.0, 998.0, 998.0]           [998, 998, 998]\n1001     1002.0       1           [997.0, 997.0, 997.0]           [997, 997, 997]\n1002     1003.0       1           [996.0, 996.0, 996.0]           [996, 996, 996]\n1003     1004.0       1           [995.0, 995.0, 995.0]           [995, 995, 995]\n1004     1005.0       1           [994.0, 994.0, 994.0]           [994, 994, 994]\n1005     1006.0       1           [993.0, 993.0, 993.0]           [993, 993, 993]\n1006     1007.0       1           [992.0, 992.0, 992.0]           [992, 992, 992]\n1007     1008.0       1           [991.0, 991.0, 991.0]           [991, 991, 991]\n1008     1009.0       1           [990.0, 990.0, 990.0]           [990, 990, 990]\n1009     1010.0       1           [989.0, 989.0, 989.0]           [989, 989, 989]\n1010     1011.0       1           [988.0, 988.0, 988.0]           [988, 988, 988]\n1011     1012.0       1           [987.0, 987.0, 987.0]           [987, 987, 987]\n1012     1013.0       1           [986.0, 986.0, 986.0]           [986, 986, 986]\n1013     1014.0       1           [985.0, 985.0, 985.0]           [985, 985, 985]\n1014     1015.0       1           [984.0, 984.0, 984.0]           [984, 984, 984]\n1015     1016.0       1           [983.0, 983.0, 983.0]           [983, 983, 983]\n1016     1017.0       1           [982.0, 982.0, 982.0]           [982, 982, 982]\n1017     1018.0       1           [981.0, 981.0, 981.0]           [981, 981, 981]\n1018     1019.0       1           [980.0, 980.0, 980.0]           [980, 980, 980]\n1019     1020.0       1           [979.0, 979.0, 979.0]           [979, 979, 979]\n1020     1021.0       1           [978.0, 978.0, 978.0]           [978, 978, 978]\n1021     1022.0       1           [977.0, 977.0, 977.0]           [977, 977, 977]\n1022     1024.0       1           [976.0, 976.0, 976.0]           [976, 976, 976]\n1023     1025.0       1           [975.0, 975.0, 975.0]           [975, 975, 975]\n1024     1026.0       1           [974.0, 974.0, 974.0]           [974, 974, 974]\n1025     1027.0       1           [973.0, 973.0, 973.0]           [973, 973, 973]\n1026     1028.0       1           [972.0, 972.0, 972.0]           [972, 972, 972]\n1027     1029.0       1           [971.0, 971.0, 971.0]           [971, 971, 971]\n1028     1030.0       1           [970.0, 970.0, 970.0]           [970, 970, 970]\n1029     1031.0       1           [969.0, 969.0, 969.0]           [969, 969, 969]\n1030     1032.0       1           [968.0, 968.0, 968.0]           [968, 968, 968]\n1031     1033.0       1           [967.0, 967.0, 967.0]           [967, 967, 967]\n1032     1034.0       1           [966.0, 966.0, 966.0]           [966, 966, 966]\n1033     1035.0       1           [965.0, 965.0, 965.0]           [965, 965, 965]\n1034     1036.0       1           [964.0, 964.0, 964.0]           [964, 964, 964]\n1035     1037.0       1           [963.0, 963.0, 963.0]           [963, 963, 963]\n1036     1038.0       1           [962.0, 962.0, 962.0]           [962, 962, 962]\n1037     1040.0       1           [961.0, 961.0, 961.0]           [961, 961, 961]\n1038     1041.0       1           [960.0, 960.0, 960.0]           [960, 960, 960]\n1039     1042.0       1           [959.0, 959.0, 959.0]           [959, 959, 959]\n1040     1043.0       1           [958.0, 958.0, 958.0]           [958, 958, 958]\n1041     1044.0       1           [957.0, 957.0, 957.0]           [957, 957, 957]\n1042     1045.0       1           [956.0, 956.0, 956.0]           [956, 956, 956]\n1043     1046.0       1           [955.0, 955.0, 955.0]           [955, 955, 955]\n1044     1047.0       1           [954.0, 954.0, 954.0]           [954, 954, 954]\n1045     1048.0       1           [953.0, 953.0, 953.0]           [953, 953, 953]\n1046     1049.0       1           [952.0, 952.0, 952.0]           [952, 952, 952]\n1047     1050.0       1           [951.0, 951.0, 951.0]           [951, 951, 951]\n1048     1052.0       1           [950.0, 950.0, 950.0]           [950, 950, 950]\n1049     1053.0       1           [949.0, 949.0, 949.0]           [949, 949, 949]\n1050     1054.0       1           [948.0, 948.0, 948.0]           [948, 948, 948]\n1051     1055.0       1           [947.0, 947.0, 947.0]           [947, 947, 947]\n1052     1056.0       1           [946.0, 946.0, 946.0]           [946, 946, 946]\n1053     1057.0       1           [945.0, 945.0, 945.0]           [945, 945, 945]\n1054     1058.0       1           [944.0, 944.0, 944.0]           [944, 944, 944]\n1055     1059.0       1           [943.0, 943.0, 943.0]           [943, 943, 943]\n1056     1060.0       1           [942.0, 942.0, 942.0]           [942, 942, 942]\n1057     1062.0       1           [941.0, 941.0, 941.0]           [941, 941, 941]\n1058     1063.0       1           [940.0, 940.0, 940.0]           [940, 940, 940]\n1059     1064.0       1           [939.0, 939.0, 939.0]           [939, 939, 939]\n1060     1065.0       1           [938.0, 938.0, 938.0]           [938, 938, 938]\n1061     1066.0       1           [937.0, 937.0, 937.0]           [937, 937, 937]\n1062     1067.0       1           [936.0, 936.0, 936.0]           [936, 936, 936]\n1063     1068.0       1           [935.0, 935.0, 935.0]           [935, 935, 935]\n1064     1070.0       1           [934.0, 934.0, 934.0]           [934, 934, 934]\n1065     1071.0       1           [933.0, 933.0, 933.0]           [933, 933, 933]\n1066     1072.0       1           [932.0, 932.0, 932.0]           [932, 932, 932]\n1067     1073.0       1           [931.0, 931.0, 931.0]           [931, 931, 931]\n1068     1074.0       1           [930.0, 930.0, 930.0]           [930, 930, 930]\n1069     1075.0       1           [929.0, 929.0, 929.0]           [929, 929, 929]\n1070     1076.0       1           [928.0, 928.0, 928.0]           [928, 928, 928]\n1071     1078.0       1           [927.0, 927.0, 927.0]           [927, 927, 927]\n1072     1079.0       1           [926.0, 926.0, 926.0]           [926, 926, 926]\n1073     1080.0       1           [925.0, 925.0, 925.0]           [925, 925, 925]\n1074     1081.0       1           [924.0, 924.0, 924.0]           [924, 924, 924]\n1075     1082.0       1           [923.0, 923.0, 923.0]           [923, 923, 923]\n1076     1083.0       1           [922.0, 922.0, 922.0]           [922, 922, 922]\n1077     1085.0       1           [921.0, 921.0, 921.0]           [921, 921, 921]\n1078     1086.0       1           [920.0, 920.0, 920.0]           [920, 920, 920]\n1079     1087.0       1           [919.0, 919.0, 919.0]           [919, 919, 919]\n1080     1088.0       1           [918.0, 918.0, 918.0]           [918, 918, 918]\n1081     1089.0       1           [917.0, 917.0, 917.0]           [917, 917, 917]\n1082     1091.0       1           [916.0, 916.0, 916.0]           [916, 916, 916]\n1083     1092.0       1           [915.0, 915.0, 915.0]           [915, 915, 915]\n1084     1093.0       1           [914.0, 914.0, 914.0]           [914, 914, 914]\n1085     1094.0       1           [913.0, 913.0, 913.0]           [913, 913, 913]\n1086     1095.0       1           [912.0, 912.0, 912.0]           [912, 912, 912]\n1087     1096.0       1           [911.0, 911.0, 911.0]           [911, 911, 911]\n1088     1098.0       1           [910.0, 910.0, 910.0]           [910, 910, 910]\n1089     1099.0       1           [909.0, 909.0, 909.0]           [909, 909, 909]\n1090     1100.0       1           [908.0, 908.0, 908.0]           [908, 908, 908]\n1091     1101.0       1           [907.0, 907.0, 907.0]           [907, 907, 907]\n1092     1103.0       1           [906.0, 906.0, 906.0]           [906, 906, 906]\n1093     1104.0       1           [905.0, 905.0, 905.0]           [905, 905, 905]\n1094     1105.0       1           [904.0, 904.0, 904.0]           [904, 904, 904]\n1095     1106.0       1           [903.0, 903.0, 903.0]           [903, 903, 903]\n1096     1107.0       1           [902.0, 902.0, 902.0]           [902, 902, 902]\n1097     1109.0       1           [901.0, 901.0, 901.0]           [901, 901, 901]\n1098     1110.0       1           [900.0, 900.0, 900.0]           [900, 900, 900]\n1099     1111.0       1           [899.0, 899.0, 899.0]           [899, 899, 899]\n1100     1112.0       1           [898.0, 898.0, 898.0]           [898, 898, 898]\n1101     1114.0       1           [897.0, 897.0, 897.0]           [897, 897, 897]\n1102     1115.0       1           [896.0, 896.0, 896.0]           [896, 896, 896]\n1103     1116.0       1           [895.0, 895.0, 895.0]           [895, 895, 895]\n1104     1117.0       1           [894.0, 894.0, 894.0]           [894, 894, 894]\n1105     1119.0       1           [893.0, 893.0, 893.0]           [893, 893, 893]\n1106     1120.0       1           [892.0, 892.0, 892.0]           [892, 892, 892]\n1107     1121.0       1           [891.0, 891.0, 891.0]           [891, 891, 891]\n1108     1122.0       1           [890.0, 890.0, 890.0]           [890, 890, 890]\n1109     1124.0       1           [889.0, 889.0, 889.0]           [889, 889, 889]\n1110     1125.0       1           [888.0, 888.0, 888.0]           [888, 888, 888]\n1111     1126.0       1           [887.0, 887.0, 887.0]           [887, 887, 887]\n1112     1127.0       1           [886.0, 886.0, 886.0]           [886, 886, 886]\n1113     1129.0       1           [885.0, 885.0, 885.0]           [885, 885, 885]\n1114     1130.0       1           [884.0, 884.0, 884.0]           [884, 884, 884]\n1115     1131.0       1           [883.0, 883.0, 883.0]           [883, 883, 883]\n1116     1133.0       1           [882.0, 882.0, 882.0]           [882, 882, 882]\n1117     1134.0       1           [881.0, 881.0, 881.0]           [881, 881, 881]\n1118     1135.0       1           [880.0, 880.0, 880.0]           [880, 880, 880]\n1119     1136.0       1           [879.0, 879.0, 879.0]           [879, 879, 879]\n1120     1138.0       1           [878.0, 878.0, 878.0]           [878, 878, 878]\n1121     1139.0       1           [877.0, 877.0, 877.0]           [877, 877, 877]\n1122     1140.0       1           [876.0, 876.0, 876.0]           [876, 876, 876]\n1123     1142.0       1           [875.0, 875.0, 875.0]           [875, 875, 875]\n1124     1143.0       1           [874.0, 874.0, 874.0]           [874, 874, 874]\n1125     1144.0       1           [873.0, 873.0, 873.0]           [873, 873, 873]\n1126     1145.0       1           [872.0, 872.0, 872.0]           [872, 872, 872]\n1127     1147.0       1           [871.0, 871.0, 871.0]           [871, 871, 871]\n1128     1148.0       1           [870.0, 870.0, 870.0]           [870, 870, 870]\n1129     1149.0       1           [869.0, 869.0, 869.0]           [869, 869, 869]\n1130     1151.0       1           [868.0, 868.0, 868.0]           [868, 868, 868]\n1131     1152.0       1           [867.0, 867.0, 867.0]           [867, 867, 867]\n1132     1153.0       1           [866.0, 866.0, 866.0]           [866, 866, 866]\n1133     1155.0       1           [865.0, 865.0, 865.0]           [865, 865, 865]\n1134     1156.0       1           [864.0, 864.0, 864.0]           [864, 864, 864]\n1135     1157.0       1           [863.0, 863.0, 863.0]           [863, 863, 863]\n1136     1159.0       1           [862.0, 862.0, 862.0]           [862, 862, 862]\n1137     1160.0       1           [861.0, 861.0, 861.0]           [861, 861, 861]\n1138     1161.0       1           [860.0, 860.0, 860.0]           [860, 860, 860]\n1139     1163.0       1           [859.0, 859.0, 859.0]           [859, 859, 859]\n1140     1164.0       1           [858.0, 858.0, 858.0]           [858, 858, 858]\n1141     1166.0       1           [857.0, 857.0, 857.0]           [857, 857, 857]\n1142     1167.0       1           [856.0, 856.0, 856.0]           [856, 856, 856]\n1143     1168.0       1           [855.0, 855.0, 855.0]           [855, 855, 855]\n1144     1170.0       1           [854.0, 854.0, 854.0]           [854, 854, 854]\n1145     1171.0       1           [853.0, 853.0, 853.0]           [853, 853, 853]\n1146     1172.0       1           [852.0, 852.0, 852.0]           [852, 852, 852]\n1147     1174.0       1           [851.0, 851.0, 851.0]           [851, 851, 851]\n1148     1175.0       1           [850.0, 850.0, 850.0]           [850, 850, 850]\n1149     1176.0       1           [849.0, 849.0, 849.0]           [849, 849, 849]\n1150     1178.0       1           [848.0, 848.0, 848.0]           [848, 848, 848]\n1151     1179.0       1           [847.0, 847.0, 847.0]           [847, 847, 847]\n1152     1181.0       1           [846.0, 846.0, 846.0]           [846, 846, 846]\n1153     1182.0       1           [845.0, 845.0, 845.0]           [845, 845, 845]\n1154     1183.0       1           [844.0, 844.0, 844.0]           [844, 844, 844]\n1155     1185.0       1           [843.0, 843.0, 843.0]           [843, 843, 843]\n1156     1186.0       1           [842.0, 842.0, 842.0]           [842, 842, 842]\n1157     1188.0       1           [841.0, 841.0, 841.0]           [841, 841, 841]\n1158     1189.0       1           [840.0, 840.0, 840.0]           [840, 840, 840]\n1159     1190.0       1           [839.0, 839.0, 839.0]           [839, 839, 839]\n1160     1192.0       1           [838.0, 838.0, 838.0]           [838, 838, 838]\n1161     1193.0       1           [837.0, 837.0, 837.0]           [837, 837, 837]\n1162     1195.0       1           [836.0, 836.0, 836.0]           [836, 836, 836]\n1163     1196.0       1           [835.0, 835.0, 835.0]           [835, 835, 835]\n1164     1198.0       1           [834.0, 834.0, 834.0]           [834, 834, 834]\n1165     1199.0       1           [833.0, 833.0, 833.0]           [833, 833, 833]\n1166     1200.0       1           [832.0, 832.0, 832.0]           [832, 832, 832]\n1167     1202.0       1           [831.0, 831.0, 831.0]           [831, 831, 831]\n1168     1203.0       1           [830.0, 830.0, 830.0]           [830, 830, 830]\n1169     1205.0       1           [829.0, 829.0, 829.0]           [829, 829, 829]\n1170     1206.0       1           [828.0, 828.0, 828.0]           [828, 828, 828]\n1171     1208.0       1           [827.0, 827.0, 827.0]           [827, 827, 827]\n1172     1209.0       1           [826.0, 826.0, 826.0]           [826, 826, 826]\n1173     1211.0       1           [825.0, 825.0, 825.0]           [825, 825, 825]\n1174     1212.0       1           [824.0, 824.0, 824.0]           [824, 824, 824]\n1175     1214.0       1           [823.0, 823.0, 823.0]           [823, 823, 823]\n1176     1215.0       1           [822.0, 822.0, 822.0]           [822, 822, 822]\n1177     1217.0       1           [821.0, 821.0, 821.0]           [821, 821, 821]\n1178     1218.0       1           [820.0, 820.0, 820.0]           [820, 820, 820]\n1179     1220.0       1           [819.0, 819.0, 819.0]           [819, 819, 819]\n1180     1221.0       1           [818.0, 818.0, 818.0]           [818, 818, 818]\n1181     1222.0       1           [817.0, 817.0, 817.0]           [817, 817, 817]\n1182     1224.0       1           [816.0, 816.0, 816.0]           [816, 816, 816]\n1183     1225.0       1           [815.0, 815.0, 815.0]           [815, 815, 815]\n1184     1227.0       1           [814.0, 814.0, 814.0]           [814, 814, 814]\n1185     1229.0       1           [813.0, 813.0, 813.0]           [813, 813, 813]\n1186     1230.0       1           [812.0, 812.0, 812.0]           [812, 812, 812]\n1187     1232.0       1           [811.0, 811.0, 811.0]           [811, 811, 811]\n1188     1233.0       1           [810.0, 810.0, 810.0]           [810, 810, 810]\n1189     1235.0       1           [809.0, 809.0, 809.0]           [809, 809, 809]\n1190     1236.0       1           [808.0, 808.0, 808.0]           [808, 808, 808]\n1191     1238.0       1           [807.0, 807.0, 807.0]           [807, 807, 807]\n1192     1239.0       1           [806.0, 806.0, 806.0]           [806, 806, 806]\n1193     1241.0       1           [805.0, 805.0, 805.0]           [805, 805, 805]\n1194     1242.0       1           [804.0, 804.0, 804.0]           [804, 804, 804]\n1195     1244.0       1           [803.0, 803.0, 803.0]           [803, 803, 803]\n1196     1245.0       1           [802.0, 802.0, 802.0]           [802, 802, 802]\n1197     1247.0       1           [801.0, 801.0, 801.0]           [801, 801, 801]\n1198     1248.0       1           [800.0, 800.0, 800.0]           [800, 800, 800]\n1199     1250.0       1           [799.0, 799.0, 799.0]           [799, 799, 799]\n1200     1252.0       1           [798.0, 798.0, 798.0]           [798, 798, 798]\n1201     1253.0       1           [797.0, 797.0, 797.0]           [797, 797, 797]\n1202     1255.0       1           [796.0, 796.0, 796.0]           [796, 796, 796]\n1203     1256.0       1           [795.0, 795.0, 795.0]           [795, 795, 795]\n1204     1258.0       1           [794.0, 794.0, 794.0]           [794, 794, 794]\n1205     1259.0       1           [793.0, 793.0, 793.0]           [793, 793, 793]\n1206     1261.0       1           [792.0, 792.0, 792.0]           [792, 792, 792]\n1207     1263.0       1           [791.0, 791.0, 791.0]           [791, 791, 791]\n1208     1264.0       1           [790.0, 790.0, 790.0]           [790, 790, 790]\n1209     1266.0       1           [789.0, 789.0, 789.0]           [789, 789, 789]\n1210     1267.0       1           [788.0, 788.0, 788.0]           [788, 788, 788]\n1211     1269.0       1           [787.0, 787.0, 787.0]           [787, 787, 787]\n1212     1271.0       1           [786.0, 786.0, 786.0]           [786, 786, 786]\n1213     1272.0       1           [785.0, 785.0, 785.0]           [785, 785, 785]\n1214     1274.0       1           [784.0, 784.0, 784.0]           [784, 784, 784]\n1215     1276.0       1           [783.0, 783.0, 783.0]           [783, 783, 783]\n1216     1277.0       1           [782.0, 782.0, 782.0]           [782, 782, 782]\n1217     1279.0       1           [781.0, 781.0, 781.0]           [781, 781, 781]\n1218     1280.0       1           [780.0, 780.0, 780.0]           [780, 780, 780]\n1219     1282.0       1           [779.0, 779.0, 779.0]           [779, 779, 779]\n1220     1284.0       1           [778.0, 778.0, 778.0]           [778, 778, 778]\n1221     1285.0       1           [777.0, 777.0, 777.0]           [777, 777, 777]\n1222     1287.0       1           [776.0, 776.0, 776.0]           [776, 776, 776]\n1223     1289.0       1           [775.0, 775.0, 775.0]           [775, 775, 775]\n1224     1290.0       1           [774.0, 774.0, 774.0]           [774, 774, 774]\n1225     1292.0       1           [773.0, 773.0, 773.0]           [773, 773, 773]\n1226     1294.0       1           [772.0, 772.0, 772.0]           [772, 772, 772]\n1227     1295.0       1           [771.0, 771.0, 771.0]           [771, 771, 771]\n1228     1297.0       1           [770.0, 770.0, 770.0]           [770, 770, 770]\n1229     1299.0       1           [769.0, 769.0, 769.0]           [769, 769, 769]\n1230     1300.0       1           [768.0, 768.0, 768.0]           [768, 768, 768]\n1231     1302.0       1           [767.0, 767.0, 767.0]           [767, 767, 767]\n1232     1304.0       1           [766.0, 766.0, 766.0]           [766, 766, 766]\n1233     1305.0       1           [765.0, 765.0, 765.0]           [765, 765, 765]\n1234     1307.0       1           [764.0, 764.0, 764.0]           [764, 764, 764]\n1235     1309.0       1           [763.0, 763.0, 763.0]           [763, 763, 763]\n1236     1311.0       1           [762.0, 762.0, 762.0]           [762, 762, 762]\n1237     1312.0       1           [761.0, 761.0, 761.0]           [761, 761, 761]\n1238     1314.0       1           [760.0, 760.0, 760.0]           [760, 760, 760]\n1239     1316.0       1           [759.0, 759.0, 759.0]           [759, 759, 759]\n1240     1318.0       1           [758.0, 758.0, 758.0]           [758, 758, 758]\n1241     1319.0       1           [757.0, 757.0, 757.0]           [757, 757, 757]\n1242     1321.0       1           [756.0, 756.0, 756.0]           [756, 756, 756]\n1243     1323.0       1           [755.0, 755.0, 755.0]           [755, 755, 755]\n1244     1325.0       1           [754.0, 754.0, 754.0]           [754, 754, 754]\n1245     1326.0       1           [753.0, 753.0, 753.0]           [753, 753, 753]\n1246     1328.0       1           [752.0, 752.0, 752.0]           [752, 752, 752]\n1247     1330.0       1           [751.0, 751.0, 751.0]           [751, 751, 751]\n1248     1332.0       1           [750.0, 750.0, 750.0]           [750, 750, 750]\n1249     1333.0       1           [749.0, 749.0, 749.0]           [749, 749, 749]\n1250     1335.0       1           [748.0, 748.0, 748.0]           [748, 748, 748]\n1251     1337.0       1           [747.0, 747.0, 747.0]           [747, 747, 747]\n1252     1339.0       1           [746.0, 746.0, 746.0]           [746, 746, 746]\n1253     1340.0       1           [745.0, 745.0, 745.0]           [745, 745, 745]\n1254     1342.0       1           [744.0, 744.0, 744.0]           [744, 744, 744]\n1255     1344.0       1           [743.0, 743.0, 743.0]           [743, 743, 743]\n1256     1346.0       1           [742.0, 742.0, 742.0]           [742, 742, 742]\n1257     1348.0       1           [741.0, 741.0, 741.0]           [741, 741, 741]\n1258     1350.0       1           [740.0, 740.0, 740.0]           [740, 740, 740]\n1259     1351.0       1           [739.0, 739.0, 739.0]           [739, 739, 739]\n1260     1353.0       1           [738.0, 738.0, 738.0]           [738, 738, 738]\n1261     1355.0       1           [737.0, 737.0, 737.0]           [737, 737, 737]\n1262     1357.0       1           [736.0, 736.0, 736.0]           [736, 736, 736]\n1263     1359.0       1           [735.0, 735.0, 735.0]           [735, 735, 735]\n1264     1361.0       1           [734.0, 734.0, 734.0]           [734, 734, 734]\n1265     1362.0       1           [733.0, 733.0, 733.0]           [733, 733, 733]\n1266     1364.0       1           [732.0, 732.0, 732.0]           [732, 732, 732]\n1267     1366.0       1           [731.0, 731.0, 731.0]           [731, 731, 731]\n1268     1368.0       1           [730.0, 730.0, 730.0]           [730, 730, 730]\n1269     1370.0       1           [729.0, 729.0, 729.0]           [729, 729, 729]\n1270     1372.0       1           [728.0, 728.0, 728.0]           [728, 728, 728]\n1271     1374.0       1           [727.0, 727.0, 727.0]           [727, 727, 727]\n1272     1376.0       1           [726.0, 726.0, 726.0]           [726, 726, 726]\n1273     1377.0       1           [725.0, 725.0, 725.0]           [725, 725, 725]\n1274     1379.0       1           [724.0, 724.0, 724.0]           [724, 724, 724]\n1275     1381.0       1           [723.0, 723.0, 723.0]           [723, 723, 723]\n1276     1383.0       1           [722.0, 722.0, 722.0]           [722, 722, 722]\n1277     1385.0       1           [721.0, 721.0, 721.0]           [721, 721, 721]\n1278     1387.0       1           [720.0, 720.0, 720.0]           [720, 720, 720]\n1279     1389.0       1           [719.0, 719.0, 719.0]           [719, 719, 719]\n1280     1391.0       1           [718.0, 718.0, 718.0]           [718, 718, 718]\n1281     1393.0       1           [717.0, 717.0, 717.0]           [717, 717, 717]\n1282     1395.0       1           [716.0, 716.0, 716.0]           [716, 716, 716]\n1283     1397.0       1           [715.0, 715.0, 715.0]           [715, 715, 715]\n1284     1399.0       1           [714.0, 714.0, 714.0]           [714, 714, 714]\n1285     1401.0       1           [713.0, 713.0, 713.0]           [713, 713, 713]\n1286     1403.0       1           [712.0, 712.0, 712.0]           [712, 712, 712]\n1287     1404.0       1           [711.0, 711.0, 711.0]           [711, 711, 711]\n1288     1406.0       1           [710.0, 710.0, 710.0]           [710, 710, 710]\n1289     1408.0       1           [709.0, 709.0, 709.0]           [709, 709, 709]\n1290     1410.0       1           [708.0, 708.0, 708.0]           [708, 708, 708]\n1291     1412.0       1           [707.0, 707.0, 707.0]           [707, 707, 707]\n1292     1414.0       1           [706.0, 706.0, 706.0]           [706, 706, 706]\n1293     1416.0       1           [705.0, 705.0, 705.0]           [705, 705, 705]\n1294     1418.0       1           [704.0, 704.0, 704.0]           [704, 704, 704]\n1295     1420.0       1           [703.0, 703.0, 703.0]           [703, 703, 703]\n1296     1422.0       1           [702.0, 702.0, 702.0]           [702, 702, 702]\n1297     1425.0       1           [701.0, 701.0, 701.0]           [701, 701, 701]\n1298     1427.0       1           [700.0, 700.0, 700.0]           [700, 700, 700]\n1299     1429.0       1           [699.0, 699.0, 699.0]           [699, 699, 699]\n1300     1431.0       1           [698.0, 698.0, 698.0]           [698, 698, 698]\n1301     1433.0       1           [697.0, 697.0, 697.0]           [697, 697, 697]\n1302     1435.0       1           [696.0, 696.0, 696.0]           [696, 696, 696]\n1303     1437.0       1           [695.0, 695.0, 695.0]           [695, 695, 695]\n1304     1439.0       1           [694.0, 694.0, 694.0]           [694, 694, 694]\n1305     1441.0       1           [693.0, 693.0, 693.0]           [693, 693, 693]\n1306     1443.0       1           [692.0, 692.0, 692.0]           [692, 692, 692]\n1307     1445.0       1           [691.0, 691.0, 691.0]           [691, 691, 691]\n1308     1447.0       1           [690.0, 690.0, 690.0]           [690, 690, 690]\n1309     1449.0       1           [689.0, 689.0, 689.0]           [689, 689, 689]\n1310     1451.0       1           [688.0, 688.0, 688.0]           [688, 688, 688]\n1311     1453.0       1           [687.0, 687.0, 687.0]           [687, 687, 687]\n1312     1456.0       1           [686.0, 686.0, 686.0]           [686, 686, 686]\n1313     1458.0       1           [685.0, 685.0, 685.0]           [685, 685, 685]\n1314     1460.0       1           [684.0, 684.0, 684.0]           [684, 684, 684]\n1315     1462.0       1           [683.0, 683.0, 683.0]           [683, 683, 683]\n1316     1464.0       1           [682.0, 682.0, 682.0]           [682, 682, 682]\n1317     1466.0       1           [681.0, 681.0, 681.0]           [681, 681, 681]\n1318     1468.0       1           [680.0, 680.0, 680.0]           [680, 680, 680]\n1319     1471.0       1           [679.0, 679.0, 679.0]           [679, 679, 679]\n1320     1473.0       1           [678.0, 678.0, 678.0]           [678, 678, 678]\n1321     1475.0       1           [677.0, 677.0, 677.0]           [677, 677, 677]\n1322     1477.0       1           [676.0, 676.0, 676.0]           [676, 676, 676]\n1323     1479.0       1           [675.0, 675.0, 675.0]           [675, 675, 675]\n1324     1481.0       1           [674.0, 674.0, 674.0]           [674, 674, 674]\n1325     1484.0       1           [673.0, 673.0, 673.0]           [673, 673, 673]\n1326     1486.0       1           [672.0, 672.0, 672.0]           [672, 672, 672]\n1327     1488.0       1           [671.0, 671.0, 671.0]           [671, 671, 671]\n1328     1490.0       1           [670.0, 670.0, 670.0]           [670, 670, 670]\n1329     1493.0       1           [669.0, 669.0, 669.0]           [669, 669, 669]\n1330     1495.0       1           [668.0, 668.0, 668.0]           [668, 668, 668]\n1331     1497.0       1           [667.0, 667.0, 667.0]           [667, 667, 667]\n1332     1499.0       1           [666.0, 666.0, 666.0]           [666, 666, 666]\n1333     1502.0       1           [665.0, 665.0, 665.0]           [665, 665, 665]\n1334     1504.0       1           [664.0, 664.0, 664.0]           [664, 664, 664]\n1335     1506.0       1           [663.0, 663.0, 663.0]           [663, 663, 663]\n1336     1508.0       1           [662.0, 662.0, 662.0]           [662, 662, 662]\n1337     1511.0       1           [661.0, 661.0, 661.0]           [661, 661, 661]\n1338     1513.0       1           [660.0, 660.0, 660.0]           [660, 660, 660]\n1339     1515.0       1           [659.0, 659.0, 659.0]           [659, 659, 659]\n1340     1517.0       1           [658.0, 658.0, 658.0]           [658, 658, 658]\n1341     1520.0       1           [657.0, 657.0, 657.0]           [657, 657, 657]\n1342     1522.0       1           [656.0, 656.0, 656.0]           [656, 656, 656]\n1343     1524.0       1           [655.0, 655.0, 655.0]           [655, 655, 655]\n1344     1527.0       1           [654.0, 654.0, 654.0]           [654, 654, 654]\n1345     1529.0       1           [653.0, 653.0, 653.0]           [653, 653, 653]\n1346     1531.0       1           [652.0, 652.0, 652.0]           [652, 652, 652]\n1347     1534.0       1           [651.0, 651.0, 651.0]           [651, 651, 651]\n1348     1536.0       1           [650.0, 650.0, 650.0]           [650, 650, 650]\n1349     1538.0       1           [649.0, 649.0, 649.0]           [649, 649, 649]\n1350     1541.0       1           [648.0, 648.0, 648.0]           [648, 648, 648]\n1351     1543.0       1           [647.0, 647.0, 647.0]           [647, 647, 647]\n1352     1546.0       1           [646.0, 646.0, 646.0]           [646, 646, 646]\n1353     1548.0       1           [645.0, 645.0, 645.0]           [645, 645, 645]\n1354     1550.0       1           [644.0, 644.0, 644.0]           [644, 644, 644]\n1355     1553.0       1           [643.0, 643.0, 643.0]           [643, 643, 643]\n1356     1555.0       1           [642.0, 642.0, 642.0]           [642, 642, 642]\n1357     1558.0       1           [641.0, 641.0, 641.0]           [641, 641, 641]\n1358     1560.0       1           [640.0, 640.0, 640.0]           [640, 640, 640]\n1359     1563.0       1           [639.0, 639.0, 639.0]           [639, 639, 639]\n1360     1565.0       1           [638.0, 638.0, 638.0]           [638, 638, 638]\n1361     1567.0       1           [637.0, 637.0, 637.0]           [637, 637, 637]\n1362     1570.0       1           [636.0, 636.0, 636.0]           [636, 636, 636]\n1363     1572.0       1           [635.0, 635.0, 635.0]           [635, 635, 635]\n1364     1575.0       1           [634.0, 634.0, 634.0]           [634, 634, 634]\n1365     1577.0       1           [633.0, 633.0, 633.0]           [633, 633, 633]\n1366     1580.0       1           [632.0, 632.0, 632.0]           [632, 632, 632]\n1367     1582.0       1           [631.0, 631.0, 631.0]           [631, 631, 631]\n1368     1585.0       1           [630.0, 630.0, 630.0]           [630, 630, 630]\n1369     1587.0       1           [629.0, 629.0, 629.0]           [629, 629, 629]\n1370     1590.0       1           [628.0, 628.0, 628.0]           [628, 628, 628]\n1371     1592.0       1           [627.0, 627.0, 627.0]           [627, 627, 627]\n1372     1595.0       1           [626.0, 626.0, 626.0]           [626, 626, 626]\n1373     1597.0       1           [625.0, 625.0, 625.0]           [625, 625, 625]\n1374     1600.0       1           [624.0, 624.0, 624.0]           [624, 624, 624]\n1375     1603.0       1           [623.0, 623.0, 623.0]           [623, 623, 623]\n1376     1605.0       1           [622.0, 622.0, 622.0]           [622, 622, 622]\n1377     1608.0       1           [621.0, 621.0, 621.0]           [621, 621, 621]\n1378     1610.0       1           [620.0, 620.0, 620.0]           [620, 620, 620]\n1379     1613.0       1           [619.0, 619.0, 619.0]           [619, 619, 619]\n1380     1616.0       1           [618.0, 618.0, 618.0]           [618, 618, 618]\n1381     1618.0       1           [617.0, 617.0, 617.0]           [617, 617, 617]\n1382     1621.0       1           [616.0, 616.0, 616.0]           [616, 616, 616]\n1383     1623.0       1           [615.0, 615.0, 615.0]           [615, 615, 615]\n1384     1626.0       1           [614.0, 614.0, 614.0]           [614, 614, 614]\n1385     1629.0       1           [613.0, 613.0, 613.0]           [613, 613, 613]\n1386     1631.0       1           [612.0, 612.0, 612.0]           [612, 612, 612]\n1387     1634.0       1           [611.0, 611.0, 611.0]           [611, 611, 611]\n1388     1637.0       1           [610.0, 610.0, 610.0]           [610, 610, 610]\n1389     1639.0       1           [609.0, 609.0, 609.0]           [609, 609, 609]\n1390     1642.0       1           [608.0, 608.0, 608.0]           [608, 608, 608]\n1391     1645.0       1           [607.0, 607.0, 607.0]           [607, 607, 607]\n1392     1647.0       1           [606.0, 606.0, 606.0]           [606, 606, 606]\n1393     1650.0       1           [605.0, 605.0, 605.0]           [605, 605, 605]\n1394     1653.0       1           [604.0, 604.0, 604.0]           [604, 604, 604]\n1395     1656.0       1           [603.0, 603.0, 603.0]           [603, 603, 603]\n1396     1658.0       1           [602.0, 602.0, 602.0]           [602, 602, 602]\n1397     1661.0       1           [601.0, 601.0, 601.0]           [601, 601, 601]\n1398     1664.0       1           [600.0, 600.0, 600.0]           [600, 600, 600]\n1399     1667.0       1           [599.0, 599.0, 599.0]           [599, 599, 599]\n1400     1669.0       1           [598.0, 598.0, 598.0]           [598, 598, 598]\n1401     1672.0       1           [597.0, 597.0, 597.0]           [597, 597, 597]\n1402     1675.0       1           [596.0, 596.0, 596.0]           [596, 596, 596]\n1403     1678.0       1           [595.0, 595.0, 595.0]           [595, 595, 595]\n1404     1681.0       1           [594.0, 594.0, 594.0]           [594, 594, 594]\n1405     1684.0       1           [593.0, 593.0, 593.0]           [593, 593, 593]\n1406     1686.0       1           [592.0, 592.0, 592.0]           [592, 592, 592]\n1407     1689.0       1           [591.0, 591.0, 591.0]           [591, 591, 591]\n1408     1692.0       1           [590.0, 590.0, 590.0]           [590, 590, 590]\n1409     1695.0       1           [589.0, 589.0, 589.0]           [589, 589, 589]\n1410     1698.0       1           [588.0, 588.0, 588.0]           [588, 588, 588]\n1411     1701.0       1           [587.0, 587.0, 587.0]           [587, 587, 587]\n1412     1704.0       1           [586.0, 586.0, 586.0]           [586, 586, 586]\n1413     1706.0       1           [585.0, 585.0, 585.0]           [585, 585, 585]\n1414     1709.0       1           [584.0, 584.0, 584.0]           [584, 584, 584]\n1415     1712.0       1           [583.0, 583.0, 583.0]           [583, 583, 583]\n1416     1715.0       1           [582.0, 582.0, 582.0]           [582, 582, 582]\n1417     1718.0       1           [581.0, 581.0, 581.0]           [581, 581, 581]\n1418     1721.0       1           [580.0, 580.0, 580.0]           [580, 580, 580]\n1419     1724.0       1           [579.0, 579.0, 579.0]           [579, 579, 579]\n1420     1727.0       1           [578.0, 578.0, 578.0]           [578, 578, 578]\n1421     1730.0       1           [577.0, 577.0, 577.0]           [577, 577, 577]\n1422     1733.0       1           [576.0, 576.0, 576.0]           [576, 576, 576]\n1423     1736.0       1           [575.0, 575.0, 575.0]           [575, 575, 575]\n1424     1739.0       1           [574.0, 574.0, 574.0]           [574, 574, 574]\n1425     1742.0       1           [573.0, 573.0, 573.0]           [573, 573, 573]\n1426     1745.0       1           [572.0, 572.0, 572.0]           [572, 572, 572]\n1427     1748.0       1           [571.0, 571.0, 571.0]           [571, 571, 571]\n1428     1751.0       1           [570.0, 570.0, 570.0]           [570, 570, 570]\n1429     1754.0       1           [569.0, 569.0, 569.0]           [569, 569, 569]\n1430     1757.0       1           [568.0, 568.0, 568.0]           [568, 568, 568]\n1431     1761.0       1           [567.0, 567.0, 567.0]           [567, 567, 567]\n1432     1764.0       1           [566.0, 566.0, 566.0]           [566, 566, 566]\n1433     1767.0       1           [565.0, 565.0, 565.0]           [565, 565, 565]\n1434     1770.0       1           [564.0, 564.0, 564.0]           [564, 564, 564]\n1435     1773.0       1           [563.0, 563.0, 563.0]           [563, 563, 563]\n1436     1776.0       1           [562.0, 562.0, 562.0]           [562, 562, 562]\n1437     1779.0       1           [561.0, 561.0, 561.0]           [561, 561, 561]\n1438     1783.0       1           [560.0, 560.0, 560.0]           [560, 560, 560]\n1439     1786.0       1           [559.0, 559.0, 559.0]           [559, 559, 559]\n1440     1789.0       1           [558.0, 558.0, 558.0]           [558, 558, 558]\n1441     1792.0       1           [557.0, 557.0, 557.0]           [557, 557, 557]\n1442     1795.0       1           [556.0, 556.0, 556.0]           [556, 556, 556]\n1443     1799.0       1           [555.0, 555.0, 555.0]           [555, 555, 555]\n1444     1802.0       1           [554.0, 554.0, 554.0]           [554, 554, 554]\n1445     1805.0       1           [553.0, 553.0, 553.0]           [553, 553, 553]\n1446     1808.0       1           [552.0, 552.0, 552.0]           [552, 552, 552]\n1447     1812.0       1           [551.0, 551.0, 551.0]           [551, 551, 551]\n1448     1815.0       1           [550.0, 550.0, 550.0]           [550, 550, 550]\n1449     1818.0       1           [549.0, 549.0, 549.0]           [549, 549, 549]\n1450     1821.0       1           [548.0, 548.0, 548.0]           [548, 548, 548]\n1451     1825.0       1           [547.0, 547.0, 547.0]           [547, 547, 547]\n1452     1828.0       1           [546.0, 546.0, 546.0]           [546, 546, 546]\n1453     1832.0       1           [545.0, 545.0, 545.0]           [545, 545, 545]\n1454     1835.0       1           [544.0, 544.0, 544.0]           [544, 544, 544]\n1455     1838.0       1           [543.0, 543.0, 543.0]           [543, 543, 543]\n1456     1842.0       1           [542.0, 542.0, 542.0]           [542, 542, 542]\n1457     1845.0       1           [541.0, 541.0, 541.0]           [541, 541, 541]\n1458     1848.0       1           [540.0, 540.0, 540.0]           [540, 540, 540]\n1459     1852.0       1           [539.0, 539.0, 539.0]           [539, 539, 539]\n1460     1855.0       1           [538.0, 538.0, 538.0]           [538, 538, 538]\n1461     1859.0       1           [537.0, 537.0, 537.0]           [537, 537, 537]\n1462     1862.0       1           [536.0, 536.0, 536.0]           [536, 536, 536]\n1463     1866.0       1           [535.0, 535.0, 535.0]           [535, 535, 535]\n1464     1869.0       1           [534.0, 534.0, 534.0]           [534, 534, 534]\n1465     1873.0       1           [533.0, 533.0, 533.0]           [533, 533, 533]\n1466     1876.0       1           [532.0, 532.0, 532.0]           [532, 532, 532]\n1467     1880.0       1           [531.0, 531.0, 531.0]           [531, 531, 531]\n1468     1883.0       1           [530.0, 530.0, 530.0]           [530, 530, 530]\n1469     1887.0       1           [529.0, 529.0, 529.0]           [529, 529, 529]\n1470     1890.0       1           [528.0, 528.0, 528.0]           [528, 528, 528]\n1471     1894.0       1           [527.0, 527.0, 527.0]           [527, 527, 527]\n1472     1898.0       1           [526.0, 526.0, 526.0]           [526, 526, 526]\n1473     1901.0       1           [525.0, 525.0, 525.0]           [525, 525, 525]\n1474     1905.0       1           [524.0, 524.0, 524.0]           [524, 524, 524]\n1475     1908.0       1           [523.0, 523.0, 523.0]           [523, 523, 523]\n1476     1912.0       1           [522.0, 522.0, 522.0]           [522, 522, 522]\n1477     1916.0       1           [521.0, 521.0, 521.0]           [521, 521, 521]\n1478     1919.0       1           [520.0, 520.0, 520.0]           [520, 520, 520]\n1479     1923.0       1           [519.0, 519.0, 519.0]           [519, 519, 519]\n1480     1927.0       1           [518.0, 518.0, 518.0]           [518, 518, 518]\n1481     1931.0       1           [517.0, 517.0, 517.0]           [517, 517, 517]\n1482     1934.0       1           [516.0, 516.0, 516.0]           [516, 516, 516]\n1483     1938.0       1           [515.0, 515.0, 515.0]           [515, 515, 515]\n1484     1942.0       1           [514.0, 514.0, 514.0]           [514, 514, 514]\n1485     1946.0       1           [513.0, 513.0, 513.0]           [513, 513, 513]\n1486     1949.0       1           [512.0, 512.0, 512.0]           [512, 512, 512]\n1487     1953.0       1           [511.0, 511.0, 511.0]           [511, 511, 511]\n1488     1957.0       1           [510.0, 510.0, 510.0]           [510, 510, 510]\n1489     1961.0       1           [509.0, 509.0, 509.0]           [509, 509, 509]\n1490     1965.0       1           [508.0, 508.0, 508.0]           [508, 508, 508]\n1491     1969.0       1           [507.0, 507.0, 507.0]           [507, 507, 507]\n1492     1972.0       1           [506.0, 506.0, 506.0]           [506, 506, 506]\n1493     1976.0       1           [505.0, 505.0, 505.0]           [505, 505, 505]\n1494     1980.0       1           [504.0, 504.0, 504.0]           [504, 504, 504]\n1495     1984.0       1           [503.0, 503.0, 503.0]           [503, 503, 503]\n1496     1988.0       1           [502.0, 502.0, 502.0]           [502, 502, 502]\n1497     1992.0       1           [501.0, 501.0, 501.0]           [501, 501, 501]\n1498     1996.0       1           [500.0, 500.0, 500.0]           [500, 500, 500]\n1499     2000.0       1           [499.0, 499.0, 499.0]           [499, 499, 499]\n1500     2004.0       1           [498.0, 498.0, 498.0]           [498, 498, 498]\n1501     2008.0       1           [497.0, 497.0, 497.0]           [497, 497, 497]\n1502     2012.0       1           [496.0, 496.0, 496.0]           [496, 496, 496]\n1503     2016.0       1           [495.0, 495.0, 495.0]           [495, 495, 495]\n1504     2020.0       1           [494.0, 494.0, 494.0]           [494, 494, 494]\n1505     2024.0       1           [493.0, 493.0, 493.0]           [493, 493, 493]\n1506     2028.0       1           [492.0, 492.0, 492.0]           [492, 492, 492]\n1507     2033.0       1           [491.0, 491.0, 491.0]           [491, 491, 491]\n1508     2037.0       1           [490.0, 490.0, 490.0]           [490, 490, 490]\n1509     2041.0       1           [489.0, 489.0, 489.0]           [489, 489, 489]\n1510     2045.0       1           [488.0, 488.0, 488.0]           [488, 488, 488]\n1511     2049.0       1           [487.0, 487.0, 487.0]           [487, 487, 487]\n1512     2053.0       1           [486.0, 486.0, 486.0]           [486, 486, 486]\n1513     2058.0       1           [485.0, 485.0, 485.0]           [485, 485, 485]\n1514     2062.0       1           [484.0, 484.0, 484.0]           [484, 484, 484]\n1515     2066.0       1           [483.0, 483.0, 483.0]           [483, 483, 483]\n1516     2070.0       1           [482.0, 482.0, 482.0]           [482, 482, 482]\n1517     2075.0       1           [481.0, 481.0, 481.0]           [481, 481, 481]\n1518     2079.0       1           [480.0, 480.0, 480.0]           [480, 480, 480]\n1519     2083.0       1           [479.0, 479.0, 479.0]           [479, 479, 479]\n1520     2088.0       1           [478.0, 478.0, 478.0]           [478, 478, 478]\n1521     2092.0       1           [477.0, 477.0, 477.0]           [477, 477, 477]\n1522     2096.0       1           [476.0, 476.0, 476.0]           [476, 476, 476]\n1523     2101.0       1           [475.0, 475.0, 475.0]           [475, 475, 475]\n1524     2105.0       1           [474.0, 474.0, 474.0]           [474, 474, 474]\n1525     2110.0       1           [473.0, 473.0, 473.0]           [473, 473, 473]\n1526     2114.0       1           [472.0, 472.0, 472.0]           [472, 472, 472]\n1527     2119.0       1           [471.0, 471.0, 471.0]           [471, 471, 471]\n1528     2123.0       1           [470.0, 470.0, 470.0]           [470, 470, 470]\n1529     2128.0       1           [469.0, 469.0, 469.0]           [469, 469, 469]\n1530     2132.0       1           [468.0, 468.0, 468.0]           [468, 468, 468]\n1531     2137.0       1           [467.0, 467.0, 467.0]           [467, 467, 467]\n1532     2141.0       1           [466.0, 466.0, 466.0]           [466, 466, 466]\n1533     2146.0       1           [465.0, 465.0, 465.0]           [465, 465, 465]\n1534     2151.0       1           [464.0, 464.0, 464.0]           [464, 464, 464]\n1535     2155.0       1           [463.0, 463.0, 463.0]           [463, 463, 463]\n1536     2160.0       1           [462.0, 462.0, 462.0]           [462, 462, 462]\n1537     2165.0       1           [461.0, 461.0, 461.0]           [461, 461, 461]\n1538     2169.0       1           [460.0, 460.0, 460.0]           [460, 460, 460]\n1539     2174.0       1           [459.0, 459.0, 459.0]           [459, 459, 459]\n1540     2179.0       1           [458.0, 458.0, 458.0]           [458, 458, 458]\n1541     2183.0       1           [457.0, 457.0, 457.0]           [457, 457, 457]\n1542     2188.0       1           [456.0, 456.0, 456.0]           [456, 456, 456]\n1543     2193.0       1           [455.0, 455.0, 455.0]           [455, 455, 455]\n1544     2198.0       1           [454.0, 454.0, 454.0]           [454, 454, 454]\n1545     2203.0       1           [453.0, 453.0, 453.0]           [453, 453, 453]\n1546     2208.0       1           [452.0, 452.0, 452.0]           [452, 452, 452]\n1547     2212.0       1           [451.0, 451.0, 451.0]           [451, 451, 451]\n1548     2217.0       1           [450.0, 450.0, 450.0]           [450, 450, 450]\n1549     2222.0       1           [449.0, 449.0, 449.0]           [449, 449, 449]\n1550     2227.0       1           [448.0, 448.0, 448.0]           [448, 448, 448]\n1551     2232.0       1           [447.0, 447.0, 447.0]           [447, 447, 447]\n1552     2237.0       1           [446.0, 446.0, 446.0]           [446, 446, 446]\n1553     2242.0       1           [445.0, 445.0, 445.0]           [445, 445, 445]\n1554     2247.0       1           [444.0, 444.0, 444.0]           [444, 444, 444]\n1555     2252.0       1           [443.0, 443.0, 443.0]           [443, 443, 443]\n1556     2257.0       1           [442.0, 442.0, 442.0]           [442, 442, 442]\n1557     2262.0       1           [441.0, 441.0, 441.0]           [441, 441, 441]\n1558     2268.0       1           [440.0, 440.0, 440.0]           [440, 440, 440]\n1559     2273.0       1           [439.0, 439.0, 439.0]           [439, 439, 439]\n1560     2278.0       1           [438.0, 438.0, 438.0]           [438, 438, 438]\n1561     2283.0       1           [437.0, 437.0, 437.0]           [437, 437, 437]\n1562     2288.0       1           [436.0, 436.0, 436.0]           [436, 436, 436]\n1563     2294.0       1           [435.0, 435.0, 435.0]           [435, 435, 435]\n1564     2299.0       1           [434.0, 434.0, 434.0]           [434, 434, 434]\n1565     2304.0       1           [433.0, 433.0, 433.0]           [433, 433, 433]\n1566     2309.0       1           [432.0, 432.0, 432.0]           [432, 432, 432]\n1567     2315.0       1           [431.0, 431.0, 431.0]           [431, 431, 431]\n1568     2320.0       1           [430.0, 430.0, 430.0]           [430, 430, 430]\n1569     2326.0       1           [429.0, 429.0, 429.0]           [429, 429, 429]\n1570     2331.0       1           [428.0, 428.0, 428.0]           [428, 428, 428]\n1571     2336.0       1           [427.0, 427.0, 427.0]           [427, 427, 427]\n1572     2342.0       1           [426.0, 426.0, 426.0]           [426, 426, 426]\n1573     2347.0       1           [425.0, 425.0, 425.0]           [425, 425, 425]\n1574     2353.0       1           [424.0, 424.0, 424.0]           [424, 424, 424]\n1575     2358.0       1           [423.0, 423.0, 423.0]           [423, 423, 423]\n1576     2364.0       1           [422.0, 422.0, 422.0]           [422, 422, 422]\n1577     2370.0       1           [421.0, 421.0, 421.0]           [421, 421, 421]\n1578     2375.0       1           [420.0, 420.0, 420.0]           [420, 420, 420]\n1579     2381.0       1           [419.0, 419.0, 419.0]           [419, 419, 419]\n1580     2387.0       1           [418.0, 418.0, 418.0]           [418, 418, 418]\n1581     2392.0       1           [417.0, 417.0, 417.0]           [417, 417, 417]\n1582     2398.0       1           [416.0, 416.0, 416.0]           [416, 416, 416]\n1583     2404.0       1           [415.0, 415.0, 415.0]           [415, 415, 415]\n1584     2410.0       1           [414.0, 414.0, 414.0]           [414, 414, 414]\n1585     2415.0       1           [413.0, 413.0, 413.0]           [413, 413, 413]\n1586     2421.0       1           [412.0, 412.0, 412.0]           [412, 412, 412]\n1587     2427.0       1           [411.0, 411.0, 411.0]           [411, 411, 411]\n1588     2433.0       1           [410.0, 410.0, 410.0]           [410, 410, 410]\n1589     2439.0       1           [409.0, 409.0, 409.0]           [409, 409, 409]\n1590     2445.0       1           [408.0, 408.0, 408.0]           [408, 408, 408]\n1591     2451.0       1           [407.0, 407.0, 407.0]           [407, 407, 407]\n1592     2457.0       1           [406.0, 406.0, 406.0]           [406, 406, 406]\n1593     2463.0       1           [405.0, 405.0, 405.0]           [405, 405, 405]\n1594     2469.0       1           [404.0, 404.0, 404.0]           [404, 404, 404]\n1595     2475.0       1           [403.0, 403.0, 403.0]           [403, 403, 403]\n1596     2481.0       1           [402.0, 402.0, 402.0]           [402, 402, 402]\n1597     2488.0       1           [401.0, 401.0, 401.0]           [401, 401, 401]\n1598     2494.0       1           [400.0, 400.0, 400.0]           [400, 400, 400]\n1599     2500.0       1           [399.0, 399.0, 399.0]           [399, 399, 399]\n1600     2506.0       1           [398.0, 398.0, 398.0]           [398, 398, 398]\n1601     2513.0       1           [397.0, 397.0, 397.0]           [397, 397, 397]\n1602     2519.0       1           [396.0, 396.0, 396.0]           [396, 396, 396]\n1603     2525.0       1           [395.0, 395.0, 395.0]           [395, 395, 395]\n1604     2532.0       1           [394.0, 394.0, 394.0]           [394, 394, 394]\n1605     2538.0       1           [393.0, 393.0, 393.0]           [393, 393, 393]\n1606     2545.0       1           [392.0, 392.0, 392.0]           [392, 392, 392]\n1607     2551.0       1           [391.0, 391.0, 391.0]           [391, 391, 391]\n1608     2558.0       1           [390.0, 390.0, 390.0]           [390, 390, 390]\n1609     2564.0       1           [389.0, 389.0, 389.0]           [389, 389, 389]\n1610     2571.0       1           [388.0, 388.0, 388.0]           [388, 388, 388]\n1611     2577.0       1           [387.0, 387.0, 387.0]           [387, 387, 387]\n1612     2584.0       1           [386.0, 386.0, 386.0]           [386, 386, 386]\n1613     2591.0       1           [385.0, 385.0, 385.0]           [385, 385, 385]\n1614     2597.0       1           [384.0, 384.0, 384.0]           [384, 384, 384]\n1615     2604.0       1           [383.0, 383.0, 383.0]           [383, 383, 383]\n1616     2611.0       1           [382.0, 382.0, 382.0]           [382, 382, 382]\n1617     2618.0       1           [381.0, 381.0, 381.0]           [381, 381, 381]\n1618     2625.0       1           [380.0, 380.0, 380.0]           [380, 380, 380]\n1619     2632.0       1           [379.0, 379.0, 379.0]           [379, 379, 379]\n1620     2639.0       1           [378.0, 378.0, 378.0]           [378, 378, 378]\n1621     2646.0       1           [377.0, 377.0, 377.0]           [377, 377, 377]\n1622     2653.0       1           [376.0, 376.0, 376.0]           [376, 376, 376]\n1623     2660.0       1           [375.0, 375.0, 375.0]           [375, 375, 375]\n1624     2667.0       1           [374.0, 374.0, 374.0]           [374, 374, 374]\n1625     2674.0       1           [373.0, 373.0, 373.0]           [373, 373, 373]\n1626     2681.0       1           [372.0, 372.0, 372.0]           [372, 372, 372]\n1627     2688.0       1           [371.0, 371.0, 371.0]           [371, 371, 371]\n1628     2695.0       1           [370.0, 370.0, 370.0]           [370, 370, 370]\n1629     2703.0       1           [369.0, 369.0, 369.0]           [369, 369, 369]\n1630     2710.0       1           [368.0, 368.0, 368.0]           [368, 368, 368]\n1631     2717.0       1           [367.0, 367.0, 367.0]           [367, 367, 367]\n1632     2725.0       1           [366.0, 366.0, 366.0]           [366, 366, 366]\n1633     2732.0       1           [365.0, 365.0, 365.0]           [365, 365, 365]\n1634     2740.0       1           [364.0, 364.0, 364.0]           [364, 364, 364]\n1635     2747.0       1           [363.0, 363.0, 363.0]           [363, 363, 363]\n1636     2755.0       1           [362.0, 362.0, 362.0]           [362, 362, 362]\n1637     2762.0       1           [361.0, 361.0, 361.0]           [361, 361, 361]\n1638     2770.0       1           [360.0, 360.0, 360.0]           [360, 360, 360]\n1639     2778.0       1           [359.0, 359.0, 359.0]           [359, 359, 359]\n1640     2786.0       1           [358.0, 358.0, 358.0]           [358, 358, 358]\n1641     2793.0       1           [357.0, 357.0, 357.0]           [357, 357, 357]\n1642     2801.0       1           [356.0, 356.0, 356.0]           [356, 356, 356]\n1643     2809.0       1           [355.0, 355.0, 355.0]           [355, 355, 355]\n1644     2817.0       1           [354.0, 354.0, 354.0]           [354, 354, 354]\n1645     2825.0       1           [353.0, 353.0, 353.0]           [353, 353, 353]\n1646     2833.0       1           [352.0, 352.0, 352.0]           [352, 352, 352]\n1647     2841.0       1           [351.0, 351.0, 351.0]           [351, 351, 351]\n1648     2849.0       1           [350.0, 350.0, 350.0]           [350, 350, 350]\n1649     2857.0       1           [349.0, 349.0, 349.0]           [349, 349, 349]\n1650     2865.0       1           [348.0, 348.0, 348.0]           [348, 348, 348]\n1651     2874.0       1           [347.0, 347.0, 347.0]           [347, 347, 347]\n1652     2882.0       1           [346.0, 346.0, 346.0]           [346, 346, 346]\n1653     2890.0       1           [345.0, 345.0, 345.0]           [345, 345, 345]\n1654     2899.0       1           [344.0, 344.0, 344.0]           [344, 344, 344]\n1655     2907.0       1           [343.0, 343.0, 343.0]           [343, 343, 343]\n1656     2915.0       1           [342.0, 342.0, 342.0]           [342, 342, 342]\n1657     2924.0       1           [341.0, 341.0, 341.0]           [341, 341, 341]\n1658     2933.0       1           [340.0, 340.0, 340.0]           [340, 340, 340]\n1659     2941.0       1           [339.0, 339.0, 339.0]           [339, 339, 339]\n1660     2950.0       1           [338.0, 338.0, 338.0]           [338, 338, 338]\n1661     2959.0       1           [337.0, 337.0, 337.0]           [337, 337, 337]\n1662     2967.0       1           [336.0, 336.0, 336.0]           [336, 336, 336]\n1663     2976.0       1           [335.0, 335.0, 335.0]           [335, 335, 335]\n1664     2985.0       1           [334.0, 334.0, 334.0]           [334, 334, 334]\n1665     2994.0       1           [333.0, 333.0, 333.0]           [333, 333, 333]\n1666     3003.0       1           [332.0, 332.0, 332.0]           [332, 332, 332]\n1667     3012.0       1           [331.0, 331.0, 331.0]           [331, 331, 331]\n1668     3021.0       1           [330.0, 330.0, 330.0]           [330, 330, 330]\n1669     3030.0       1           [329.0, 329.0, 329.0]           [329, 329, 329]\n1670     3040.0       1           [328.0, 328.0, 328.0]           [328, 328, 328]\n1671     3049.0       1           [327.0, 327.0, 327.0]           [327, 327, 327]\n1672     3058.0       1           [326.0, 326.0, 326.0]           [326, 326, 326]\n1673     3067.0       1           [325.0, 325.0, 325.0]           [325, 325, 325]\n1674     3077.0       1           [324.0, 324.0, 324.0]           [324, 324, 324]\n1675     3086.0       1           [323.0, 323.0, 323.0]           [323, 323, 323]\n1676     3096.0       1           [322.0, 322.0, 322.0]           [322, 322, 322]\n1677     3106.0       1           [321.0, 321.0, 321.0]           [321, 321, 321]\n1678     3115.0       1           [320.0, 320.0, 320.0]           [320, 320, 320]\n1679     3125.0       1           [319.0, 319.0, 319.0]           [319, 319, 319]\n1680     3135.0       1           [318.0, 318.0, 318.0]           [318, 318, 318]\n1681     3145.0       1           [317.0, 317.0, 317.0]           [317, 317, 317]\n1682     3155.0       1           [316.0, 316.0, 316.0]           [316, 316, 316]\n1683     3165.0       1           [315.0, 315.0, 315.0]           [315, 315, 315]\n1684     3175.0       1           [314.0, 314.0, 314.0]           [314, 314, 314]\n1685     3185.0       1           [313.0, 313.0, 313.0]           [313, 313, 313]\n1686     3195.0       1           [312.0, 312.0, 312.0]           [312, 312, 312]\n1687     3205.0       1           [311.0, 311.0, 311.0]           [311, 311, 311]\n1688     3215.0       1           [310.0, 310.0, 310.0]           [310, 310, 310]\n1689     3226.0       1           [309.0, 309.0, 309.0]           [309, 309, 309]\n1690     3236.0       1           [308.0, 308.0, 308.0]           [308, 308, 308]\n1691     3247.0       1           [307.0, 307.0, 307.0]           [307, 307, 307]\n1692     3257.0       1           [306.0, 306.0, 306.0]           [306, 306, 306]\n1693     3268.0       1           [305.0, 305.0, 305.0]           [305, 305, 305]\n1694     3279.0       1           [304.0, 304.0, 304.0]           [304, 304, 304]\n1695     3289.0       1           [303.0, 303.0, 303.0]           [303, 303, 303]\n1696     3300.0       1           [302.0, 302.0, 302.0]           [302, 302, 302]\n1697     3311.0       1           [301.0, 301.0, 301.0]           [301, 301, 301]\n1698     3322.0       1           [300.0, 300.0, 300.0]           [300, 300, 300]\n1699     3333.0       1           [299.0, 299.0, 299.0]           [299, 299, 299]\n1700     3344.0       1           [298.0, 298.0, 298.0]           [298, 298, 298]\n1701     3356.0       1           [297.0, 297.0, 297.0]           [297, 297, 297]\n1702     3367.0       1           [296.0, 296.0, 296.0]           [296, 296, 296]\n1703     3378.0       1           [295.0, 295.0, 295.0]           [295, 295, 295]\n1704     3390.0       1           [294.0, 294.0, 294.0]           [294, 294, 294]\n1705     3401.0       1           [293.0, 293.0, 293.0]           [293, 293, 293]\n1706     3413.0       1           [292.0, 292.0, 292.0]           [292, 292, 292]\n1707     3425.0       1           [291.0, 291.0, 291.0]           [291, 291, 291]\n1708     3436.0       1           [290.0, 290.0, 290.0]           [290, 290, 290]\n1709     3448.0       1           [289.0, 289.0, 289.0]           [289, 289, 289]\n1710     3460.0       1           [288.0, 288.0, 288.0]           [288, 288, 288]\n1711     3472.0       1           [287.0, 287.0, 287.0]           [287, 287, 287]\n1712     3484.0       1           [286.0, 286.0, 286.0]           [286, 286, 286]\n1713     3497.0       1           [285.0, 285.0, 285.0]           [285, 285, 285]\n1714     3509.0       1           [284.0, 284.0, 284.0]           [284, 284, 284]\n1715     3521.0       1           [283.0, 283.0, 283.0]           [283, 283, 283]\n1716     3534.0       1           [282.0, 282.0, 282.0]           [282, 282, 282]\n1717     3546.0       1           [281.0, 281.0, 281.0]           [281, 281, 281]\n1718     3559.0       1           [280.0, 280.0, 280.0]           [280, 280, 280]\n1719     3571.0       1           [279.0, 279.0, 279.0]           [279, 279, 279]\n1720     3584.0       1           [278.0, 278.0, 278.0]           [278, 278, 278]\n1721     3597.0       1           [277.0, 277.0, 277.0]           [277, 277, 277]\n1722     3610.0       1           [276.0, 276.0, 276.0]           [276, 276, 276]\n1723     3623.0       1           [275.0, 275.0, 275.0]           [275, 275, 275]\n1724     3636.0       1           [274.0, 274.0, 274.0]           [274, 274, 274]\n1725     3650.0       1           [273.0, 273.0, 273.0]           [273, 273, 273]\n1726     3663.0       1           [272.0, 272.0, 272.0]           [272, 272, 272]\n1727     3676.0       1           [271.0, 271.0, 271.0]           [271, 271, 271]\n1728     3690.0       1           [270.0, 270.0, 270.0]           [270, 270, 270]\n1729     3704.0       1           [269.0, 269.0, 269.0]           [269, 269, 269]\n1730     3717.0       1           [268.0, 268.0, 268.0]           [268, 268, 268]\n1731     3731.0       1           [267.0, 267.0, 267.0]           [267, 267, 267]\n1732     3745.0       1           [266.0, 266.0, 266.0]           [266, 266, 266]\n1733     3759.0       1           [265.0, 265.0, 265.0]           [265, 265, 265]\n1734     3774.0       1           [264.0, 264.0, 264.0]           [264, 264, 264]\n1735     3788.0       1           [263.0, 263.0, 263.0]           [263, 263, 263]\n1736     3802.0       1           [262.0, 262.0, 262.0]           [262, 262, 262]\n1737     3817.0       1           [261.0, 261.0, 261.0]           [261, 261, 261]\n1738     3831.0       1           [260.0, 260.0, 260.0]           [260, 260, 260]\n1739     3846.0       1           [259.0, 259.0, 259.0]           [259, 259, 259]\n1740     3861.0       1           [258.0, 258.0, 258.0]           [258, 258, 258]\n1741     3876.0       1           [257.0, 257.0, 257.0]           [257, 257, 257]\n1742     3891.0       1           [256.0, 256.0, 256.0]           [256, 256, 256]\n1743     3906.0       1           [255.0, 255.0, 255.0]           [255, 255, 255]\n1744     3922.0       1           [254.0, 254.0, 254.0]           [254, 254, 254]\n1745     3937.0       1           [253.0, 253.0, 253.0]           [253, 253, 253]\n1746     3953.0       1           [252.0, 252.0, 252.0]           [252, 252, 252]\n1747     3968.0       1           [251.0, 251.0, 251.0]           [251, 251, 251]\n1748     3984.0       1           [250.0, 250.0, 250.0]           [250, 250, 250]\n1749     4000.0       1           [249.0, 249.0, 249.0]           [249, 249, 249]\n1750     4016.0       1           [248.0, 248.0, 248.0]           [248, 248, 248]\n1751     4032.0       1           [247.0, 247.0, 247.0]           [247, 247, 247]\n1752     4049.0       1           [246.0, 246.0, 246.0]           [246, 246, 246]\n1753     4065.0       1           [245.0, 245.0, 245.0]           [245, 245, 245]\n1754     4082.0       1           [244.0, 244.0, 244.0]           [244, 244, 244]\n1755     4098.0       1           [243.0, 243.0, 243.0]           [243, 243, 243]\n1756     4115.0       1           [242.0, 242.0, 242.0]           [242, 242, 242]\n1757     4132.0       1           [241.0, 241.0, 241.0]           [241, 241, 241]\n1758     4149.0       1           [240.0, 240.0, 240.0]           [240, 240, 240]\n1759     4167.0       1           [239.0, 239.0, 239.0]           [239, 239, 239]\n1760     4184.0       1           [238.0, 238.0, 238.0]           [238, 238, 238]\n1761     4202.0       1           [237.0, 237.0, 237.0]           [237, 237, 237]\n1762     4219.0       1           [236.0, 236.0, 236.0]           [236, 236, 236]\n1763     4237.0       1           [235.0, 235.0, 235.0]           [235, 235, 235]\n1764     4255.0       1           [234.0, 234.0, 234.0]           [234, 234, 234]\n1765     4274.0       1           [233.0, 233.0, 233.0]           [233, 233, 233]\n1766     4292.0       1           [232.0, 232.0, 232.0]           [232, 232, 232]\n1767     4310.0       1           [231.0, 231.0, 231.0]           [231, 231, 231]\n1768     4329.0       1           [230.0, 230.0, 230.0]           [230, 230, 230]\n1769     4348.0       1           [229.0, 229.0, 229.0]           [229, 229, 229]\n1770     4367.0       1           [228.0, 228.0, 228.0]           [228, 228, 228]\n1771     4386.0       1           [227.0, 227.0, 227.0]           [227, 227, 227]\n1772     4405.0       1           [226.0, 226.0, 226.0]           [226, 226, 226]\n1773     4425.0       1           [225.0, 225.0, 225.0]           [225, 225, 225]\n1774     4444.0       1           [224.0, 224.0, 224.0]           [224, 224, 224]\n1775     4464.0       1           [223.0, 223.0, 223.0]           [223, 223, 223]\n1776     4484.0       1           [222.0, 222.0, 222.0]           [222, 222, 222]\n1777     4505.0       1           [221.0, 221.0, 221.0]           [221, 221, 221]\n1778     4525.0       1           [220.0, 220.0, 220.0]           [220, 220, 220]\n1779     4545.0       1           [219.0, 219.0, 219.0]           [219, 219, 219]\n1780     4566.0       1           [218.0, 218.0, 218.0]           [218, 218, 218]\n1781     4587.0       1           [217.0, 217.0, 217.0]           [217, 217, 217]\n1782     4608.0       1           [216.0, 216.0, 216.0]           [216, 216, 216]\n1783     4630.0       1           [215.0, 215.0, 215.0]           [215, 215, 215]\n1784     4651.0       1           [214.0, 214.0, 214.0]           [214, 214, 214]\n1785     4673.0       1           [213.0, 213.0, 213.0]           [213, 213, 213]\n1786     4695.0       1           [212.0, 212.0, 212.0]           [212, 212, 212]\n1787     4717.0       1           [211.0, 211.0, 211.0]           [211, 211, 211]\n1788     4739.0       1           [210.0, 210.0, 210.0]           [210, 210, 210]\n1789     4762.0       1           [209.0, 209.0, 209.0]           [209, 209, 209]\n1790     4785.0       1           [208.0, 208.0, 208.0]           [208, 208, 208]\n1791     4808.0       1           [207.0, 207.0, 207.0]           [207, 207, 207]\n1792     4831.0       1           [206.0, 206.0, 206.0]           [206, 206, 206]\n1793     4854.0       1           [205.0, 205.0, 205.0]           [205, 205, 205]\n1794     4878.0       1           [204.0, 204.0, 204.0]           [204, 204, 204]\n1795     4902.0       1           [203.0, 203.0, 203.0]           [203, 203, 203]\n1796     4926.0       1           [202.0, 202.0, 202.0]           [202, 202, 202]\n1797     4950.0       1           [201.0, 201.0, 201.0]           [201, 201, 201]\n1798     4975.0       1           [200.0, 200.0, 200.0]           [200, 200, 200]\n1799     5000.0       1           [199.0, 199.0, 199.0]           [199, 199, 199]\n1800     5025.0       1           [198.0, 198.0, 198.0]           [198, 198, 198]\n1801     5051.0       1           [197.0, 197.0, 197.0]           [197, 197, 197]\n1802     5076.0       1           [196.0, 196.0, 196.0]           [196, 196, 196]\n1803     5102.0       1           [195.0, 195.0, 195.0]           [195, 195, 195]\n1804     5128.0       1           [194.0, 194.0, 194.0]           [194, 194, 194]\n1805     5155.0       1           [193.0, 193.0, 193.0]           [193, 193, 193]\n1806     5181.0       1           [192.0, 192.0, 192.0]           [192, 192, 192]\n1807     5208.0       1           [191.0, 191.0, 191.0]           [191, 191, 191]\n1808     5236.0       1           [190.0, 190.0, 190.0]           [190, 190, 190]\n1809     5263.0       1           [189.0, 189.0, 189.0]           [189, 189, 189]\n1810     5291.0       1           [188.0, 188.0, 188.0]           [188, 188, 188]\n1811     5319.0       1           [187.0, 187.0, 187.0]           [187, 187, 187]\n1812     5348.0       1           [186.0, 186.0, 186.0]           [186, 186, 186]\n1813     5376.0       1           [185.0, 185.0, 185.0]           [185, 185, 185]\n1814     5405.0       1           [184.0, 184.0, 184.0]           [184, 184, 184]\n1815     5435.0       1           [183.0, 183.0, 183.0]           [183, 183, 183]\n1816     5464.0       1           [182.0, 182.0, 182.0]           [182, 182, 182]\n1817     5495.0       1           [181.0, 181.0, 181.0]           [181, 181, 181]\n1818     5525.0       1           [180.0, 180.0, 180.0]           [180, 180, 180]\n1819     5556.0       1           [179.0, 179.0, 179.0]           [179, 179, 179]\n1820     5587.0       1           [178.0, 178.0, 178.0]           [178, 178, 178]\n1821     5618.0       1           [177.0, 177.0, 177.0]           [177, 177, 177]\n1822     5650.0       1           [176.0, 176.0, 176.0]           [176, 176, 176]\n1823     5682.0       1           [175.0, 175.0, 175.0]           [175, 175, 175]\n1824     5714.0       1           [174.0, 174.0, 174.0]           [174, 174, 174]\n1825     5747.0       1           [173.0, 173.0, 173.0]           [173, 173, 173]\n1826     5780.0       1           [172.0, 172.0, 172.0]           [172, 172, 172]\n1827     5814.0       1           [171.0, 171.0, 171.0]           [171, 171, 171]\n1828     5848.0       1           [170.0, 170.0, 170.0]           [170, 170, 170]\n1829     5882.0       1           [169.0, 169.0, 169.0]           [169, 169, 169]\n1830     5917.0       1           [168.0, 168.0, 168.0]           [168, 168, 168]\n1831     5952.0       1           [167.0, 167.0, 167.0]           [167, 167, 167]\n1832     5988.0       1           [166.0, 166.0, 166.0]           [166, 166, 166]\n1833     6024.0       1           [165.0, 165.0, 165.0]           [165, 165, 165]\n1834     6061.0       1           [164.0, 164.0, 164.0]           [164, 164, 164]\n1835     6098.0       1           [163.0, 163.0, 163.0]           [163, 163, 163]\n1836     6135.0       1           [162.0, 162.0, 162.0]           [162, 162, 162]\n1837     6173.0       1           [161.0, 161.0, 161.0]           [161, 161, 161]\n1838     6211.0       1           [160.0, 160.0, 160.0]           [160, 160, 160]\n1839     6250.0       1           [159.0, 159.0, 159.0]           [159, 159, 159]\n1840     6289.0       1           [158.0, 158.0, 158.0]           [158, 158, 158]\n1841     6329.0       1           [157.0, 157.0, 157.0]           [157, 157, 157]\n1842     6369.0       1           [156.0, 156.0, 156.0]           [156, 156, 156]\n1843     6410.0       1           [155.0, 155.0, 155.0]           [155, 155, 155]\n1844     6452.0       1           [154.0, 154.0, 154.0]           [154, 154, 154]\n1845     6494.0       1           [153.0, 153.0, 153.0]           [153, 153, 153]\n1846     6536.0       1           [152.0, 152.0, 152.0]           [152, 152, 152]\n1847     6579.0       1           [151.0, 151.0, 151.0]           [151, 151, 151]\n1848     6623.0       1           [150.0, 150.0, 150.0]           [150, 150, 150]\n1849     6667.0       1           [149.0, 149.0, 149.0]           [149, 149, 149]\n1850     6711.0       1           [148.0, 148.0, 148.0]           [148, 148, 148]\n1851     6757.0       1           [147.0, 147.0, 147.0]           [147, 147, 147]\n1852     6803.0       1           [146.0, 146.0, 146.0]           [146, 146, 146]\n1853     6849.0       1           [145.0, 145.0, 145.0]           [145, 145, 145]\n1854     6897.0       1           [144.0, 144.0, 144.0]           [144, 144, 144]\n1855     6944.0       1           [143.0, 143.0, 143.0]           [143, 143, 143]\n1856     6993.0       1           [142.0, 142.0, 142.0]           [142, 142, 142]\n1857     7042.0       1           [141.0, 141.0, 141.0]           [141, 141, 141]\n1858     7092.0       1           [140.0, 140.0, 140.0]           [140, 140, 140]\n1859     7143.0       1           [139.0, 139.0, 139.0]           [139, 139, 139]\n1860     7194.0       1           [138.0, 138.0, 138.0]           [138, 138, 138]\n1861     7246.0       1           [137.0, 137.0, 137.0]           [137, 137, 137]\n1862     7299.0       1           [136.0, 136.0, 136.0]           [136, 136, 136]\n1863     7353.0       1           [135.0, 135.0, 135.0]           [135, 135, 135]\n1864     7407.0       1           [134.0, 134.0, 134.0]           [134, 134, 134]\n1865     7463.0       1           [133.0, 133.0, 133.0]           [133, 133, 133]\n1866     7519.0       1           [132.0, 132.0, 132.0]           [132, 132, 132]\n1867     7576.0       1           [131.0, 131.0, 131.0]           [131, 131, 131]\n1868     7634.0       1           [130.0, 130.0, 130.0]           [130, 130, 130]\n1869     7692.0       1           [129.0, 129.0, 129.0]           [129, 129, 129]\n1870     7752.0       1           [128.0, 128.0, 128.0]           [128, 128, 128]\n1871     7813.0       1           [127.0, 127.0, 127.0]           [127, 127, 127]\n1872     7874.0       1           [126.0, 126.0, 126.0]           [126, 126, 126]\n1873     7937.0       1           [125.0, 125.0, 125.0]           [125, 125, 125]\n1874     8000.0       1           [124.0, 124.0, 124.0]           [124, 124, 124]\n1875     8065.0       1           [123.0, 123.0, 123.0]           [123, 123, 123]\n1876     8130.0       1           [122.0, 122.0, 122.0]           [122, 122, 122]\n1877     8197.0       1           [121.0, 121.0, 121.0]           [121, 121, 121]\n1878     8264.0       1           [120.0, 120.0, 120.0]           [120, 120, 120]\n1879     8333.0       1           [119.0, 119.0, 119.0]           [119, 119, 119]\n1880     8403.0       1           [118.0, 118.0, 118.0]           [118, 118, 118]\n1881     8475.0       1           [117.0, 117.0, 117.0]           [117, 117, 117]\n1882     8547.0       1           [116.0, 116.0, 116.0]           [116, 116, 116]\n1883     8621.0       1           [115.0, 115.0, 115.0]           [115, 115, 115]\n1884     8696.0       1           [114.0, 114.0, 114.0]           [114, 114, 114]\n1885     8772.0       1           [113.0, 113.0, 113.0]           [113, 113, 113]\n1886     8850.0       1           [112.0, 112.0, 112.0]           [112, 112, 112]\n1887     8929.0       1           [111.0, 111.0, 111.0]           [111, 111, 111]\n1888     9009.0       1           [110.0, 110.0, 110.0]           [110, 110, 110]\n1889     9091.0       1           [109.0, 109.0, 109.0]           [109, 109, 109]\n1890     9174.0       1           [108.0, 108.0, 108.0]           [108, 108, 108]\n1891     9259.0       1           [107.0, 107.0, 107.0]           [107, 107, 107]\n1892     9346.0       1           [106.0, 106.0, 106.0]           [106, 106, 106]\n1893     9434.0       1           [105.0, 105.0, 105.0]           [105, 105, 105]\n1894     9524.0       1           [104.0, 104.0, 104.0]           [104, 104, 104]\n1895     9615.0       1           [103.0, 103.0, 103.0]           [103, 103, 103]\n1896     9709.0       1           [102.0, 102.0, 102.0]           [102, 102, 102]\n1897     9804.0       1           [101.0, 101.0, 101.0]           [101, 101, 101]\n1898     9901.0       1           [100.0, 100.0, 100.0]           [100, 100, 100]\n1899    10000.0       1              [99.0, 99.0, 99.0]              [99, 99, 99]\n1900    10101.0       1              [98.0, 98.0, 98.0]              [98, 98, 98]\n1901    10204.0       1              [97.0, 97.0, 97.0]              [97, 97, 97]\n1902    10309.0       1              [96.0, 96.0, 96.0]              [96, 96, 96]\n1903    10417.0       1              [95.0, 95.0, 95.0]              [95, 95, 95]\n1904    10526.0       1              [94.0, 94.0, 94.0]              [94, 94, 94]\n1905    10638.0       1              [93.0, 93.0, 93.0]              [93, 93, 93]\n1906    10753.0       1              [92.0, 92.0, 92.0]              [92, 92, 92]\n1907    10870.0       1              [91.0, 91.0, 91.0]              [91, 91, 91]\n1908    10989.0       1              [90.0, 90.0, 90.0]              [90, 90, 90]\n1909    11111.0       1              [89.0, 89.0, 89.0]              [89, 89, 89]\n1910    11236.0       1              [88.0, 88.0, 88.0]              [88, 88, 88]\n1911    11364.0       1              [87.0, 87.0, 87.0]              [87, 87, 87]\n1912    11494.0       1              [86.0, 86.0, 86.0]              [86, 86, 86]\n1913    11628.0       1              [85.0, 85.0, 85.0]              [85, 85, 85]\n1914    11765.0       1              [84.0, 84.0, 84.0]              [84, 84, 84]\n1915    11905.0       1              [83.0, 83.0, 83.0]              [83, 83, 83]\n1916    12048.0       1              [82.0, 82.0, 82.0]              [82, 82, 82]\n1917    12195.0       1              [81.0, 81.0, 81.0]              [81, 81, 81]\n1918    12346.0       1              [80.0, 80.0, 80.0]              [80, 80, 80]\n1919    12500.0       1              [79.0, 79.0, 79.0]              [79, 79, 79]\n1920    12658.0       1              [78.0, 78.0, 78.0]              [78, 78, 78]\n1921    12821.0       1              [77.0, 77.0, 77.0]              [77, 77, 77]\n1922    12987.0       1              [76.0, 76.0, 76.0]              [76, 76, 76]\n1923    13158.0       1              [75.0, 75.0, 75.0]              [75, 75, 75]\n1924    13333.0       1              [74.0, 74.0, 74.0]              [74, 74, 74]\n1925    13514.0       1              [73.0, 73.0, 73.0]              [73, 73, 73]\n1926    13699.0       1              [72.0, 72.0, 72.0]              [72, 72, 72]\n1927    13889.0       1              [71.0, 71.0, 71.0]              [71, 71, 71]\n1928    14085.0       1              [70.0, 70.0, 70.0]              [70, 70, 70]\n1929    14286.0       1              [69.0, 69.0, 69.0]              [69, 69, 69]\n1930    14493.0       1              [68.0, 68.0, 68.0]              [68, 68, 68]\n1931    14706.0       1              [67.0, 67.0, 67.0]              [67, 67, 67]\n1932    14925.0       1              [66.0, 66.0, 66.0]              [66, 66, 66]\n1933    15152.0       1              [65.0, 65.0, 65.0]              [65, 65, 65]\n1934    15385.0       1              [64.0, 64.0, 64.0]              [64, 64, 64]\n1935    15625.0       1              [63.0, 63.0, 63.0]              [63, 63, 63]\n1936    15873.0       1              [62.0, 62.0, 62.0]              [62, 62, 62]\n1937    16129.0       1              [61.0, 61.0, 61.0]              [61, 61, 61]\n1938    16393.0       1              [60.0, 60.0, 60.0]              [60, 60, 60]\n1939    16667.0       1              [59.0, 59.0, 59.0]              [59, 59, 59]\n1940    16949.0       1              [58.0, 58.0, 58.0]              [58, 58, 58]\n1941    17241.0       1              [57.0, 57.0, 57.0]              [57, 57, 57]\n1942    17544.0       1              [56.0, 56.0, 56.0]              [56, 56, 56]\n1943    17857.0       1              [55.0, 55.0, 55.0]              [55, 55, 55]\n1944    18182.0       1              [54.0, 54.0, 54.0]              [54, 54, 54]\n1945    18519.0       1              [53.0, 53.0, 53.0]              [53, 53, 53]\n1946    18868.0       1              [52.0, 52.0, 52.0]              [52, 52, 52]\n1947    19231.0       1              [51.0, 51.0, 51.0]              [51, 51, 51]\n1948    19608.0       1              [50.0, 50.0, 50.0]              [50, 50, 50]\n1949    20000.0       1              [49.0, 49.0, 49.0]              [49, 49, 49]\n1950    20408.0       1              [48.0, 48.0, 48.0]              [48, 48, 48]\n1951    20833.0       1              [47.0, 47.0, 47.0]              [47, 47, 47]\n1952    21277.0       1              [46.0, 46.0, 46.0]              [46, 46, 46]\n1953    21739.0       1              [45.0, 45.0, 45.0]              [45, 45, 45]\n1954    22222.0       1              [44.0, 44.0, 44.0]              [44, 44, 44]\n1955    22727.0       1              [43.0, 43.0, 43.0]              [43, 43, 43]\n1956    23256.0       1              [42.0, 42.0, 42.0]              [42, 42, 42]\n1957    23810.0       1              [41.0, 41.0, 41.0]              [41, 41, 41]\n1958    24390.0       1              [40.0, 40.0, 40.0]              [40, 40, 40]\n1959    25000.0       1              [39.0, 39.0, 39.0]              [39, 39, 39]\n1960    25641.0       1              [38.0, 38.0, 38.0]              [38, 38, 38]\n1961    26316.0       1              [37.0, 37.0, 37.0]              [37, 37, 37]\n1962    27027.0       1              [36.0, 36.0, 36.0]              [36, 36, 36]\n1963    27778.0       1              [35.0, 35.0, 35.0]              [35, 35, 35]\n1964    28571.0       1              [34.0, 34.0, 34.0]              [34, 34, 34]\n1965    29412.0       1              [33.0, 33.0, 33.0]              [33, 33, 33]\n1966    30303.0       1              [32.0, 32.0, 32.0]              [32, 32, 32]\n1967    31250.0       1              [31.0, 31.0, 31.0]              [31, 31, 31]\n1968    32258.0       1              [30.0, 30.0, 30.0]              [30, 30, 30]\n1969    33333.0       1              [29.0, 29.0, 29.0]              [29, 29, 29]\n1970    34483.0       1              [28.0, 28.0, 28.0]              [28, 28, 28]\n1971    35714.0       1              [27.0, 27.0, 27.0]              [27, 27, 27]\n1972    37037.0       1              [26.0, 26.0, 26.0]              [26, 26, 26]\n1973    38462.0       1              [25.0, 25.0, 25.0]              [25, 25, 25]\n1974    40000.0       1              [24.0, 24.0, 24.0]              [24, 24, 24]\n1975    41667.0       1              [23.0, 23.0, 23.0]              [23, 23, 23]\n1976    43478.0       1              [22.0, 22.0, 22.0]              [22, 22, 22]\n1977    45455.0       1              [21.0, 21.0, 21.0]              [21, 21, 21]\n1978    47619.0       1              [20.0, 20.0, 20.0]              [20, 20, 20]\n1979    50000.0       1              [19.0, 19.0, 19.0]              [19, 19, 19]\n1980    52632.0       1              [18.0, 18.0, 18.0]              [18, 18, 18]\n1981    55556.0       1              [17.0, 17.0, 17.0]              [17, 17, 17]\n1982    58824.0       1              [16.0, 16.0, 16.0]              [16, 16, 16]\n1983    62500.0       1              [15.0, 15.0, 15.0]              [15, 15, 15]\n1984    66667.0       1              [14.0, 14.0, 14.0]              [14, 14, 14]\n1985    71429.0       1              [13.0, 13.0, 13.0]              [13, 13, 13]\n1986    76923.0       1              [12.0, 12.0, 12.0]              [12, 12, 12]\n1987    83333.0       1              [11.0, 11.0, 11.0]              [11, 11, 11]\n1988    90909.0       1              [10.0, 10.0, 10.0]              [10, 10, 10]\n1989   100000.0       1                 [9.0, 9.0, 9.0]                 [9, 9, 9]\n1990   111111.0       1                 [8.0, 8.0, 8.0]                 [8, 8, 8]\n1991   125000.0       1                 [7.0, 7.0, 7.0]                 [7, 7, 7]\n1992   142857.0       1                 [6.0, 6.0, 6.0]                 [6, 6, 6]\n1993   166667.0       1                 [5.0, 5.0, 5.0]                 [5, 5, 5]\n1994   200000.0       1                 [4.0, 4.0, 4.0]                 [4, 4, 4]\n1995   250000.0       1                 [3.0, 3.0, 3.0]                 [3, 3, 3]\n1996   333333.0       1                 [2.0, 2.0, 2.0]                 [2, 2, 2]\n1997   500000.0       1                 [1.0, 1.0, 1.0]                 [1, 1, 1]\n1998  1000000.0       1                 [0.0, 0.0, 0.0]                 [0, 0, 0]",
                "source_shape": [
                    1999,
                    4
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00396_uuid_v7.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT '-- UUIDToNum --';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- UUIDToNum --'\n0   -- UUIDToNum --",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT UUIDToNum(toUUID('00112233-4455-6677-8899-aabbccddeeff'), 1) = UUIDStringToNum('00112233-4455-6677-8899-aabbccddeeff', 1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDToNum, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: UUIDStringToNum",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT UUIDToNum(toUUID('00112233-4455-6677-8899-aabbccddeeff'), 2) = UUIDStringToNum('00112233-4455-6677-8899-aabbccddeeff', 2);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDToNum, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: UUIDStringToNum",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT UUIDToNum();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDToNum, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: UUIDToNum",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\nSELECT UUIDToNum(toUUID('00112233-4455-6677-8899-aabbccddeeff'), 1, 2);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDToNum, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toUUID",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\nSELECT UUIDToNum(toUUID('00112233-4455-6677-8899-aabbccddeeff'), 3);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDToNum, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toUUID",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ARGUMENT_OUT_OF_BOUND }\nSELECT UUIDToNum('00112233-4455-6677-8899-aabbccddeeff', 1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDToNum, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: UUIDToNum",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT UUIDToNum(toUUID('00112233-4455-6677-8899-aabbccddeeff'), '1');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDToNum, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toUUID",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT UUIDToNum(toUUID('00112233-4455-6677-8899-aabbccddeeff'), materialize(1));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDToNum, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: materialize",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\n\nSELECT '-- UUIDv7toDateTime --';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- UUIDv7toDateTime --'\n0   -- UUIDv7toDateTime --",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDv7ToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toUUID",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT UUIDv7ToDateTime();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDv7ToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: UUIDv7ToDateTime",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\nSELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDv7ToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toUUID",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\nSELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York', 1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDv7ToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toUUID",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\nSELECT UUIDv7ToDateTime('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDv7ToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: UUIDv7ToDateTime",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\nSELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/NewYork');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDv7ToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toUUID",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError BAD_ARGUMENTS }\nSELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), materialize('America/New_York'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function UUIDv7ToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: materialize",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\n\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 39 (line 4, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00466_comments_in_keyword.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT 1 AS x ORDER/* hello */BY x;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x\n0  1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 1 AS x GROUP -- hello\nBY x;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x\n0  1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 1 AS x\nUNION/**/ALL\nSELECT 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x\n0  1\n1  1",
                "source_shape": [
                    2,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00510_materizlized_view_and_deduplication_zookeeper.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: zookeeper, no-ordinary-database, no-parallel\n-- Tag no-parallel: static UUID\n\nDROP TABLE IF EXISTS with_deduplication;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS without_deduplication;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS with_deduplication_mv;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS without_deduplication_mv;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE with_deduplication(x UInt32)\n    ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00510/with_deduplication', 'r1') ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE without_deduplication(x UInt32)\n    ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00510/without_deduplication', 'r1') ORDER BY x SETTINGS replicated_deduplication_window = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE MATERIALIZED VIEW with_deduplication_mv UUID '00000510-1000-4000-8000-000000000001'\n    ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{database}/test_00510/with_deduplication_mv', 'r1') ORDER BY dummy\n    AS SELECT 0 AS dummy, countState(x) AS cnt FROM with_deduplication;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 3, col 48): UUID '00000510-1000-4000-8000-000000000001'\n    ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{database}/test_00510/with_deduplication_mv', 'r1') . Expected one of: ENGINE, ON, storage definition, OpeningRoundBracket, Dot, token, TO, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MATERIALIZED\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE MATERIALIZED VIEW without_deduplication_mv UUID '00000510-1000-4000-8000-000000000002'\n    ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{database}/test_00510/without_deduplication_mv', 'r1') ORDER BY dummy\n    AS SELECT 0 AS dummy, countState(x) AS cnt FROM without_deduplication;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 52 (line 2, col 51): UUID '00000510-1000-4000-8000-000000000002'\n    ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{database}/test_00510/without_deduplication_mv', 'r1. Expected one of: ENGINE, ON, storage definition, OpeningRoundBracket, Dot, token, TO, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MATERIALIZED\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO with_deduplication VALUES (42);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.with_deduplication doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: with_deduplication",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO with_deduplication VALUES (42);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.with_deduplication doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: with_deduplication",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO with_deduplication VALUES (43);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.with_deduplication doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: with_deduplication",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO without_deduplication VALUES (42);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.without_deduplication doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: without_deduplication",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO without_deduplication VALUES (42);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.without_deduplication doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: without_deduplication",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO without_deduplication VALUES (43);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.without_deduplication doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: without_deduplication",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count() FROM with_deduplication;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.with_deduplication doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: with_deduplication",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM without_deduplication;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.without_deduplication doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: without_deduplication",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Implicit insert isn't deduplicated\nSELECT '';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  ''\n0   ",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT countMerge(cnt) FROM with_deduplication_mv;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.with_deduplication_mv doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: with_deduplication_mv",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT countMerge(cnt) FROM without_deduplication_mv;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.without_deduplication_mv doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: without_deduplication_mv",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Explicit insert is deduplicated\nALTER TABLE `.inner_id.00000510-1000-4000-8000-000000000001` DROP PARTITION ID 'all';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.`.inner_id.00000510-1000-4000-8000-000000000001` doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ID\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nALTER TABLE `.inner_id.00000510-1000-4000-8000-000000000002` DROP PARTITION ID 'all';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.`.inner_id.00000510-1000-4000-8000-000000000002` doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ID\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO `.inner_id.00000510-1000-4000-8000-000000000001` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.`.inner_id.00000510-1000-4000-8000-000000000001` doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: .inner_id.00000510-1000-4000-8000-000000000001",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO `.inner_id.00000510-1000-4000-8000-000000000001` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.`.inner_id.00000510-1000-4000-8000-000000000001` doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: .inner_id.00000510-1000-4000-8000-000000000001",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO `.inner_id.00000510-1000-4000-8000-000000000002` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.`.inner_id.00000510-1000-4000-8000-000000000002` doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: .inner_id.00000510-1000-4000-8000-000000000002",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO `.inner_id.00000510-1000-4000-8000-000000000002` SELECT 0 AS dummy, arrayReduce('countState', [toUInt32(42)]) AS cnt;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.`.inner_id.00000510-1000-4000-8000-000000000002` doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: .inner_id.00000510-1000-4000-8000-000000000002",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  ''\n0   ",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT countMerge(cnt) FROM with_deduplication_mv;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.with_deduplication_mv doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: with_deduplication_mv",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT countMerge(cnt) FROM without_deduplication_mv;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.without_deduplication_mv doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: without_deduplication_mv",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS with_deduplication;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS without_deduplication;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS with_deduplication_mv;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS without_deduplication_mv;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00511_get_size_of_enum.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT getSizeOfEnumType(CAST(1 AS Enum8('a' = 1, 'b' = 2)));",
                "source_success": true,
                "source_exception": "",
                "source_result": "   getSizeOfEnumType(CAST(1, 'Enum8(\\'a\\' = 1, \\'b\\' = 2)'))\n0                                                          2",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'a'\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT getSizeOfEnumType(CAST('b' AS Enum16('a' = 1, 'b' = 2, 'x' = 10)));",
                "source_success": true,
                "source_exception": "",
                "source_result": "   getSizeOfEnumType(CAST('b', 'Enum16(\\'a\\' = 1, \\'b\\' = 2, \\'x\\' = 10)'))\n0                                                                         3",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'a'\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00513_fractional_time_zones.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "WITH toDateTime(1509138000) + number * 300 AS t SELECT toHour(t, 'Asia/Kolkata') AS h, toString(toStartOfHour(t, 'Asia/Kolkata'), 'Asia/Kolkata') AS h_start FROM system.numbers LIMIT 12;",
                "source_success": true,
                "source_exception": "",
                "source_result": "    h              h_start\n0   2  2017-10-28 02:00:00\n1   2  2017-10-28 02:00:00\n2   2  2017-10-28 02:00:00\n3   2  2017-10-28 02:00:00\n4   2  2017-10-28 02:00:00\n5   2  2017-10-28 02:00:00\n6   3  2017-10-28 03:00:00\n7   3  2017-10-28 03:00:00\n8   3  2017-10-28 03:00:00\n9   3  2017-10-28 03:00:00\n10  3  2017-10-28 03:00:00\n11  3  2017-10-28 03:00:00",
                "source_shape": [
                    12,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"1509138000\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00515_enhanced_time_zones.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT addMonths(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 1, 'Asia/Kolkata');",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 1, 'Asia/Kolkata')\n0                                                              2017-12-05 05:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT addMonths(toDateTime('2017-11-05 10:37:47', 'Asia/Kolkata'), 1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(toDateTime('2017-11-05 10:37:47', 'Asia/Kolkata'), 1)\n0                                             2017-12-05 05:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT addMonths(toTimeZone(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata'), 1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(toTimeZone(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata'), 1)\n0                                                                          2017-12-05 05:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT addMonths(toDateTime('2017-11-05 08:07:47'), 1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(toDateTime('2017-11-05 08:07:47'), 1)\n0                             2017-12-05 07:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT addMonths(materialize(toDateTime('2017-11-05 08:07:47')), 1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(materialize(toDateTime('2017-11-05 08:07:47')), 1)\n0                                          2017-12-05 07:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT addMonths(toDateTime('2017-11-05 08:07:47'), materialize(1));",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(toDateTime('2017-11-05 08:07:47'), materialize(1))\n0                                          2017-12-05 07:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: materialize",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT addMonths(materialize(toDateTime('2017-11-05 08:07:47')), materialize(1));",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(materialize(toDateTime('2017-11-05 08:07:47')), materialize(1))\n0                                                       2017-12-05 07:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: materialize",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT addMonths(toDateTime('2017-11-05 08:07:47'), -1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(toDateTime('2017-11-05 08:07:47'), -1)\n0                              2017-10-05 06:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT addMonths(materialize(toDateTime('2017-11-05 08:07:47')), -1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(materialize(toDateTime('2017-11-05 08:07:47')), -1)\n0                                           2017-10-05 06:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT addMonths(toDateTime('2017-11-05 08:07:47'), materialize(-1));",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(toDateTime('2017-11-05 08:07:47'), materialize(-1))\n0                                           2017-10-05 06:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: materialize",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT addMonths(materialize(toDateTime('2017-11-05 08:07:47')), materialize(-1));",
                "source_success": true,
                "source_exception": "",
                "source_result": "  addMonths(materialize(toDateTime('2017-11-05 08:07:47')), materialize(-1))\n0                                                        2017-10-05 06:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: materialize",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT toUnixTimestamp('2017-11-05 08:07:47', 'Asia/Istanbul');",
                "source_success": true,
                "source_exception": "",
                "source_result": "   toUnixTimestamp('2017-11-05 08:07:47', 'Asia/Istanbul')\n0                                               1509858467",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toUnixTimestamp",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT toUnixTimestamp(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Istanbul');",
                "source_success": true,
                "source_exception": "",
                "source_result": "   toUnixTimestamp(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Istanbul')\n0                                                                            1509858467",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul');",
                "source_success": true,
                "source_exception": "",
                "source_result": "  toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul')\n0                                2017-11-05 05:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT toTimeZone(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata');",
                "source_success": true,
                "source_exception": "",
                "source_result": "  toTimeZone(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata')\n0                                                            2017-11-05 05:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT toString(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'));",
                "source_success": true,
                "source_exception": "",
                "source_result": "  toString(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'))\n0                                          2017-11-05 08:07:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT toString(toTimeZone(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata'));",
                "source_success": true,
                "source_exception": "",
                "source_result": "  toString(toTimeZone(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata'))\n0                                                                      2017-11-05 10:37:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT toString(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata');",
                "source_success": true,
                "source_exception": "",
                "source_result": "  toString(toDateTime('2017-11-05 08:07:47', 'Asia/Istanbul'), 'Asia/Kolkata')\n0                                                          2017-11-05 10:37:47",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- Test const timezone arguments --';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- Test const timezone arguments --'\n0   -- Test const timezone arguments --",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS tab;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE tab (val Int64, tz String) engine=Log;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO tab VALUES (42, 'Asia/Singapore') (43, 'Asia/Tokyo');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT val FROM tab WHERE now(tz) != toDateTime('2000-01-01 00:00:00') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\nSELECT val FROM tab WHERE now(tz) != toDateTime('2000-01-01 00:00:00') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT val FROM tab WHERE now64(9, tz) != toDateTime64('2000-01-01 00:00:00', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\nSELECT val FROM tab WHERE now64(9, tz) != toDateTime64('2000-01-01 00:00:00', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT val FROM tab WHERE nowInBlock(tz) != toDateTime('2000-01-01 00:00:00') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\nSELECT val FROM tab WHERE nowInBlock(tz) != toDateTime('2000-01-01 00:00:00') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT val FROM tab WHERE toTimeZone(toDateTime(val), tz) != toDateTime('2023-06-11 14:14:14') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\nSELECT val FROM tab WHERE toTimeZone(toDateTime(val), tz) != toDateTime('2023-06-11 14:14:14') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " \n\nSELECT val FROM tab WHERE fromUnixTimestamp64Milli(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\nSELECT val FROM tab WHERE fromUnixTimestamp64Milli(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT val FROM tab WHERE fromUnixTimestamp64Micro(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\nSELECT val FROM tab WHERE fromUnixTimestamp64Micro(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT val FROM tab WHERE fromUnixTimestamp64Nano(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\nSELECT val FROM tab WHERE fromUnixTimestamp64Nano(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT val FROM tab WHERE snowflakeToDateTime(val, tz) != toDateTime('2023-06-11 14:14:14') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\nSELECT val FROM tab WHERE snowflakeToDateTime(val, tz) != toDateTime('2023-06-11 14:14:14') ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT val FROM tab WHERE snowflakeToDateTime64(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\nSELECT val FROM tab WHERE snowflakeToDateTime64(val, tz) != toDateTime64('2023-06-11 14:14:14', 6) ORDER BY val SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_nonconst_timezone_arguments, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- test for a related bug:\n\nDROP TABLE tab;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: tab",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE tab (`country` LowCardinality(FixedString(7)) DEFAULT 'unknown', `city` LowCardinality(String) DEFAULT 'unknown', `region` LowCardinality(String) DEFAULT 'unknown', `continent` LowCardinality(FixedString(7)) DEFAULT 'unknown', `is_eu_country` Bool, `date` DateTime CODEC(DoubleDelta, LZ4), `viewer_date` DateTime ALIAS toTimezone(date, timezone), `device_browser` LowCardinality(String) DEFAULT 'unknown', `metro_code` LowCardinality(String) DEFAULT 'unknown', `domain` String DEFAULT 'unknown', `device_platform` LowCardinality(String) DEFAULT 'unknown', `device_type` LowCardinality(String) DEFAULT 'unknown', `device_vendor` LowCardinality(String) DEFAULT 'unknown', `ip` FixedString(39) DEFAULT 'unknown', `lat` Decimal(8, 6) CODEC(T64), `lng` Decimal(9, 6) CODEC(T64), `asset_id` String DEFAULT 'unknown', `is_personalized` Bool, `metric` String, `origin` String DEFAULT 'unknown', `product_id` UInt64 CODEC(T64), `referer` String DEFAULT 'unknown', `server_side` Int8 CODEC(T64), `third_party_id` String DEFAULT 'unknown', `partner_slug` LowCardinality(FixedString(10)) DEFAULT 'unknown', `user_agent` String DEFAULT 'unknown', `user_id` UUID, `zip` FixedString(10) DEFAULT 'unknown', `timezone` LowCardinality(String), `as_organization` LowCardinality(String) DEFAULT 'unknown', `content_cat` Array(String), `playback_method` LowCardinality(String) DEFAULT 'unknown', `store_id` LowCardinality(String) DEFAULT 'unknown', `store_url` String DEFAULT 'unknown', `timestamp` Nullable(DateTime), `ad_count` Int8 CODEC(T64), `ad_type` LowCardinality(FixedString(10)) DEFAULT 'unknown', `ad_categories` Array(FixedString(8)), `blocked_ad_categories` Array(FixedString(8)), `break_max_ad_length` Int8 CODEC(T64), `break_max_ads` Int8 CODEC(T64), `break_max_duration` Int8 CODEC(T64), `break_min_ad_length` Int8 CODEC(T64), `break_position` LowCardinality(FixedString(18)) DEFAULT 'unknown', `media_playhead` String DEFAULT 'unknown', `placement_type` Int8 CODEC(T64), `transaction_id` String, `universal_ad_id` Array(String), `client_ua` LowCardinality(String) DEFAULT 'unknown', `device_ip` FixedString(39) DEFAULT 'unknown', `device_ua` LowCardinality(String) DEFAULT 'unknown', `ifa` String, `ifa_type` LowCardinality(String) DEFAULT 'unknown', `vast_lat` Decimal(8, 6) CODEC(T64), `vast_long` Decimal(9, 6) CODEC(T64), `server_ua` String DEFAULT 'unknown', `app_bundle` String DEFAULT 'unknown', `page_url` String DEFAULT 'unknown', `api_framework` Array(UInt8), `click_type` LowCardinality(String), `extensions` Array(String), `media_mime` Array(String), `om_id_partner` LowCardinality(String) DEFAULT 'unknown', `player_capabilities` Array(FixedString(12)), `vast_versions` Array(UInt8), `verification_vendors` Array(String), `ad_play_head` String DEFAULT 'unknown', `ad_serving_id` String DEFAULT 'unknown', `asset_uri` String DEFAULT 'unknown', `content_id` String DEFAULT 'unknown', `content_uri` String DEFAULT 'unknown', `inventory_state` Array(FixedString(14)), `player_size` Array(UInt8), `player_state` Array(FixedString(12)), `pod_sequence` Int8 CODEC(T64), `click_position` Array(UInt32), `error_code` Int16 CODEC(T64), `error_reason` Int8 CODEC(T64), `gdpr_consent` String DEFAULT 'unknown', `limited_tracking` Bool, `regulations` String DEFAULT 'unknown', `content_category` Array(String), PROJECTION projection_TPAG_VAST_date (SELECT * ORDER BY toYYYYMMDD(date), metric, product_id, asset_id)) ENGINE = MergeTree ORDER BY (product_id, metric, asset_id, toYYYYMMDD(date));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 20 (line 3, col 18): (`country` LowCardinality(FixedString(7)) DEFAULT 'unknown', `city` LowCardinality(String) DEFAULT 'unknown', `region` LowCardinality(String) DEFAULT 'unknown',. Unmatched parentheses: (, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FixedString\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDETACH TABLE tab;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.tab doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"TABLE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET allow_nonconst_timezone_arguments = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- ATTACH TABLE doesn't check the default expressions\nATTACH TABLE tab;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 75 (line 5, col 2): FORMAT Native. Expected one of: AS, ENGINE, ON, storage definition, OpeningRoundBracket, Dot, token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"TABLE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE tab;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.tab doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: tab",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- CREATE TABLE does check the default expessions, so the following is expected to fail:\nCREATE TABLE tab (`country` LowCardinality(FixedString(7)) DEFAULT 'unknown', `city` LowCardinality(String) DEFAULT 'unknown', `region` LowCardinality(String) DEFAULT 'unknown', `continent` LowCardinality(FixedString(7)) DEFAULT 'unknown', `is_eu_country` Bool, `date` DateTime CODEC(DoubleDelta, LZ4), `viewer_date` DateTime ALIAS toTimezone(date, timezone), `device_browser` LowCardinality(String) DEFAULT 'unknown', `metro_code` LowCardinality(String) DEFAULT 'unknown', `domain` String DEFAULT 'unknown', `device_platform` LowCardinality(String) DEFAULT 'unknown', `device_type` LowCardinality(String) DEFAULT 'unknown', `device_vendor` LowCardinality(String) DEFAULT 'unknown', `ip` FixedString(39) DEFAULT 'unknown', `lat` Decimal(8, 6) CODEC(T64), `lng` Decimal(9, 6) CODEC(T64), `asset_id` String DEFAULT 'unknown', `is_personalized` Bool, `metric` String, `origin` String DEFAULT 'unknown', `product_id` UInt64 CODEC(T64), `referer` String DEFAULT 'unknown', `server_side` Int8 CODEC(T64), `third_party_id` String DEFAULT 'unknown', `partner_slug` LowCardinality(FixedString(10)) DEFAULT 'unknown', `user_agent` String DEFAULT 'unknown', `user_id` UUID, `zip` FixedString(10) DEFAULT 'unknown', `timezone` LowCardinality(String), `as_organization` LowCardinality(String) DEFAULT 'unknown', `content_cat` Array(String), `playback_method` LowCardinality(String) DEFAULT 'unknown', `store_id` LowCardinality(String) DEFAULT 'unknown', `store_url` String DEFAULT 'unknown', `timestamp` Nullable(DateTime), `ad_count` Int8 CODEC(T64), `ad_type` LowCardinality(FixedString(10)) DEFAULT 'unknown', `ad_categories` Array(FixedString(8)), `blocked_ad_categories` Array(FixedString(8)), `break_max_ad_length` Int8 CODEC(T64), `break_max_ads` Int8 CODEC(T64), `break_max_duration` Int8 CODEC(T64), `break_min_ad_length` Int8 CODEC(T64), `break_position` LowCardinality(FixedString(18)) DEFAULT 'unknown', `media_playhead` String DEFAULT 'unknown', `placement_type` Int8 CODEC(T64), `transaction_id` String, `universal_ad_id` Array(String), `client_ua` LowCardinality(String) DEFAULT 'unknown', `device_ip` FixedString(39) DEFAULT 'unknown', `device_ua` LowCardinality(String) DEFAULT 'unknown', `ifa` String, `ifa_type` LowCardinality(String) DEFAULT 'unknown', `vast_lat` Decimal(8, 6) CODEC(T64), `vast_long` Decimal(9, 6) CODEC(T64), `server_ua` String DEFAULT 'unknown', `app_bundle` String DEFAULT 'unknown', `page_url` String DEFAULT 'unknown', `api_framework` Array(UInt8), `click_type` LowCardinality(String), `extensions` Array(String), `media_mime` Array(String), `om_id_partner` LowCardinality(String) DEFAULT 'unknown', `player_capabilities` Array(FixedString(12)), `vast_versions` Array(UInt8), `verification_vendors` Array(String), `ad_play_head` String DEFAULT 'unknown', `ad_serving_id` String DEFAULT 'unknown', `asset_uri` String DEFAULT 'unknown', `content_id` String DEFAULT 'unknown', `content_uri` String DEFAULT 'unknown', `inventory_state` Array(FixedString(14)), `player_size` Array(UInt8), `player_state` Array(FixedString(12)), `pod_sequence` Int8 CODEC(T64), `click_position` Array(UInt32), `error_code` Int16 CODEC(T64), `error_reason` Int8 CODEC(T64), `gdpr_consent` String DEFAULT 'unknown', `limited_tracking` Bool, `regulations` String DEFAULT 'unknown', `content_category` Array(String), PROJECTION projection_TPAG_VAST_date (SELECT * ORDER BY toYYYYMMDD(date), metric, product_id, asset_id)) ENGINE = MergeTree ORDER BY (product_id, metric, asset_id, toYYYYMMDD(date));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 109 (line 4, col 18): (`country` LowCardinality(FixedString(7)) DEFAULT 'unknown', `city` LowCardinality(String) DEFAULT 'unknown', `region` LowCardinality(String) DEFAULT 'unknown',. Unmatched parentheses: (, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FixedString\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_COLUMN }\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 38 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00562_in_subquery_merge_tree.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS merge_tree_in_subqueries;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE merge_tree_in_subqueries (id UInt64, name String, num UInt64) ENGINE = MergeTree ORDER BY (id, name);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO merge_tree_in_subqueries VALUES(1, 'test1', 42);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO merge_tree_in_subqueries VALUES(2, 'test2', 8);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO merge_tree_in_subqueries VALUES(3, 'test3', 8);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO merge_tree_in_subqueries VALUES(4, 'test4', 1985);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO merge_tree_in_subqueries VALUES(5, 'test5', 0);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Index scans.\nSET force_primary_key = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 5, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM merge_tree_in_subqueries WHERE id IN (SELECT * FROM system.numbers LIMIT 0);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM merge_tree_in_subqueries WHERE id IN (SELECT * FROM system.numbers LIMIT 2, 3) ORDER BY id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   id   name   num\n0   2  test2     8\n1   3  test3     8\n2   4  test4  1985",
                "source_shape": [
                    3,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM merge_tree_in_subqueries WHERE name IN (SELECT 'test' || toString(number) FROM system.numbers LIMIT 2, 3) ORDER BY id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   id   name   num\n0   2  test2     8\n1   3  test3     8\n2   4  test4  1985",
                "source_shape": [
                    3,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT id AS id2, name AS value FROM merge_tree_in_subqueries WHERE (value, id2) IN (SELECT 'test' || toString(number), number FROM system.numbers LIMIT 2, 3) ORDER BY id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   id2  value\n0    2  test2\n1    3  test3\n2    4  test4",
                "source_shape": [
                    3,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Non-index scans.\nSET force_primary_key = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 5, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT id AS id2, name AS value FROM merge_tree_in_subqueries WHERE num IN (SELECT number FROM system.numbers LIMIT 10) ORDER BY id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   id2  value\n0    2  test2\n1    3  test3\n2    5  test5",
                "source_shape": [
                    3,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT id AS id2, name AS value FROM merge_tree_in_subqueries WHERE (id, num) IN (SELECT number, number + 6 FROM system.numbers LIMIT 10) ORDER BY id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   id2  value\n0    2  test2",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge_tree_in_subqueries",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS merge_tree_in_subqueries;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00563_complex_in_expression.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS test_00563;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nset allow_deprecated_syntax_for_merge_tree=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 49 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE test_00563 ( dt Date, site_id Int32, site_key String ) ENGINE = MergeTree(dt, (site_id, site_key, dt), 8192);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO test_00563 (dt,site_id, site_key) VALUES ('2018-1-29', 100, 'key');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_00563",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_00563 WHERE toInt32(site_id) IN (100);",
                "source_success": true,
                "source_exception": "",
                "source_result": "          dt  site_id site_key\n0 2018-01-29      100      key",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_00563",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_00563 WHERE toInt32(site_id) IN (100,101);",
                "source_success": true,
                "source_exception": "",
                "source_result": "          dt  site_id site_key\n0 2018-01-29      100      key",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_00563",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS test_00563;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS join_with_index;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE join_with_index (key UInt32, data UInt64) ENGINE = MergeTree ORDER BY key SETTINGS index_granularity=1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO join_with_index VALUES (1, 0), (2, 99);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: join_with_index",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT key + 1\nFROM join_with_index\nALL INNER JOIN\n(\n    SELECT\n        key,\n        data\n    FROM join_with_index\n    WHERE toUInt64(data) IN (0, 529335254087962442)\n) js2 USING (key);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   plus(key, 1)\n0             2",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ALL\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT _uniq, _uniq IN (0, 99)\nFROM join_with_index\nARRAY JOIN\n    [key, data] AS _uniq\nORDER BY _uniq;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   _uniq  in(_uniq, tuple(0, 99))\n0      0                        1\n1      1                        0\n2      2                        0\n3     99                        1",
                "source_shape": [
                    4,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: join_with_index",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS join_with_index;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00578_merge_table_and_table_virtual_column.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS numbers1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS numbers2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS numbers3;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS numbers4;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS numbers5;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE numbers1 ENGINE = StripeLog AS SELECT number FROM numbers(1000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ENGINE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE numbers2 ENGINE = TinyLog AS SELECT number FROM numbers(1000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ENGINE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE numbers3 ENGINE = Log AS SELECT number FROM numbers(1000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ENGINE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE numbers4 ENGINE = Memory AS SELECT number FROM numbers(1000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ENGINE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE numbers5 ENGINE = MergeTree ORDER BY number AS SELECT number FROM numbers(1000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ENGINE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count() FROM merge(currentDatabase(), '^numbers\\\\d+$');",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0     5000",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT DISTINCT count() FROM merge(currentDatabase(), '^numbers\\\\d+$') GROUP BY number;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        5",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET optimize_aggregation_in_order = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 42 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- FIXME : in order may happen before filter push down\n\nSET max_rows_to_read = 1000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 87 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_threads = 'auto';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 4, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM merge(currentDatabase(), '^numbers\\\\d+$') WHERE _table = 'numbers1';",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0     1000",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_threads = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 24 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM merge(currentDatabase(), '^numbers\\\\d+$') WHERE _table = 'numbers2';",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0     1000",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_threads = 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM merge(currentDatabase(), '^numbers\\\\d+$') WHERE _table = 'numbers3';",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0     1000",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_rows_to_read = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_threads = 'auto';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 4, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM merge(currentDatabase(), '^numbers\\\\d+$') WHERE _table = 'non_existing';",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        0",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_threads = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 24 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM merge(currentDatabase(), '^numbers\\\\d+$') WHERE _table = 'non_existing';",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        0",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_threads = 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM merge(currentDatabase(), '^numbers\\\\d+$') WHERE _table = 'non_existing';",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        0",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE numbers1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE numbers2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers2",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE numbers3;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers3",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE numbers4;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers4",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE numbers5;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers5",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00622_select_in_parens.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "(SELECT 1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   1\n0  1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n(SELECT 2) UNION ALL (SELECT 2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   2\n0  2\n1  2",
                "source_shape": [
                    2,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n((SELECT (((3)))));",
                "source_success": true,
                "source_exception": "",
                "source_result": "   3\n0  3",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00624_length_utf8.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT '\u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440' AS x, lengthUTF8(x) AS y;",
                "source_success": true,
                "source_exception": "",
                "source_result": "           x  y\n0  \u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440  9",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: x",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, lengthUTF8(x) AS y FROM (SELECT arrayJoin(['', 'h', 'hello', 'hello hello hello', '\u043f', '\u043f\u0440', '\u043f\u0440\u0438\u0432\u0435\u0442', '\u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442', '\u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442', '\u4f60\u597d', '\u4f60\u597d \u4f60\u597d', '\u4f60\u597d\u4f60\u597d\u4f60\u597d', '\u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\u597d', '\u4f60\u597d \u4f60\u597d \u4f60\u597d \u4f60\u597d \u4f60\u597d']) AS x);",
                "source_success": true,
                "source_exception": "",
                "source_result": "                       x   y\n0                          0\n1                      h   1\n2                  hello   5\n3      hello hello hello  17\n4                      \u043f   1\n5                     \u043f\u0440   2\n6                 \u043f\u0440\u0438\u0432\u0435\u0442   6\n7          \u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442  13\n8   \u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442  20\n9                     \u4f60\u597d   2\n10                 \u4f60\u597d \u4f60\u597d   5\n11                \u4f60\u597d\u4f60\u597d\u4f60\u597d   6\n12              \u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\u597d   8\n13        \u4f60\u597d \u4f60\u597d \u4f60\u597d \u4f60\u597d \u4f60\u597d  14",
                "source_shape": [
                    14,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: '', 'h', 'hello', 'hello hello hello', '\u043f', '\u043f\u0440', '\u043f\u0440\u0438\u0432\u0435\u0442', '\u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442', '\u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442', '\u4f60\u597d', '\u4f60\u597d \u4f60\u597d', '\u4f60\u597d\u4f60\u597d\u4f60\u597d', '\u4f60\u597d\u4f60\u597d\u4f60\u597d\u4f60\u597d', '\u4f60\u597d \u4f60\u597d \u4f60\u597d \u4f60\u597d \u4f60\u597d'",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00653_monotonic_integer_cast.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "drop table if exists `table_00653`;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ncreate table `table_00653` (val Int32) engine = MergeTree order by val;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into `table_00653` values (-2), (0), (2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_00653",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from `table_00653` where toUInt64(val) == 0;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_00653",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table table_00653;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_00653",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00709_virtual_column_partition_id.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS partition_id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nset allow_deprecated_syntax_for_merge_tree=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 49 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE IF NOT EXISTS partition_id (d Date DEFAULT '2000-01-01', x UInt64) ENGINE = MergeTree(d, x, 5);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO partition_id VALUES (100, 1), (200, 2), (300, 3);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partition_id",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT _partition_id FROM partition_id ORDER BY x;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  _partition_id\n0        197004\n1        197007\n2        197010",
                "source_shape": [
                    3,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partition_id",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS partition_id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00725_join_on_bug_4.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "drop table if exists t_00725_4;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table if exists s_00725_4;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ncreate table t_00725_4(a Int64, b Int64, c String) engine = TinyLog;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into t_00725_4 values(1,1,'a'),(2,2,'b');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_00725_4",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ncreate table s_00725_4(a Int64, b Int64, c String) engine = TinyLog;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into s_00725_4 values(1,1,'a');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: s_00725_4",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nselect t_00725_4.* from t_00725_4 all left join s_00725_4 on (s_00725_4.a = t_00725_4.a and s_00725_4.b = t_00725_4.b) where s_00725_4.a = 0 and s_00725_4.b = 0;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   a  b  c\n0  2  2  b",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"all\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ndrop table if exists t_00725_4;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table if exists s_00725_4;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00725_memory_tracking.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-replicated-database\n\nSELECT least(value, 0) FROM system.metrics WHERE metric = 'MemoryTracking';",
                "source_success": true,
                "source_exception": "",
                "source_result": "   least(value, 0)\n0                0",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.metrics",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT length(range(100000000));",
                "source_success": true,
                "source_exception": "",
                "source_result": "   length(range(100000000))\n0                 100000000",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: range",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT least(value, 0) FROM system.metrics WHERE metric = 'MemoryTracking';",
                "source_success": true,
                "source_exception": "",
                "source_result": "   least(value, 0)\n0                0",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.metrics",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00732_quorum_insert_lost_part_and_alive_part_zookeeper_long.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: long, zookeeper, no-replicated-database\n-- Tag no-replicated-database: Fails due to additional replicas or shards\n\nSET send_logs_level = 'fatal';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 156 (line 5, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS quorum1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS quorum2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_lost_alive', '1') ORDER BY x PARTITION BY y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_lost_alive', '2') ORDER BY x PARTITION BY y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET insert_quorum=2, insert_quorum_parallel=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET select_sequential_consistency=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 39 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO quorum1 VALUES (1, '2018-11-15');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO quorum1 VALUES (2, '2018-11-15');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO quorum1 VALUES (3, '2018-12-16');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET insert_quorum_timeout=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM STOP FETCHES quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO quorum2 VALUES (4, toDate('2018-12-16'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 319 }\n\nSELECT x FROM quorum1 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum2 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET select_sequential_consistency=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 40 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x FROM quorum2 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET select_sequential_consistency=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 40 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM START FETCHES quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 33 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM SYNC REPLICA quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x FROM quorum1 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum2 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE quorum2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00732_quorum_insert_lost_part_zookeeper_long.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: long, zookeeper, no-replicated-database\n-- Tag no-replicated-database: Fails due to additional replicas or shards\n\nSET send_logs_level = 'fatal';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 156 (line 5, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS quorum1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS quorum2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_lost', '1') ORDER BY x PARTITION BY y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_lost', '2') ORDER BY x PARTITION BY y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET insert_quorum=2, insert_quorum_parallel=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET select_sequential_consistency=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 39 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET insert_quorum_timeout=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM STOP FETCHES quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO quorum2 VALUES (1, '2018-11-15');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 319 }\n\nSELECT count(*) FROM quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count(*) FROM quorum2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET select_sequential_consistency=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 40 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x FROM quorum2 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET select_sequential_consistency=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 39 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET insert_quorum_timeout=100;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 34 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM START FETCHES quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 33 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM SYNC REPLICA quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x FROM quorum1 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum2 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE quorum2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00755_avg_value_size_hint_passing.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS size_hint;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE size_hint (s Array(String)) ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 1000, index_granularity_bytes = '10Mi';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting index_granularity_bytes for storage MergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_block_size = 1000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET max_memory_usage = 1000000000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 37 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO size_hint SELECT arrayMap(x -> 'Hello', range(1000)) FROM numbers(10000);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.size_hint doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: size_hint",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_memory_usage = 100000000, max_threads = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count(), sum(length(s)) FROM size_hint;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.size_hint doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: size_hint",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE size_hint;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.size_hint doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: size_hint",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00760_insert_json_with_defaults.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-fasttest\n\nSET input_format_defaults_for_omitted_fields=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 71 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS defaults;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE defaults\n(\n    x UInt32,\n    y UInt32,\n    a DEFAULT x + y,\n    b Float32 DEFAULT round(log(1 + x + y), 5),\n    c UInt32 DEFAULT 42,\n    e MATERIALIZED x + y,\n    f ALIAS x + y\n) ENGINE = MergeTree ORDER BY x;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"+\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO defaults FORMAT JSONEachRow {\"x\":1, \"y\":1};",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO defaults (x, y) SELECT x, y FROM defaults LIMIT 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: defaults",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO defaults FORMAT JSONEachRow {\"x\":2, \"y\":2, \"c\":2};",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO defaults FORMAT JSONEachRow {\"x\":3, \"y\":3, \"a\":3, \"b\":3, \"c\":3};",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO defaults FORMAT JSONEachRow {\"x\":4} {\"y\":5, \"c\":5} {\"a\":6, \"b\":6, \"c\":6};",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM defaults ORDER BY (x, y);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x  y  a        b   c\n0  0  0  6  6.00000   6\n1  0  5  0  0.00000   5\n2  1  1  2  1.09861  42\n3  1  1  0  0.00000   0\n4  2  2  0  0.00000   2\n5  3  3  3  3.00000   3\n6  4  0  0  0.00000   0",
                "source_shape": [
                    7,
                    5
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: defaults",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE defaults ADD COLUMN n Nested(a UInt64, b String);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: defaults",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO defaults FORMAT JSONEachRow {\"x\":7, \"y\":7, \"n.a\":[1,2], \"n.b\":[\"a\",\"b\"]};",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM defaults WHERE x = 7 FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 44 (line 2, col 43): JSONEachRow\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE defaults ADD COLUMN n.c Array(UInt8) DEFAULT arrayMap(x -> 0, n.a) AFTER n.a;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: defaults",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO defaults FORMAT JSONEachRow {\"x\":8, \"y\":8, \"n.a\":[3,4], \"n.b\":[\"c\",\"d\"]};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 190, e.displayText() = DB::Exception: Elements 'n.a' and 'n.c' of Nested data structure 'n' (Array columns) have different array sizes., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO defaults FORMAT JSONEachRow {\"x\":9, \"y\":9};",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM defaults WHERE x > 7 ORDER BY x FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 55 (line 2, col 54): JSONEachRow\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE defaults;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: defaults",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00794_materialized_view_with_column_defaults.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS table_view;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS source_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nset allow_deprecated_syntax_for_merge_tree=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 49 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE source_table (\n  date Date,\n  datetime DateTime,\n  zoneId UInt64,\n  test1 ALIAS zoneId == 1,\n  test2 DEFAULT zoneId * 3,\n  test3 MATERIALIZED zoneId * 5\n) ENGINE = MergeTree(date, (date, zoneId), 8192);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"==\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE MATERIALIZED VIEW table_view\nENGINE = MergeTree(date, (date, zoneId), 8192)\nAS SELECT\n  date,\n  zoneId,\n  test1,\n  test2,\n  test3\nFROM source_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MATERIALIZED\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO source_table (date, datetime, zoneId) VALUES ('2018-12-10', '2018-12-10 23:59:59', 1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column test1 in block. There are only columns: date, datetime, zoneId, test2, test3: while pushing to view default.table_view, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: source_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * from table_view;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_view",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS table_view;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS source_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00804_rollup_with_having.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS rollup_having;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE rollup_having (\n  a Nullable(String),\n  b Nullable(String)\n) ENGINE = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO rollup_having VALUES (NULL, NULL);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: rollup_having",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO rollup_having VALUES ('a', NULL);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: rollup_having",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO rollup_having VALUES ('a', 'b');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: rollup_having",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT a, b, count(*) as count FROM rollup_having GROUP BY a, b WITH ROLLUP HAVING a IS NOT NULL ORDER BY a, b, count;",
                "source_success": true,
                "source_exception": "",
                "source_result": "      a     b  count\n0     a     b      1\n1     a  <NA>      1\n2     a  <NA>      2\n3  <NA>  <NA>      1\n4  <NA>  <NA>      1\n5  <NA>  <NA>      3",
                "source_shape": [
                    6,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT a, b, count(*) as count FROM rollup_having GROUP BY a, b WITH ROLLUP HAVING a IS NOT NULL and b IS NOT NULL ORDER BY a, b, count;",
                "source_success": true,
                "source_exception": "",
                "source_result": "      a     b  count\n0     a     b      1\n1     a  <NA>      1\n2     a  <NA>      2\n3  <NA>  <NA>      1\n4  <NA>  <NA>      1\n5  <NA>  <NA>      3",
                "source_shape": [
                    6,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE rollup_having;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: rollup_having",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00829_bitmap64_function.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS bitmap_test;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE bitmap_test(pickup_date Date, city_id UInt32, uid UInt64)ENGINE = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO bitmap_test SELECT '2019-01-01', 1, 4294967295 + number FROM numbers(1,100);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_test",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO bitmap_test SELECT '2019-01-02', 1, 4294967295 + number FROM numbers(90,110);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_test",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO bitmap_test SELECT '2019-01-03', 2, 4294967295 + number FROM numbers(1,210);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_test",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nDROP TABLE IF EXISTS bitmap_state_test;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE bitmap_state_test\n(\n\tpickup_date Date,\n\tcity_id UInt32,\n    uv AggregateFunction( groupBitmap, UInt64 )\n)\nENGINE = AggregatingMergeTree() PARTITION BY toYYYYMM(pickup_date) ORDER BY (pickup_date, city_id);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 63, e.displayText() = DB::Exception: Unknown aggregate function groupBitmap, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"groupBitmap\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nINSERT INTO bitmap_state_test SELECT\n    pickup_date,\n    city_id,\n    groupBitmapState(uid) AS uv\nFROM bitmap_test\nGROUP BY pickup_date, city_id\nORDER BY pickup_date, city_id;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.bitmap_state_test doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_state_test",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT pickup_date, groupBitmapMerge(uv) AS users from bitmap_state_test group by pickup_date order by pickup_date;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.bitmap_state_test doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_state_test",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT groupBitmap( uid ) AS user_num FROM bitmap_test;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function groupBitmap, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_test",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT pickup_date, groupBitmap( uid ) AS user_num, bitmapToArray(groupBitmapState( uid )) AS users FROM bitmap_test GROUP BY pickup_date order by pickup_date;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function groupBitmap, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_test",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT\n    bitmapCardinality(day_today) AS today_users,\n    bitmapCardinality(day_before) AS before_users,\n    bitmapOrCardinality(day_today, day_before) AS all_users,\n    bitmapAndCardinality(day_today, day_before) AS old_users,\n    bitmapAndnotCardinality(day_today, day_before) AS new_users,\n    bitmapXorCardinality(day_today, day_before) AS diff_users\nFROM\n(\n SELECT city_id, groupBitmapState( uid ) AS day_today FROM bitmap_test WHERE pickup_date = '2019-01-02' GROUP BY city_id ORDER BY city_id\n) js1\nALL LEFT JOIN\n(\n SELECT city_id, groupBitmapState( uid ) AS day_before FROM bitmap_test WHERE pickup_date = '2019-01-01' GROUP BY city_id ORDER BY city_id\n) js2\nUSING city_id;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function groupBitmapState, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ALL\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT\n    bitmapCardinality(day_today) AS today_users,\n    bitmapCardinality(day_before) AS before_users,\n    bitmapCardinality(bitmapOr(day_today, day_before))ll_users,\n    bitmapCardinality(bitmapAnd(day_today, day_before)) AS old_users,\n    bitmapCardinality(bitmapAndnot(day_today, day_before)) AS new_users,\n    bitmapCardinality(bitmapXor(day_today, day_before)) AS diff_users\nFROM\n(\n SELECT city_id, groupBitmapState( uid ) AS day_today FROM bitmap_test WHERE pickup_date = '2019-01-02' GROUP BY city_id ORDER BY city_id\n) js1\nALL LEFT JOIN\n(\n SELECT city_id, groupBitmapState( uid ) AS day_before FROM bitmap_test WHERE pickup_date = '2019-01-01' GROUP BY city_id ORDER BY city_id\n) js2\nUSING city_id;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function groupBitmapState, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ALL\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count(*) FROM bitmap_test WHERE bitmapHasAny((SELECT groupBitmapState(uid) FROM bitmap_test WHERE pickup_date = '2019-01-01'), bitmapBuild([uid]));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function groupBitmapState, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_test",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count(*) FROM bitmap_test WHERE bitmapHasAny(bitmapBuild([uid]), (SELECT groupBitmapState(uid) FROM bitmap_test WHERE pickup_date = '2019-01-01'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function groupBitmapState, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_test",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count(*) FROM bitmap_test WHERE 0 = bitmapHasAny((SELECT groupBitmapState(uid) FROM bitmap_test WHERE pickup_date = '2019-01-01'), bitmapBuild([uid]));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function groupBitmapState, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_test",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT bitmapToArray(bitmapAnd(groupBitmapState(uid), bitmapBuild(CAST([4294967296, 4294967297, 4294967298], 'Array(UInt64)')))) FROM bitmap_test GROUP BY city_id ORDER BY city_id;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function bitmapToArray, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \",\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE bitmap_state_test;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.bitmap_state_test doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_state_test",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE bitmap_test;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: bitmap_test",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00836_indices_alter.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS minmax_idx;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS minmax_idx2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nCREATE TABLE minmax_idx\n(\n    u64 UInt64,\n    i32 Int32\n) ENGINE = MergeTree()\nORDER BY u64;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO minmax_idx VALUES (1, 2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE minmax_idx ADD INDEX idx1 u64 * i32 TYPE minmax GRANULARITY 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 3, col 28): INDEX idx1 u64 * i32 TYPE minmax GRANULARITY 10\n FORMAT Native. Expected COLUMN, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nALTER TABLE minmax_idx ADD INDEX idx2 u64 + i32 TYPE minmax GRANULARITY 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 2, col 28): INDEX idx2 u64 + i32 TYPE minmax GRANULARITY 10\n FORMAT Native. Expected COLUMN, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nALTER TABLE minmax_idx ADD INDEX idx3 (u64 - i32) TYPE minmax GRANULARITY 10 AFTER idx1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 2, col 28): INDEX idx3 (u64 - i32) TYPE minmax GRANULARITY 10 AFTER idx1\n FORMAT Native. Expected COLUMN, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSHOW CREATE TABLE minmax_idx;",
                "source_success": true,
                "source_exception": "",
                "source_result": "                                                                                                                       statement\n0  CREATE TABLE default.minmax_idx ( u64 UInt64,  i32 Int32) ENGINE = MergeTree() ORDER BY u64 SETTINGS index_granularity = 8192",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM minmax_idx WHERE u64 * i32 = 2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   u64  i32\n0    1    2",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO minmax_idx VALUES (1, 2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO minmax_idx VALUES (1, 2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO minmax_idx VALUES (1, 2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO minmax_idx VALUES (1, 2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO minmax_idx VALUES (1, 2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM minmax_idx WHERE u64 * i32 = 2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   u64  i32\n0    1    2\n1    1    2\n2    1    2\n3    1    2\n4    1    2\n5    1    2",
                "source_shape": [
                    6,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE minmax_idx DROP INDEX idx1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 29): INDEX idx1\n FORMAT Native. Expected one of: COLUMN, PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"INDEX\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSHOW CREATE TABLE minmax_idx;",
                "source_success": true,
                "source_exception": "",
                "source_result": "                                                                                                                       statement\n0  CREATE TABLE default.minmax_idx ( u64 UInt64,  i32 Int32) ENGINE = MergeTree() ORDER BY u64 SETTINGS index_granularity = 8192",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM minmax_idx WHERE u64 * i32 = 2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   u64  i32\n0    1    2\n1    1    2\n2    1    2\n3    1    2\n4    1    2\n5    1    2",
                "source_shape": [
                    6,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE minmax_idx DROP INDEX idx2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 29): INDEX idx2\n FORMAT Native. Expected one of: COLUMN, PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"INDEX\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nALTER TABLE minmax_idx DROP INDEX idx3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 2, col 29): INDEX idx3\n FORMAT Native. Expected one of: COLUMN, PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"INDEX\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSHOW CREATE TABLE minmax_idx;",
                "source_success": true,
                "source_exception": "",
                "source_result": "                                                                                                                       statement\n0  CREATE TABLE default.minmax_idx ( u64 UInt64,  i32 Int32) ENGINE = MergeTree() ORDER BY u64 SETTINGS index_granularity = 8192",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE minmax_idx ADD INDEX idx1 (u64 * i32) TYPE minmax GRANULARITY 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 3, col 28): INDEX idx1 (u64 * i32) TYPE minmax GRANULARITY 10\n FORMAT Native. Expected COLUMN, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSHOW CREATE TABLE minmax_idx;",
                "source_success": true,
                "source_exception": "",
                "source_result": "                                                                                                                       statement\n0  CREATE TABLE default.minmax_idx ( u64 UInt64,  i32 Int32) ENGINE = MergeTree() ORDER BY u64 SETTINGS index_granularity = 8192",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM minmax_idx WHERE u64 * i32 = 2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   u64  i32\n0    1    2\n1    1    2\n2    1    2\n3    1    2\n4    1    2\n5    1    2",
                "source_shape": [
                    6,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nCREATE TABLE minmax_idx2\n(\n    u64 UInt64,\n    i32 Int32,\n    INDEX idx1 (u64 + i32) TYPE minmax GRANULARITY 10,\n    INDEX idx2 u64 * i32 TYPE minmax GRANULARITY 10\n) ENGINE = MergeTree()\nORDER BY u64;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 89 (line 8, col 28): TYPE minmax GRANULARITY 10,\n    INDEX idx2 u64 * i32 TYPE minmax GRANULARITY 10\n) ENGINE = MergeTree()\nORDER BY u64\n FORMAT Native. Expected one of: COMMENT, DEFAULT, MATERIALIZED, ALIAS, ClosingRoundBracket, Comma, token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"INDEX\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO minmax_idx2 VALUES (1, 2);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.minmax_idx2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO minmax_idx2 VALUES (1, 2);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.minmax_idx2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM minmax_idx2 WHERE u64 * i32 = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.minmax_idx2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE minmax_idx2 DROP INDEX idx1, DROP INDEX idx2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 3, col 30): INDEX idx1, DROP INDEX idx2\n FORMAT Native. Expected one of: COLUMN, PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"INDEX\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSHOW CREATE TABLE minmax_idx2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 390, e.displayText() = DB::Exception: There is no metadata file for table minmax_idx2, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM minmax_idx2 WHERE u64 * i32 = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.minmax_idx2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE minmax_idx;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE minmax_idx2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.minmax_idx2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: minmax_idx2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00852_any_join_nulls.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS table1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS table2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE table1 ( id String ) ENGINE = Log;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE table2 ( parent_id String ) ENGINE = Log;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ninsert into table1 values ('1');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT table2.parent_id = '', isNull(table2.parent_id)\nFROM table1 ANY LEFT JOIN table2 ON table1.id = table2.parent_id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   equals(parent_id, '')  isNull(parent_id)\n0                      1                  0",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"isNull\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET join_use_nulls = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT table2.parent_id = '', isNull(table2.parent_id)\nFROM table1 ANY LEFT JOIN table2 ON table1.id = table2.parent_id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   equals(parent_id, '')  isNull(parent_id)\n0                      1                  0",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"isNull\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE table1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE table2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table2",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00950_test_gorilla_codec.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS codecTest;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET cross_to_inner_join_rewrite = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 40 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE codecTest (\n    key      UInt64,\n    name     String,\n    ref_valueF64 Float64,\n    ref_valueF32 Float32,\n    valueF64 Float64  CODEC(Gorilla),\n    valueF32 Float32  CODEC(Gorilla)\n) Engine = MergeTree ORDER BY key;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 144 (line 8, col 23): CODEC(Gorilla),\n    valueF32 Float32  CODEC(Gorilla)\n) Engine = MergeTree ORDER BY key\n FORMAT Native. Expected one of: COMMENT, DEFAULT, MATERIALIZED, ALIAS, ClosingRoundBracket, Comma, token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Gorilla\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- best case - same value\nINSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32)\n\tSELECT number AS n, 'e()', e() AS v, v, v, v FROM system.numbers LIMIT 1, 100;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.codecTest doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: codecTest",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- good case - values that grow insignificantly\nINSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32)\n\tSELECT number AS n, 'log2(n)', log2(n) AS v, v, v, v FROM system.numbers LIMIT 101, 100;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.codecTest doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: codecTest",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- bad case - values differ significantly\nINSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32)\n\tSELECT number AS n, 'n*sqrt(n)', n*sqrt(n) AS v, v, v, v FROM system.numbers LIMIT 201, 100;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.codecTest doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: codecTest",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- worst case - almost like a random values\nINSERT INTO codecTest (key, name, ref_valueF64, valueF64, ref_valueF32, valueF32)\n\tSELECT number AS n, 'sin(n*n*n)*n', sin(n * n * n * n* n) AS v, v, v, v FROM system.numbers LIMIT 301, 100;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.codecTest doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: codecTest",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\n-- These floating-point values are expected to be BINARY equal, so comparing by-value is Ok here.\n\n-- referencing previous row key, value, and case name to simplify debugging.\nSELECT 'F64';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'F64'\n0   F64",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT\n\tc1.key, c1.name,\n\tc1.ref_valueF64, c1.valueF64, c1.ref_valueF64 - c1.valueF64 AS dF64,\n\t'prev:',\n\tc2.key, c2.ref_valueF64\nFROM\n\tcodecTest as c1, codecTest as c2\nWHERE\n\tdF64 != 0\nAND\n\tc2.key = c1.key - 1\nLIMIT 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.codecTest doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: codecTest",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nSELECT 'F32';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'F32'\n0   F32",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT\n\tc1.key, c1.name,\n\tc1.ref_valueF32, c1.valueF32, c1.ref_valueF32 - c1.valueF32 AS dF32,\n\t'prev:',\n\tc2.key, c2.ref_valueF32\nFROM\n\tcodecTest as c1, codecTest as c2\nWHERE\n\tdF32 != 0\nAND\n\tc2.key = c1.key - 1\nLIMIT 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.codecTest doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: codecTest",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS codecTest;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00979_set_index_not.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "\nDROP TABLE IF EXISTS set_index_not;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE set_index_not\n(   name String, status Enum8('alive' = 0, 'rip' = 1),\n    INDEX idx_status status TYPE set(2) GRANULARITY 1\n)\nENGINE = MergeTree()  ORDER BY name  SETTINGS index_granularity = 8192;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 106 (line 5, col 22): status TYPE set(2) GRANULARITY 1\n)\nENGINE = MergeTree()  ORDER BY name  SETTINGS index_granularity = 8192\n FORMAT Native. Expected one of: COMMENT, DEFAULT, MATERIALIZED, ALIAS, ClosingRoundBracket, Comma, token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'alive'\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ninsert into set_index_not values ('Jon','alive'),('Ramsey','rip');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.set_index_not doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: set_index_not",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect * from set_index_not where status!='rip';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.set_index_not doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: set_index_not",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from set_index_not where NOT (status ='rip');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.set_index_not doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: set_index_not",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from set_index_not where NOT (status!='rip');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.set_index_not doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: set_index_not",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from set_index_not where NOT (NOT (status ='rip'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.set_index_not doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: set_index_not",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE set_index_not;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.set_index_not doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: set_index_not",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "00988_constraints_replication_zookeeper_long.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: long, replica\n\nDROP TABLE IF EXISTS replicated_constraints1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS replicated_constraints2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE replicated_constraints1\n(\n    a UInt32,\n    b UInt32,\n    CONSTRAINT a_constraint CHECK a < 10\n) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00988/alter_constraints', 'r1') ORDER BY (a);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 98 (line 7, col 29): CHECK a < 10\n) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00988/alter_constraints', 'r1') ORDER BY (a)\n FORMAT Native. Expected one of: COMMENT, DEFAULT, MATERIALIZED, ALIAS, ClosingRoundBracket, Comma, token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"a\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE replicated_constraints2\n(\n    a UInt32,\n    b UInt32,\n    CONSTRAINT a_constraint CHECK a < 10\n) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00988/alter_constraints', 'r2') ORDER BY (a);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 98 (line 7, col 29): CHECK a < 10\n) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00988/alter_constraints', 'r2') ORDER BY (a)\n FORMAT Native. Expected one of: COMMENT, DEFAULT, MATERIALIZED, ALIAS, ClosingRoundBracket, Comma, token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"a\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO replicated_constraints1 VALUES (1, 2);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replicated_constraints1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO replicated_constraints2 VALUES (3, 4);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replicated_constraints2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM SYNC REPLICA replicated_constraints1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 48 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM SYNC REPLICA replicated_constraints2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 47 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO replicated_constraints1 VALUES (10, 10);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replicated_constraints1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 469 }\n\nALTER TABLE replicated_constraints1 DROP CONSTRAINT a_constraint;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 67 (line 3, col 42): CONSTRAINT a_constraint\n FORMAT Native. Expected one of: COLUMN, PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"CONSTRAINT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM SYNC REPLICA replicated_constraints2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 48 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO replicated_constraints1 VALUES (10, 10);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replicated_constraints1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO replicated_constraints2 VALUES (10, 10);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replicated_constraints2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE replicated_constraints1 ADD CONSTRAINT b_constraint CHECK b > 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 43 (line 3, col 41): CONSTRAINT b_constraint CHECK b > 10\n FORMAT Native. Expected COLUMN, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Otherwise \"Metadata on replica is not up to date with common metadata in Zookeeper. Cannot alter.\" is possible.\nSYSTEM SYNC REPLICA replicated_constraints1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 163 (line 5, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM SYNC REPLICA replicated_constraints2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 47 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE replicated_constraints2 ADD CONSTRAINT a_constraint CHECK a < 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 43 (line 3, col 41): CONSTRAINT a_constraint CHECK a < 10\n FORMAT Native. Expected COLUMN, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM SYNC REPLICA replicated_constraints1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 48 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM SYNC REPLICA replicated_constraints2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 47 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO replicated_constraints1 VALUES (10, 11);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replicated_constraints1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 469 }\nINSERT INTO replicated_constraints2 VALUES (9, 10);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replicated_constraints2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 469 }\n\nDROP TABLE replicated_constraints1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replicated_constraints1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE replicated_constraints2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replicated_constraints2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replicated_constraints2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01042_check_query_and_last_granule_size.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET check_query_single_value_result = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 42 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS check_query_test;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE check_query_test (SomeKey UInt64, SomeValue String) ENGINE = MergeTree() ORDER BY SomeKey SETTINGS min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting min_bytes_for_wide_part for storage MergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Number of rows in last granule should be equals to granularity.\n-- Rows in this table are short, so granularity will be 8192.\nINSERT INTO check_query_test SELECT number, toString(number) FROM system.numbers LIMIT 81920;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.check_query_test doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: check_query_test",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCHECK TABLE check_query_test SETTINGS max_threads = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 3, col 30): SETTINGS max_threads = 1\n FORMAT Native. Expected one of: FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"CHECK\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE check_query_test;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.check_query_test doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCHECK TABLE check_query_test SETTINGS max_threads = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 3, col 30): SETTINGS max_threads = 1\n FORMAT Native. Expected one of: FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"CHECK\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS check_query_test;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS check_query_test_non_adaptive;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE check_query_test_non_adaptive (SomeKey UInt64, SomeValue String) ENGINE = MergeTree() ORDER BY SomeKey SETTINGS index_granularity_bytes = 0, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting index_granularity_bytes for storage MergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO check_query_test_non_adaptive SELECT number, toString(number) FROM system.numbers LIMIT 81920;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.check_query_test_non_adaptive doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: check_query_test_non_adaptive",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCHECK TABLE check_query_test_non_adaptive SETTINGS max_threads = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 45 (line 3, col 43): SETTINGS max_threads = 1\n FORMAT Native. Expected one of: FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"CHECK\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE check_query_test_non_adaptive;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.check_query_test_non_adaptive doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCHECK TABLE check_query_test_non_adaptive SETTINGS max_threads = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 45 (line 3, col 43): SETTINGS max_threads = 1\n FORMAT Native. Expected one of: FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"CHECK\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO check_query_test_non_adaptive SELECT number, toString(number) FROM system.numbers LIMIT 77;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.check_query_test_non_adaptive doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: check_query_test_non_adaptive",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCHECK TABLE check_query_test_non_adaptive SETTINGS max_threads = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 45 (line 3, col 43): SETTINGS max_threads = 1\n FORMAT Native. Expected one of: FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"CHECK\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE check_query_test_non_adaptive;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.check_query_test_non_adaptive doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCHECK TABLE check_query_test_non_adaptive SETTINGS max_threads = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 45 (line 3, col 43): SETTINGS max_threads = 1\n FORMAT Native. Expected one of: FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"CHECK\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS check_query_test_non_adaptive;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01051_all_join_engine.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS left_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS inner_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS right_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS full_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t1 (x UInt32, str String) engine = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE left_join (x UInt32, s String) engine = Join(ALL, LEFT, x);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE inner_join (x UInt32, s String) engine = Join(ALL, INNER, x);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE right_join (x UInt32, s String) engine = Join(ALL, RIGHT, x);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE full_join (x UInt32, s String) engine = Join(ALL, FULL, x);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t1 (x, str) VALUES (0, 'a1'), (1, 'a2'), (2, 'a3'), (3, 'a4'), (4, 'a5');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO left_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: left_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO inner_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: inner_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO right_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: right_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO full_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: full_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET join_use_nulls = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'left';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'left'\n0   left",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 LEFT JOIN left_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'inner';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'inner'\n0   inner",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 INNER JOIN inner_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'right';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'right'\n0   right",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 RIGHT JOIN right_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'full';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'full'\n0   full",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 FULL JOIN full_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET join_use_nulls = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM t1 LEFT JOIN left_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 264 }\nSELECT * FROM t1 FULL JOIN full_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 264 }\n\nSELECT 'inner (join_use_nulls mix)';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'inner (join_use_nulls mix)'\n0   inner (join_use_nulls mix)",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 INNER JOIN inner_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'right (join_use_nulls mix)';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'right (join_use_nulls mix)'\n0   right (join_use_nulls mix)",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 RIGHT JOIN right_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE left_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: left_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE inner_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: inner_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE right_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: right_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE full_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: full_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE left_join (x UInt32, s String) engine = Join(ALL, LEFT, x) SETTINGS join_use_nulls = 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE inner_join (x UInt32, s String) engine = Join(ALL, INNER, x) SETTINGS join_use_nulls = 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE right_join (x UInt32, s String) engine = Join(ALL, RIGHT, x) SETTINGS join_use_nulls = 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE full_join (x UInt32, s String) engine = Join(ALL, FULL, x) SETTINGS join_use_nulls = 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO left_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: left_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO inner_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: inner_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO right_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: right_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO full_join (x, s) VALUES (2, 'b1'), (2, 'b2'), (4, 'b3'), (4, 'b4'), (4, 'b5'), (5, 'b6');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: full_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'left (join_use_nulls)';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'left (join_use_nulls)'\n0   left (join_use_nulls)",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 LEFT JOIN left_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'inner (join_use_nulls)';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'inner (join_use_nulls)'\n0   inner (join_use_nulls)",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 INNER JOIN inner_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'right (join_use_nulls)';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'right (join_use_nulls)'\n0   right (join_use_nulls)",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 RIGHT JOIN right_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'full (join_use_nulls)';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'full (join_use_nulls)'\n0   full (join_use_nulls)",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 FULL JOIN full_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET join_use_nulls = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM t1 LEFT JOIN left_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 264 }\nSELECT * FROM t1 FULL JOIN full_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 264 }\n\nSELECT 'inner (join_use_nulls mix2)';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'inner (join_use_nulls mix2)'\n0   inner (join_use_nulls mix2)",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 INNER JOIN inner_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'right (join_use_nulls mix2)';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'right (join_use_nulls mix2)'\n0   right (join_use_nulls mix2)",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM t1 RIGHT JOIN right_join j USING(x) ORDER BY x, str, s;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column j.x in block. There are only columns: x, str, s, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE left_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: left_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE inner_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: inner_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE right_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: right_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE full_join;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: full_join",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01074_h3_range_check.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-fasttest\n\nSELECT h3EdgeLengthM(100);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function h3EdgeLengthM, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: h3EdgeLengthM",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 69 }\nSELECT h3HexAreaM2(100);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function h3HexAreaM2, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: h3HexAreaM2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 69 }\nSELECT h3HexAreaKm2(100);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function h3HexAreaKm2, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: h3HexAreaKm2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 69 }\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 26 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01087_storage_generate.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS test_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE test_table(a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3), UUID)) ENGINE = GenerateRandom();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 50, e.displayText() = DB::Exception: Unknown data type family: DateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Int8\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT COUNT(*) FROM (SELECT * FROM test_table LIMIT 100);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS test_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-'\n0   -",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS test_table_2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE test_table_2(a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3, 'UTC'), UUID)) ENGINE = GenerateRandom(10, 5, 3);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 50, e.displayText() = DB::Exception: Unknown data type family: DateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Int8\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM test_table_2 LIMIT 100;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_table_2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_table_2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-'\n0   -",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS test_table_2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01106_const_fixed_string_like.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT CAST('hello' AS FixedString(5)) LIKE 'hello';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE 'world';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE 'xyz';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE 'hell';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE 'orld';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT CAST('hello' AS FixedString(5)) LIKE '%hello%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%world%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%xyz%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%hell%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%orld%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT CAST('hello' AS FixedString(5)) LIKE '%hello';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%world';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%xyz';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%hell';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%orld';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT CAST('hello' AS FixedString(5)) LIKE 'hello%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE 'world%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE 'xyz%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE 'hell%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE 'orld%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT CAST('hello' AS FixedString(5)) LIKE '%he%o%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%w%ld%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%x%z%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%hell_';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '_orld%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT CAST('hello' AS FixedString(5)) LIKE '%he__o%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%w__ld%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%x%z%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE 'hell_';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '_orld';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT CAST('hello' AS FixedString(5)) LIKE 'helloworld';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%helloworld%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%elloworl%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%ow%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%o%w%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT CAST('hello' AS FixedString(5)) LIKE '%o%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%l%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%l%o%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT CAST('hello' AS FixedString(5)) LIKE '%o%l%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type FixedString(5) of argument of function like, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01125_dict_ddl_cannot_add_column.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-parallel\n\nDROP DATABASE IF EXISTS database_for_dict;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DATABASE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE DATABASE database_for_dict;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DATABASE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nuse database_for_dict;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 7 (line 3, col 5): database_for_dict\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"use\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE date_table\n(\n  id UInt32,\n  val String,\n  start Date,\n  end Date\n) Engine = Memory();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 57, e.displayText() = DB::Exception: Table default.date_table already exists., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO date_table VALUES(1, '1', toDate('2019-01-05'), toDate('2020-01-10'));",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: date_table",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE DICTIONARY somedict\n(\n  id UInt32,\n  val String,\n  start Date,\n  end Date\n)\nPRIMARY KEY id\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'date_table' DB 'database_for_dict'))\nLAYOUT(RANGE_HASHED())\nRANGE (MIN start MAX end)\nLIFETIME(MIN 300 MAX 360);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 10 (line 3, col 8): DICTIONARY somedict\n(\n  id UInt32,\n  val String,\n  start Date,\n  end Date\n)\nPRIMARY KEY id\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABL. Expected one of: VIEW, MATERIALIZED, DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DICTIONARY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * from somedict;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.somedict doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: somedict",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- No dictionary columns\nSELECT 1 FROM somedict;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.somedict doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: somedict",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSHOW TABLES;",
                "source_success": true,
                "source_exception": "",
                "source_result": "                              name\n0                    .inner.dst_mv\n1   .inner.test_materialized_00571\n2                        Customers\n3                       date_table\n4                       department\n5                           distr0\n6                           distr1\n7                           distr2\n8                           dst_mv\n9                   join_all_inner\n10                   join_all_left\n11                  join_any_inner\n12                   join_any_left\n13              join_any_left_null\n14                 join_string_key\n15                         m_table\n16                        mv_table\n17            partial_sort_opt_bug\n18                            set2\n19                               t\n20                              t0\n21                              t2\n22                              t3\n23                              t4\n24                         table_1\n25                         table_2\n26                      test_00571\n27            test_dictionary_view\n28         test_materialized_00571\n29                       test_view\n30                          union1\n31                          union2\n32                       v_numbers",
                "source_shape": [
                    33,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP DATABASE database_for_dict;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DATABASE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01129_dict_get_join_lose_constness.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-parallel\n\nDROP DICTIONARY IF EXISTS system.dict1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 28 (line 3, col 6): DICTIONARY IF EXISTS system.dict1\n FORMAT Native. Expected one of: DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DICTIONARY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE DICTIONARY IF NOT EXISTS system.dict1\n(\n    bytes_allocated UInt64,\n    element_count Int32,\n    loading_start_time DateTime\n)\nPRIMARY KEY bytes_allocated\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' PASSWORD '' TABLE 'dictionaries' DB 'system'))\nLIFETIME(0)\nLAYOUT(hashed());",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 10 (line 3, col 8): DICTIONARY IF NOT EXISTS system.dict1\n(\n    bytes_allocated UInt64,\n    element_count Int32,\n    loading_start_time DateTime\n)\nPRIMARY KEY bytes_allocated\nSOURC. Expected one of: VIEW, MATERIALIZED, DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DICTIONARY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT join_key,\n       toTimeZone(dictGetDateTime('system.dict1', 'loading_start_time', toUInt64(dict_key)), 'UTC') AS datetime\nFROM (select dictGetInt32('system.dict1', 'element_count', toUInt64(dict_key)) AS join_key, 1 AS dict_key) js1\nLEFT JOIN (SELECT toInt32(2) AS join_key) js2\nUSING (join_key)\nWHERE now() >= datetime;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: No such external dictionary: system.dict1, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: dictGetInt32",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP DICTIONARY IF EXISTS system.dict1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 8 (line 3, col 6): DICTIONARY IF EXISTS system.dict1\n FORMAT Native. Expected one of: DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DICTIONARY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01141_join_get_negative.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t1 (`s` String, `x` Array(UInt8), `k` UInt64) ENGINE = Join(ANY, LEFT, k);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"UInt8\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t2 (`s` String, `x` Array(UInt8), `k` UInt64) ENGINE = Join(ANY, INNER, k);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"UInt8\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT joinGet('t1', '', number) FROM numbers(2);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 49, e.displayText() = DB::Exception: StorageJoin doesn't contain column , e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 16 }\nSELECT joinGet('t2', 's', number) FROM numbers(2);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 49, e.displayText() = DB::Exception: joinGet only supports StorageJoin of type Left Any, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 264 }\n\nDROP TABLE t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE t2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t2",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01262_low_cardinality_remove.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS testView;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS testTable;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE IF NOT EXISTS testTable (\n A LowCardinality(String), -- like voter\n B Int64\n) ENGINE MergeTree()\nORDER BY (A);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 44, e.displayText() = DB::Exception: Cannot create table with column 'A' which type is 'LowCardinality(String)' because LowCardinality type is not allowed. Set setting allow_experimental_low_cardinality_type = 1 in order to allow it., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO testTable VALUES ('A', 1),('B',2),('C',3);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testTable doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testTable",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE VIEW testView AS \nSELECT\n A as ALow, -- like account\n B\nFROM\n   testTable;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testTable doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT CAST(ALow, 'String') AS AStr\nFROM testView\nGROUP BY AStr ORDER BY AStr;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testView doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \",\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE testTable;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testTable doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testTable",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE IF NOT EXISTS testTable (\n A String, -- like voter\n B Int64\n) ENGINE MergeTree()\nORDER BY (A);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MergeTree\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT CAST(ALow, 'String') AS AStr\nFROM testView\nGROUP BY AStr ORDER BY AStr;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testView doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \",\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO testTable VALUES ('A', 1),('B',2),('C',3);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testTable",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT CAST(ALow, 'String') AS AStr\nFROM testView\nGROUP BY AStr ORDER BY AStr;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testView doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \",\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS testView;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "use DROP VIEW to delete view testView",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS testTable;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01276_alter_rename_column_materialized_expr.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS table_for_rename;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE table_for_rename\n(\n  date Date,\n  key UInt64,\n  value1 String,\n  value2 String,\n  value3 String MATERIALIZED concat(value1, ' + ', value2) \n)\nENGINE = MergeTree()\nPARTITION BY date\nORDER BY key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"value1\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO table_for_rename (date, key, value1, value2) SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1) from numbers(9);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM table_for_rename ORDER BY key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "        date  key value1 value2\n0 2019-10-01    0      0      1\n1 2019-10-02    1      1      2\n2 2019-10-03    2      2      3\n3 2019-10-01    3      3      4\n4 2019-10-02    4      4      5\n5 2019-10-03    5      5      6\n6 2019-10-01    6      6      7\n7 2019-10-02    7      7      8\n8 2019-10-03    8      8      9",
                "source_shape": [
                    9,
                    4
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE table_for_rename RENAME COLUMN value1 TO value4;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 3, col 30): RENAME COLUMN value1 TO value4\n FORMAT Native. Expected one of: ON, FREEZE, a list of ALTER commands, ALTER command, ADD COLUMN, DROP COLUMN, CLEAR COLUMN, MODIFY COLUMN, COMMENT COLUMN, MODIFY PRIMARY KEY, MODIFY ORDER BY, ATTACH PARTITION, DETACH PARTITION, DROP PARTITION, ATTACH PART, FETCH PARTITION, REPLACE PARTITION, DELETE WHERE, UPDATE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nALTER TABLE table_for_rename RENAME COLUMN value2 TO value5;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 2, col 30): RENAME COLUMN value2 TO value5\n FORMAT Native. Expected one of: ON, FREEZE, a list of ALTER commands, ALTER command, ADD COLUMN, DROP COLUMN, CLEAR COLUMN, MODIFY COLUMN, COMMENT COLUMN, MODIFY PRIMARY KEY, MODIFY ORDER BY, ATTACH PARTITION, DETACH PARTITION, DROP PARTITION, ATTACH PART, FETCH PARTITION, REPLACE PARTITION, DELETE WHERE, UPDATE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSHOW CREATE TABLE table_for_rename;",
                "source_success": true,
                "source_exception": "",
                "source_result": "                                                                                                                                                                                                                                          statement\n0  CREATE TABLE default.table_for_rename ( date Date,  key UInt64,  value1 String,  value2 String,  value3 String MATERIALIZED concat(value1, ' + ', value2)) ENGINE = MergeTree() PARTITION BY date ORDER BY key SETTINGS index_granularity = 8192",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM table_for_rename ORDER BY key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "        date  key value1 value2\n0 2019-10-01    0      0      1\n1 2019-10-02    1      1      2\n2 2019-10-03    2      2      3\n3 2019-10-01    3      3      4\n4 2019-10-02    4      4      5\n5 2019-10-03    5      5      6\n6 2019-10-01    6      6      7\n7 2019-10-02    7      7      8\n8 2019-10-03    8      8      9",
                "source_shape": [
                    9,
                    4
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- insert after rename --';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- insert after rename --'\n0   -- insert after rename --",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO table_for_rename (date, key, value4, value5) SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1) from numbers(10, 10);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 16, e.displayText() = DB::Exception: No such column value4 in table table_for_rename, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM table_for_rename ORDER BY key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "        date  key value1 value2\n0 2019-10-01    0      0      1\n1 2019-10-02    1      1      2\n2 2019-10-03    2      2      3\n3 2019-10-01    3      3      4\n4 2019-10-02    4      4      5\n5 2019-10-03    5      5      6\n6 2019-10-01    6      6      7\n7 2019-10-02    7      7      8\n8 2019-10-03    8      8      9",
                "source_shape": [
                    9,
                    4
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- rename columns back --';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- rename columns back --'\n0   -- rename columns back --",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nALTER TABLE table_for_rename RENAME COLUMN value4 TO value1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 2, col 30): RENAME COLUMN value4 TO value1\n FORMAT Native. Expected one of: ON, FREEZE, a list of ALTER commands, ALTER command, ADD COLUMN, DROP COLUMN, CLEAR COLUMN, MODIFY COLUMN, COMMENT COLUMN, MODIFY PRIMARY KEY, MODIFY ORDER BY, ATTACH PARTITION, DETACH PARTITION, DROP PARTITION, ATTACH PART, FETCH PARTITION, REPLACE PARTITION, DELETE WHERE, UPDATE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nALTER TABLE table_for_rename RENAME COLUMN value5 TO value2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 2, col 30): RENAME COLUMN value5 TO value2\n FORMAT Native. Expected one of: ON, FREEZE, a list of ALTER commands, ALTER command, ADD COLUMN, DROP COLUMN, CLEAR COLUMN, MODIFY COLUMN, COMMENT COLUMN, MODIFY PRIMARY KEY, MODIFY ORDER BY, ATTACH PARTITION, DETACH PARTITION, DROP PARTITION, ATTACH PART, FETCH PARTITION, REPLACE PARTITION, DELETE WHERE, UPDATE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSHOW CREATE TABLE table_for_rename;",
                "source_success": true,
                "source_exception": "",
                "source_result": "                                                                                                                                                                                                                                          statement\n0  CREATE TABLE default.table_for_rename ( date Date,  key UInt64,  value1 String,  value2 String,  value3 String MATERIALIZED concat(value1, ' + ', value2)) ENGINE = MergeTree() PARTITION BY date ORDER BY key SETTINGS index_granularity = 8192",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM table_for_rename ORDER BY key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "        date  key value1 value2\n0 2019-10-01    0      0      1\n1 2019-10-02    1      1      2\n2 2019-10-03    2      2      3\n3 2019-10-01    3      3      4\n4 2019-10-02    4      4      5\n5 2019-10-03    5      5      6\n6 2019-10-01    6      6      7\n7 2019-10-02    7      7      8\n8 2019-10-03    8      8      9",
                "source_shape": [
                    9,
                    4
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- insert after rename column --';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- insert after rename column --'\n0   -- insert after rename column --",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO table_for_rename (date, key, value1, value2) SELECT toDate('2019-10-01') + number % 3, number, toString(number), toString(number + 1) from numbers(20,10);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM table_for_rename ORDER BY key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "         date  key value1 value2\n0  2019-10-01    0      0      1\n1  2019-10-02    1      1      2\n2  2019-10-03    2      2      3\n3  2019-10-01    3      3      4\n4  2019-10-02    4      4      5\n5  2019-10-03    5      5      6\n6  2019-10-01    6      6      7\n7  2019-10-02    7      7      8\n8  2019-10-03    8      8      9\n9  2019-10-03   20     20     21\n10 2019-10-01   21     21     22\n11 2019-10-02   22     22     23\n12 2019-10-03   23     23     24\n13 2019-10-01   24     24     25\n14 2019-10-02   25     25     26\n15 2019-10-03   26     26     27\n16 2019-10-01   27     27     28\n17 2019-10-02   28     28     29\n18 2019-10-03   29     29     30",
                "source_shape": [
                    19,
                    4
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_for_rename",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS table_for_rename;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01302_polygons_distance.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "select polygonsDistanceCartesian([[[(0, 0),(0, 3),(1, 2.9),(2, 2.6),(2.6, 2),(2.9, 1),(3, 0),(0, 0)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function polygonsDistanceCartesian, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"]\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect polygonsDistanceCartesian([[[(0, 0), (0, 0.1), (0.1, 0.1), (0.1, 0)]]], [[[(1., 1.),(1., 4.),(4., 4.),(4., 1.),(1., 1.)]]]);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function polygonsDistanceCartesian, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"]\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect polygonsDistanceSpherical([[[(23.725750, 37.971536)]]], [[[(4.3826169, 50.8119483)]]]);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function polygonsDistanceSpherical, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"]\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ndrop table if exists polygon_01302;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ncreate table polygon_01302 (x Array(Array(Array(Tuple(Float64, Float64)))), y Array(Array(Array(Tuple(Float64, Float64))))) engine=Memory();",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Array\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into polygon_01302 values ([[[(23.725750, 37.971536)]]], [[[(4.3826169, 50.8119483)]]]);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"]\"",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect polygonsDistanceSpherical(x, y) from polygon_01302;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function polygonsDistanceSpherical, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: polygon_01302",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ndrop table polygon_01302;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: polygon_01302",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01324_if_transform_strings_to_enum.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "set optimize_if_transform_strings_to_enum = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 48 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other')\n0                                                                    other\n1                                                                    other\n2                                                                   google\n3                                                                    other\n4                                                               censor.net\n5                                                                    other\n6                                                                    yahoo\n7                                                                    other\n8                                                                    other\n9                                                                    other",
                "source_shape": [
                    10,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.numbers",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nEXPLAIN SYNTAX SELECT transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 2 (line 2, col 1): EXPLAIN SYNTAX SELECT transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYNTAX\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT number > 5 ? 'censor.net' : 'google' FROM system.numbers LIMIT 10;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  if(greater(number, 5), 'censor.net', 'google')\n0                                         google\n1                                         google\n2                                         google\n3                                         google\n4                                         google\n5                                         google\n6                                     censor.net\n7                                     censor.net\n8                                     censor.net\n9                                     censor.net",
                "source_shape": [
                    10,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"?\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nEXPLAIN SYNTAX SELECT number > 5 ? 'censor.net' : 'google' FROM system.numbers LIMIT 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 2 (line 2, col 1): EXPLAIN SYNTAX SELECT number > 5 ? 'censor.net' : 'google' FROM system.numbers LIMIT 10\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYNTAX\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nset optimize_if_transform_strings_to_enum = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other')\n0                                                                    other\n1                                                                    other\n2                                                                   google\n3                                                                    other\n4                                                               censor.net\n5                                                                    other\n6                                                                    yahoo\n7                                                                    other\n8                                                                    other\n9                                                                    other",
                "source_shape": [
                    10,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.numbers",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nEXPLAIN SYNTAX SELECT transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 2 (line 2, col 1): EXPLAIN SYNTAX SELECT transform(number, [2, 4, 6], ['google', 'censor.net', 'yahoo'], 'other') FROM system.numbers LIMIT 10\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYNTAX\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT number > 5 ? 'censor.net' : 'google' FROM system.numbers LIMIT 10;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  if(greater(number, 5), 'censor.net', 'google')\n0                                         google\n1                                         google\n2                                         google\n3                                         google\n4                                         google\n5                                         google\n6                                     censor.net\n7                                     censor.net\n8                                     censor.net\n9                                     censor.net",
                "source_shape": [
                    10,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"?\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nEXPLAIN SYNTAX SELECT number > 5 ? 'censor.net' : 'google' FROM system.numbers LIMIT 10;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 2 (line 2, col 1): EXPLAIN SYNTAX SELECT number > 5 ? 'censor.net' : 'google' FROM system.numbers LIMIT 10\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYNTAX\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01413_if_array_uuid.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT if(number % 2 = 0, [toUUID('00000000-e1fe-11e9-bb8f-853d60c00749')], [toUUID('11111111-e1fe-11e9-bb8f-853d60c00749')]) FROM numbers(5);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 44, e.displayText() = DB::Exception: Illegal column Const(Array(UInt128)) of third argument of function if, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01440_big_int_shift.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT bitShiftLeft(toInt128(1), number) x, bitShiftRight(x, number) y, toTypeName(x), toTypeName(y) FROM numbers(127) ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toInt128, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT bitShiftLeft(toInt256(1), number) x, bitShiftRight(x, number) y, toTypeName(x), toTypeName(y) FROM numbers(255) ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toInt256, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT bitShiftLeft(toUInt256(1), number) x, bitShiftRight(x, number) y, toTypeName(x), toTypeName(y) FROM numbers(256) ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toUInt256, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01441_array_combinator.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT number % 100 AS k, sumArray(emptyArrayUInt8()) AS v FROM numbers(10) GROUP BY k ORDER BY k;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   k  v\n0  0  0\n1  1  0\n2  2  0\n3  3  0\n4  4  0\n5  5  0\n6  6  0\n7  7  0\n8  8  0\n9  9  0",
                "source_shape": [
                    10,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01451_detach_drop_part.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS mt_01451;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE mt_01451 (v UInt8) ENGINE = MergeTree() order by tuple() SETTINGS old_parts_lifetime=0;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM STOP MERGES mt_01451;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO mt_01451 VALUES (0);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: mt_01451",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO mt_01451 VALUES (1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: mt_01451",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO mt_01451 VALUES (2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: mt_01451",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT v FROM mt_01451 ORDER BY v;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   v\n0  0\n1  1\n2  2",
                "source_shape": [
                    3,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: mt_01451",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE mt_01451 DETACH PART 'all_100_100_0';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 29): PART 'all_100_100_0'\n FORMAT Native. Expected PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DETACH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 232 }\n\nALTER TABLE mt_01451 DETACH PART 'all_2_2_0';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 3, col 29): PART 'all_2_2_0'\n FORMAT Native. Expected PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DETACH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT v FROM mt_01451 ORDER BY v;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   v\n0  0\n1  1\n2  2",
                "source_shape": [
                    3,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: mt_01451",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT name FROM system.detached_parts WHERE table = 'mt_01451' AND database = currentDatabase();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table system.detached_parts doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE mt_01451 ATTACH PART 'all_2_2_0';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 226, e.displayText() = DB::Exception: No columns in part all_2_2_0, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ATTACH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT v FROM mt_01451 ORDER BY v;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   v\n0  0\n1  1\n2  2",
                "source_shape": [
                    3,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: mt_01451",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT name FROM system.detached_parts WHERE table = 'mt_01451' AND database = currentDatabase();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table system.detached_parts doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- drop part --';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- drop part --'\n0   -- drop part --",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE mt_01451 DROP PART 'all_4_4_0';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 3, col 27): PART 'all_4_4_0'\n FORMAT Native. Expected one of: COLUMN, PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'all_4_4_0'\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE mt_01451 ATTACH PART 'all_4_4_0';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 226, e.displayText() = DB::Exception: No columns in part all_4_4_0, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ATTACH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 233 }\n\nSELECT v FROM mt_01451 ORDER BY v;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   v\n0  0\n1  1\n2  2",
                "source_shape": [
                    3,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: mt_01451",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT name FROM system.parts WHERE table = 'mt_01451' AND active AND database = currentDatabase();",
                "source_success": true,
                "source_exception": "",
                "source_result": "        name\n0  all_1_1_0\n1  all_2_2_0\n2  all_3_3_0",
                "source_shape": [
                    3,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- resume merges --';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- resume merges --'\n0   -- resume merges --",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM START MERGES mt_01451;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nOPTIMIZE TABLE mt_01451 FINAL;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT v FROM mt_01451 ORDER BY v;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   v\n0  0\n1  1\n2  2",
                "source_shape": [
                    3,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: mt_01451",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT name FROM system.parts WHERE table = 'mt_01451' AND active AND database = currentDatabase();",
                "source_success": true,
                "source_exception": "",
                "source_result": "        name\n0  all_1_3_1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE mt_01451;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: mt_01451",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01451_replicated_detach_drop_part_long.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: long, replica, no-replicated-database\n-- Tag no-replicated-database: Fails due to additional replicas or shards\n\nSET replication_alter_partitions_sync = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 166 (line 5, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS replica1 SYNC;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 33 (line 3, col 31): SYNC\n FORMAT Native. Expected one of: ON, Dot, token, FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYNC\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS replica2 SYNC;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 2, col 31): SYNC\n FORMAT Native. Expected one of: ON, Dot, token, FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYNC\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE replica1 (v UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/'||currentDatabase()||'test/01451/attach', 'r1') order by tuple() settings max_replicated_merges_in_queue = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Path in ZooKeeper must be a string literal\n\nMergeTree is a family of storage engines.\n\nMergeTrees are different in two ways:\n- they may be replicated and non-replicated;\n- they may do different actions on merge: nothing; sign collapse; sum; apply aggregete functions.\n\nSo we have 14 combinations:\n    MergeTree, CollapsingMergeTree, SummingMergeTree, AggregatingMergeTree, ReplacingMergeTree, GraphiteMergeTree, VersionedCollapsingMergeTree\n    ReplicatedMergeTree, ReplicatedCollapsingMergeTree, ReplicatedSummingMergeTree, ReplicatedAggregatingMergeTree, ReplicatedReplacingMergeTree, ReplicatedGraphiteMergeTree, ReplicatedVersionedCollapsingMergeTree\n\nIn most of cases, you need MergeTree or ReplicatedMergeTree.\n\nFor replicated merge trees, you need to supply a path in ZooKeeper and a replica name as the first two parameters.\nPath in ZooKeeper is like '/clickhouse/tables/01/' where /clickhouse/tables/ is a common prefix and 01 is a shard name.\nReplica name is like 'mtstat01-1' - it may be the hostname or any suitable string identifying replica.\nYou may use macro substitutions for these parameters. It's like ReplicatedMergeTree('/clickhouse/tables/{shard}/', '{replica}'...\nLook at the <macros> section in server configuration file.\n\nFor the Collapsing mode, the only parameter is the name of a sign column - a special column that is used to 'collapse' rows with the same primary key while merging.\n\nFor the Summing mode, the optional parameter is a list of columns to sum while merging. This list is passed in round brackets, like (PageViews, Cost).\nIf this parameter is omitted, the storage will sum all numeric columns except columns participating in the primary key.\n\nFor the Replacing mode, the optional parameter is the name of a 'version' column. While merging, for all rows with the same primary key, only one row is selected: the last row, if the version column was not specified, or the last row with the maximum version value, if specified.\n\nFor VersionedCollapsing mode, the 2 parameters are the name of a sign column and the name of a 'version' column. Version column must be in primary key. While merging, a pair of rows with the same primary key and different sign may collapse.\n\nYou can specify a partitioning expression in the PARTITION BY clause. It is optional but highly recommended.\nA common partitioning expression is some function of the event date column e.g. PARTITION BY toYYYYMM(EventDate) will partition the table by month.\nRows with different partition expression values are never merged together. That allows manipulating partitions with ALTER commands.\nAlso it acts as a kind of index.\n\nSorting key is specified in the ORDER BY clause. It is mandatory for all MergeTree types.\nIt is like (CounterID, EventDate, intHash64(UserID)) - a list of column names or functional expressions\nin round brackets.\nIf your sorting key has just one element, you may omit round brackets.\n\nBy default primary key is equal to the sorting key. You can specify a primary key that is a prefix of the\nsorting key in the PRIMARY KEY clause.\n\nCareful choice of the primary key is extremely important for processing short-time queries.\n\nOptional sampling expression can be specified in the SAMPLE BY clause. It is used to implement the SAMPLE clause in a SELECT query for approximate query execution.\nSampling expression must be one of the elements of the primary key tuple. For example, if your primary key is (CounterID, EventDate, intHash64(UserID)), your sampling expression might be intHash64(UserID).\n\nEngine settings can be specified in the SETTINGS clause. Full list is in the source code in the 'dbms/src/Storages/MergeTree/MergeTreeSettings.h' file.\nE.g. you can specify the index (primary key) granularity with SETTINGS index_granularity = 8192.\n\nExamples:\n\nMergeTree PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate) SETTINGS index_granularity = 8192\n\nMergeTree PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID), EventTime) SAMPLE BY intHash32(UserID)\n\nMergeTree PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID), EventTime) PRIMARY KEY (CounterID, EventDate) SAMPLE BY intHash32(UserID)\n\nCollapsingMergeTree(Sign) PARTITION BY StartDate SAMPLE BY intHash32(UserID) ORDER BY (CounterID, StartDate, intHash32(UserID), VisitID)\n\nSummingMergeTree PARTITION BY toMonday(EventDate) ORDER BY (OrderID, EventDate, BannerID, PhraseID, ContextType, RegionID, PageID, IsFlat, TypeID, ResourceNo)\n\nSummingMergeTree((Shows, Clicks, Cost, CostCur, ShowsSumPosition, ClicksSumPosition, SessionNum, SessionLen, SessionCost, GoalsNum, SessionDepth)) PARTITION BY toYYYYMM(EventDate) ORDER BY (OrderID, EventDate, BannerID, PhraseID, ContextType, RegionID, PageID, IsFlat, TypeID, ResourceNo)\n\nReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/hits', '{replica}') PARTITION BY EventDate ORDER BY (CounterID, EventDate, intHash32(UserID), EventTime) SAMPLE BY intHash32(UserID)\n\nFor further info please read the documentation: https://clickhouse.yandex/\n, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE replica2 (v UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/'||currentDatabase()||'test/01451/attach', 'r2') order by tuple() settings max_replicated_merges_in_queue = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Path in ZooKeeper must be a string literal\n\nMergeTree is a family of storage engines.\n\nMergeTrees are different in two ways:\n- they may be replicated and non-replicated;\n- they may do different actions on merge: nothing; sign collapse; sum; apply aggregete functions.\n\nSo we have 14 combinations:\n    MergeTree, CollapsingMergeTree, SummingMergeTree, AggregatingMergeTree, ReplacingMergeTree, GraphiteMergeTree, VersionedCollapsingMergeTree\n    ReplicatedMergeTree, ReplicatedCollapsingMergeTree, ReplicatedSummingMergeTree, ReplicatedAggregatingMergeTree, ReplicatedReplacingMergeTree, ReplicatedGraphiteMergeTree, ReplicatedVersionedCollapsingMergeTree\n\nIn most of cases, you need MergeTree or ReplicatedMergeTree.\n\nFor replicated merge trees, you need to supply a path in ZooKeeper and a replica name as the first two parameters.\nPath in ZooKeeper is like '/clickhouse/tables/01/' where /clickhouse/tables/ is a common prefix and 01 is a shard name.\nReplica name is like 'mtstat01-1' - it may be the hostname or any suitable string identifying replica.\nYou may use macro substitutions for these parameters. It's like ReplicatedMergeTree('/clickhouse/tables/{shard}/', '{replica}'...\nLook at the <macros> section in server configuration file.\n\nFor the Collapsing mode, the only parameter is the name of a sign column - a special column that is used to 'collapse' rows with the same primary key while merging.\n\nFor the Summing mode, the optional parameter is a list of columns to sum while merging. This list is passed in round brackets, like (PageViews, Cost).\nIf this parameter is omitted, the storage will sum all numeric columns except columns participating in the primary key.\n\nFor the Replacing mode, the optional parameter is the name of a 'version' column. While merging, for all rows with the same primary key, only one row is selected: the last row, if the version column was not specified, or the last row with the maximum version value, if specified.\n\nFor VersionedCollapsing mode, the 2 parameters are the name of a sign column and the name of a 'version' column. Version column must be in primary key. While merging, a pair of rows with the same primary key and different sign may collapse.\n\nYou can specify a partitioning expression in the PARTITION BY clause. It is optional but highly recommended.\nA common partitioning expression is some function of the event date column e.g. PARTITION BY toYYYYMM(EventDate) will partition the table by month.\nRows with different partition expression values are never merged together. That allows manipulating partitions with ALTER commands.\nAlso it acts as a kind of index.\n\nSorting key is specified in the ORDER BY clause. It is mandatory for all MergeTree types.\nIt is like (CounterID, EventDate, intHash64(UserID)) - a list of column names or functional expressions\nin round brackets.\nIf your sorting key has just one element, you may omit round brackets.\n\nBy default primary key is equal to the sorting key. You can specify a primary key that is a prefix of the\nsorting key in the PRIMARY KEY clause.\n\nCareful choice of the primary key is extremely important for processing short-time queries.\n\nOptional sampling expression can be specified in the SAMPLE BY clause. It is used to implement the SAMPLE clause in a SELECT query for approximate query execution.\nSampling expression must be one of the elements of the primary key tuple. For example, if your primary key is (CounterID, EventDate, intHash64(UserID)), your sampling expression might be intHash64(UserID).\n\nEngine settings can be specified in the SETTINGS clause. Full list is in the source code in the 'dbms/src/Storages/MergeTree/MergeTreeSettings.h' file.\nE.g. you can specify the index (primary key) granularity with SETTINGS index_granularity = 8192.\n\nExamples:\n\nMergeTree PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate) SETTINGS index_granularity = 8192\n\nMergeTree PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID), EventTime) SAMPLE BY intHash32(UserID)\n\nMergeTree PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID), EventTime) PRIMARY KEY (CounterID, EventDate) SAMPLE BY intHash32(UserID)\n\nCollapsingMergeTree(Sign) PARTITION BY StartDate SAMPLE BY intHash32(UserID) ORDER BY (CounterID, StartDate, intHash32(UserID), VisitID)\n\nSummingMergeTree PARTITION BY toMonday(EventDate) ORDER BY (OrderID, EventDate, BannerID, PhraseID, ContextType, RegionID, PageID, IsFlat, TypeID, ResourceNo)\n\nSummingMergeTree((Shows, Clicks, Cost, CostCur, ShowsSumPosition, ClicksSumPosition, SessionNum, SessionLen, SessionCost, GoalsNum, SessionDepth)) PARTITION BY toYYYYMM(EventDate) ORDER BY (OrderID, EventDate, BannerID, PhraseID, ContextType, RegionID, PageID, IsFlat, TypeID, ResourceNo)\n\nReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/hits', '{replica}') PARTITION BY EventDate ORDER BY (CounterID, EventDate, intHash32(UserID), EventTime) SAMPLE BY intHash32(UserID)\n\nFor further info please read the documentation: https://clickhouse.yandex/\n, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO replica1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (0);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 24 (line 3, col 22): SETTINGS insert_keeper_fault_injection_probability=0 VALUES (0). Expected one of: VALUES, OpeningRoundBracket, Dot, token, WITH, FORMAT, SELECT, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO replica1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 23 (line 2, col 22): SETTINGS insert_keeper_fault_injection_probability=0 VALUES (1). Expected one of: VALUES, OpeningRoundBracket, Dot, token, WITH, FORMAT, SELECT, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO replica1 SETTINGS insert_keeper_fault_injection_probability=0 VALUES (2);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 23 (line 2, col 22): SETTINGS insert_keeper_fault_injection_probability=0 VALUES (2). Expected one of: VALUES, OpeningRoundBracket, Dot, token, WITH, FORMAT, SELECT, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE replica1 DETACH PART 'all_100_100_0';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 29): PART 'all_100_100_0'\n FORMAT Native. Expected PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DETACH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 232 }\n\nSELECT v FROM replica1 ORDER BY v;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replica1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replica1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM SYNC REPLICA replica2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 33 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nALTER TABLE replica2 DETACH PART 'all_1_1_0';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 2, col 29): PART 'all_1_1_0'\n FORMAT Native. Expected PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DETACH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT v FROM replica1 ORDER BY v;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replica1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replica1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT name FROM system.detached_parts WHERE table = 'replica2' AND database = currentDatabase();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table system.detached_parts doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE replica2 ATTACH PART 'all_1_1_0' SETTINGS insert_keeper_fault_injection_probability=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 48 (line 3, col 46): SETTINGS insert_keeper_fault_injection_probability=0\n FORMAT Native. Expected one of: Comma, token, FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ATTACH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM SYNC REPLICA replica1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 33 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT v FROM replica1 ORDER BY v;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replica1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replica1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT name FROM system.detached_parts WHERE table = 'replica2' AND database = currentDatabase();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table system.detached_parts doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- drop part --';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- drop part --'\n0   -- drop part --",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE replica1 DROP PART 'all_3_3_0';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 3, col 27): PART 'all_3_3_0'\n FORMAT Native. Expected one of: COLUMN, PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'all_3_3_0'\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE replica1 ATTACH PART 'all_3_3_0';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replica1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ATTACH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 233 }\n\nSELECT v FROM replica1 ORDER BY v;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replica1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replica1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- resume merges --';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- resume merges --'\n0   -- resume merges --",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE replica1 MODIFY SETTING max_replicated_merges_in_queue = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 29): SETTING max_replicated_merges_in_queue = 1\n FORMAT Native. Expected one of: COLUMN, PRIMARY KEY, ORDER BY, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MODIFY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nOPTIMIZE TABLE replica1 FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replica1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT v FROM replica1 ORDER BY v;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replica1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replica1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT name FROM system.parts WHERE table = 'replica2' AND active AND database = currentDatabase();",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE replica1 SYNC;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 23 (line 3, col 21): SYNC\n FORMAT Native. Expected one of: ON, Dot, token, FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYNC\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE replica2 SYNC;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 2, col 21): SYNC\n FORMAT Native. Expected one of: ON, Dot, token, FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYNC\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01514_input_format_csv_enum_as_number_setting.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS table_with_enum_column_for_csv_insert;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE table_with_enum_column_for_csv_insert (\n    Id Int32,\n    Value Enum('ef' = 1, 'es' = 2)\n) ENGINE=Memory();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 50, e.displayText() = DB::Exception: Unknown data type family: Enum, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'ef'\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET input_format_csv_enum_as_number = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 44 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO table_with_enum_column_for_csv_insert FORMAT CSV 102,2\nSELECT * FROM table_with_enum_column_for_csv_insert;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.table_with_enum_column_for_csv_insert doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET input_format_csv_enum_as_number = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 44 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS table_with_enum_column_for_csv_insert;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01518_select_in_null.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t1 (`cA` String, `c1` String) ENGINE = MergeTree ORDER BY (cA, c1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ninsert into t1 select 'AAAAAAAAAAA', 'BBBBBB';",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where c1 in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from t1 where cast(c1 as Nullable(String)) in (select 'BBBBBB' union all select null);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01532_tuple_with_name_type.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS test_01532_1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS test_01532_2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS test_01532_3;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS test_01532_4;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE test_01532_1 (a Tuple(key String, value String)) ENGINE Memory();",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"key\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDESCRIBE TABLE test_01532_1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  name                             type default_type default_expression comment_expression\n0    a  Tuple(key String, value String)                                                   ",
                "source_shape": [
                    1,
                    5
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DESCRIBE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE test_01532_2 (a Tuple(Tuple(key String, value String))) ENGINE Memory();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 48 (line 3, col 46): String, value String))) ENGINE Memory()\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Tuple\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDESCRIBE TABLE test_01532_2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_01532_2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DESCRIBE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE test_01532_3 (a Array(Tuple(key String, value String))) ENGINE Memory();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 48 (line 3, col 46): String, value String))) ENGINE Memory()\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Tuple\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDESCRIBE TABLE test_01532_3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_01532_3 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DESCRIBE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE test_01532_4 (a Tuple(UInt8, Tuple(key String, value String))) ENGINE Memory();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 55 (line 3, col 53): String, value String))) ENGINE Memory()\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"UInt8\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDESCRIBE TABLE test_01532_4;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_01532_4 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DESCRIBE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE test_01532_1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_01532_1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE test_01532_2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_01532_2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_01532_2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE test_01532_3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_01532_3 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_01532_3",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE test_01532_4;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_01532_4 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_01532_4",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01540_verbatim_partition_pruning.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "drop table if exists xy;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ncreate table xy(x int, y int) engine MergeTree partition by intHash64(x) % 2 order by y settings index_granularity = 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MergeTree\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- intHash64(0) % 2 = 0\n-- intHash64(2) % 2 = 1\n-- intHash64(8) % 2 = 0\n-- intHash64(9) % 2 = 1\ninsert into xy values (0, 2), (2, 3), (8, 4), (9, 5);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: xy",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Now we have two partitions: 0 and 1, each of which contains 2 values.\n-- minmax index for the first partition is 0 <= x <= 8\n-- minmax index for the second partition is 2 <= x <= 9\n\nSET max_rows_to_read = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 214 (line 8, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect * from xy where intHash64(x) % 2 = intHash64(2) % 2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x  y\n0  2  3\n1  9  5",
                "source_shape": [
                    2,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: xy",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Equality is another special operator that can be treated as an always monotonic indicator for deterministic functions.\n-- minmax index is not enough.\nselect * from xy where x = 8;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x  y\n0  8  4",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: xy",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ndrop table if exists xy;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Test if we provide enough columns to generate a partition value\ndrop table if exists xyz;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ncreate table xyz(x int, y int, z int) engine MergeTree partition by if(toUInt8(x), y, z) order by x settings index_granularity = 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MergeTree\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into xyz values (1, 2, 3);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: xyz",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from xyz where y = 2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x  y  z\n0  1  2  3",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: xyz",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table if exists xyz;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Test if we obey strict rules when facing NOT contitions\ndrop table if exists test;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ncreate table test(d Date, k Int64, s String) Engine=MergeTree partition by (toYYYYMM(d),k) order by (d, k);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ninsert into test values ('2020-01-01', 1, '');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into test values ('2020-01-02', 1, '');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect * from test where d != '2020-01-01';",
                "source_success": true,
                "source_exception": "",
                "source_result": "           d  k s\n0 2020-01-02  1  ",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table test;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Test if single value partition pruning works correctly for Date = String\ndrop table if exists myTable;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE myTable (myDay Date, myOrder Int32, someData String) ENGINE = ReplacingMergeTree PARTITION BY floor(toYYYYMMDD(myDay), -1) ORDER BY (myOrder);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO myTable (myDay, myOrder) VALUES ('2021-01-01', 1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: myTable",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO myTable (myDay, myOrder) VALUES ('2021-01-02', 2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: myTable",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": " // This row should be returned\nINSERT INTO myTable (myDay, myOrder) VALUES ('2021-01-03', 3);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"/\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM myTable mt WHERE myDay = '2021-01-02';",
                "source_success": true,
                "source_exception": "",
                "source_result": "       myDay  myOrder someData\n0 2021-01-02        2         ",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: myTable",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table myTable;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: myTable",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01620_fix_simple_state_arg_type.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "drop table if exists ay;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ncreate table ay engine AggregatingMergeTree order by i as select 1 i, sumSimpleState(10) group by i;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function sumSimpleState, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"engine\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into ay values(40, 60);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.ay doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: ay",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into ay values(40, 50);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.ay doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: ay",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into ay values(20, 30);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.ay doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: ay",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\noptimize table ay;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.ay doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"optimize\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from ay;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.ay doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: ay",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into ay values(20, 30), (40, 10);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.ay doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: ay",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\noptimize table ay;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.ay doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"optimize\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from ay;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.ay doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: ay",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ndrop table if exists ay;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01642_if_nullable_regression.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT sumIf(dummy, dummy) FROM remote('127.0.0.{1,2}', view(SELECT cast(Null  AS Nullable(UInt8))  AS dummy FROM system.one));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 69 (line 1, col 69): cast(Null  AS Nullable(UInt8))  AS dummy FROM system.one))\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SELECT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sumIf(dummy, 1)     FROM remote('127.0.0.{1,2}', view(SELECT cast(Null  AS Nullable(UInt8))  AS dummy FROM system.one));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 70 (line 2, col 69): cast(Null  AS Nullable(UInt8))  AS dummy FROM system.one))\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SELECT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n-- Before #16610 it returns 0 while with this patch it will return NULL\nSELECT sumIf(dummy, dummy) FROM remote('127.0.0.{1,2}', view(SELECT cast(dummy AS Nullable(UInt8)) AS dummy FROM system.one));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 142 (line 3, col 69): cast(dummy AS Nullable(UInt8)) AS dummy FROM system.one))\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SELECT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sumIf(dummy, 1)     FROM remote('127.0.0.{1,2}', view(SELECT cast(dummy AS Nullable(UInt8)) AS dummy FROM system.one));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 70 (line 2, col 69): cast(dummy AS Nullable(UInt8)) AS dummy FROM system.one))\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SELECT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sumIf(n, 1) FROM remote('127.0.0.{1,2}', view(SELECT cast(* AS Nullable(UInt8)) AS n FROM system.numbers limit 10))\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 63 (line 3, col 61): cast(* AS Nullable(UInt8)) AS n FROM system.numbers limit 10))\n\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SELECT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01645_system_table_engines.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT * FROM system.table_engines WHERE name in ('MergeTree', 'ReplicatedCollapsingMergeTree') ORDER BY name FORMAT PrettyCompactNoEscapes;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 118 (line 1, col 118): PrettyCompactNoEscapes\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01671_merge_join_and_constants.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET output_format_pretty_color=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 35 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET allow_experimental_analyzer = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 39 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS table1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS table2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE table1(a String, b Date) ENGINE MergeTree order by a;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MergeTree\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE table2(c String, a String, d Date) ENGINE MergeTree order by c;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MergeTree\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO table1 VALUES ('a', '2018-01-01') ('b', '2018-01-01') ('c', '2018-01-01');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO table2 VALUES ('D', 'd', '2018-01-01') ('B', 'b', '2018-01-01') ('C', 'c', '2018-01-01');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nset join_algorithm = 'partial_merge';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 41 (line 4, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM table1 AS t1 ALL LEFT JOIN (SELECT *, '0.10', c, d AS b FROM table2) AS t2 USING (a, b) ORDER BY d, t1.a ASC FORMAT PrettyCompact settings max_rows_in_join = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 133 (line 3, col 131): PrettyCompact settings max_rows_in_join = 1\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ALL\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT pow('0.0000000257', NULL), pow(pow(NULL, NULL), NULL) - NULL, (val + NULL) = (rval * 0), * FROM (SELECT (val + 256) = (NULL * NULL), toLowCardinality(toNullable(dummy)) AS val FROM system.one) AS s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) AS s2 ON (val + 0) = (rval * 255) settings max_rows_in_join = 1;",
                "source_success": false,
                "source_exception": "data type 'Nothing' not understood",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ANY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS table1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS table2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01679_format_readable_time_delta_inf.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT formatReadableTimeDelta(arrayJoin([inf, -inf, nan]));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function formatReadableTimeDelta, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: inf, -inf, nan",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01720_union_distinct_with_limit.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT x\nFROM\n(\n    SELECT 1 AS x\n    UNION DISTINCT\n    SELECT 1\n)\nLIMIT 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 45 (line 5, col 11): DISTINCT\n    SELECT 1\n)\nLIMIT 1\n FORMAT Native. Expected ALL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DISTINCT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01774_case_sensitive_connection_id.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT connection_id(), CONNECTION_ID(), CoNnEcTiOn_Id(), connectionid(), CONNECTIONID(), CoNnEcTiOnId();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function connection_id, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: connection_id",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01776_decrypt_aead_size_check.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-fasttest\n-- Tag no-fasttest: Depends on OpenSSL\n\nSELECT decrypt('aes-128-gcm', 'text', 'key', 'IV');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function decrypt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: decrypt",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 36 }\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 26 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01784_parallel_formatting_memory.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET max_memory_usage = '1G';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 2, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT range(65535) FROM system.one ARRAY JOIN range(65536) AS number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 159, e.displayText() = DB::Exception: Timeout exceeded: elapsed 17.264187986 seconds, maximum: 5, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.one",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 241 }\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01795_TinyLog_rwlock_ub.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS underlying_01795;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE underlying_01795 (key UInt64) Engine=TinyLog();",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO FUNCTION remote('127.1', currentDatabase(), underlying_01795) SELECT toUInt64(number) FROM system.numbers LIMIT 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"remote\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM underlying_01795 FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 40 (line 2, col 39): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE underlying_01795;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: underlying_01795",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01825_replacing_vertical_merge.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET optimize_on_insert = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS replacing_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE replacing_table (a UInt32, b UInt32, c UInt32)\nENGINE = ReplacingMergeTree ORDER BY a\nSETTINGS vertical_merge_algorithm_min_rows_to_activate = 1,\n    vertical_merge_algorithm_min_columns_to_activate = 1,\n    index_granularity = 16,\n    min_bytes_for_wide_part = 0,\n    merge_max_block_size = 16;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting min_bytes_for_wide_part for storage ReplacingMergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM STOP MERGES replacing_table;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 39 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO replacing_table SELECT number, number, number from numbers(16);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replacing_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replacing_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO replacing_table SELECT 100, number, number from numbers(16);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replacing_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replacing_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sum(a), count() FROM replacing_table;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replacing_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replacing_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM START MERGES replacing_table;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 40 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE replacing_table FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replacing_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sum(a), count() FROM replacing_table;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replacing_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replacing_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS replacing_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE replacing_table\n(\n    key UInt64,\n    value UInt64\n)\nENGINE = ReplacingMergeTree\nORDER BY key\nSETTINGS\n    vertical_merge_algorithm_min_rows_to_activate=0,\n    vertical_merge_algorithm_min_columns_to_activate=0,\n    min_bytes_for_wide_part = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting min_bytes_for_wide_part for storage ReplacingMergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO replacing_table SELECT if(number == 8192, 8191, number), 1 FROM numbers(8193);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replacing_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replacing_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sum(key), count() from replacing_table;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replacing_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replacing_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE replacing_table FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replacing_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sum(key), count() from replacing_table;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replacing_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replacing_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS replacing_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01825_type_json_in_array.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-fasttest\n\nSET allow_experimental_object_type = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 63 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_json_array;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t_json_array (id UInt32, arr Array(JSON)) ENGINE = MergeTree ORDER BY id;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 50, e.displayText() = DB::Exception: Unknown data type family: JSON, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"JSON\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t_json_array FORMAT JSONEachRow {\"id\": 1, \"arr\": [{\"k1\": 1, \"k2\": {\"k3\": 2, \"k4\": 3}}, {\"k1\": 2, \"k2\": {\"k5\": \"foo\"}}]}\nINSERT INTO t_json_array FORMAT JSONEachRow {\"id\": 2, \"arr\": [{\"k1\": 3, \"k2\": {\"k3\": 4, \"k4\": 5}}]}\n\nSET output_format_json_named_tuples_as_objects = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_array doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM t_json_array ORDER BY id FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 49 (line 3, col 47): JSONEachRow\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT id, arr.k1, arr.k2.k3, arr.k2.k4, arr.k2.k5 FROM t_json_array ORDER BY id;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_array doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_json_array",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT arr FROM t_json_array ARRAY JOIN arr ORDER BY arr.k1 FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 69 (line 2, col 68): JSONEachRow\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT toTypeName(arr) FROM t_json_array LIMIT 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_array doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_json_array",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nTRUNCATE TABLE t_json_array;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_array doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"TRUNCATE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t_json_array FORMAT JSONEachRow {\"id\": 1, \"arr\": [{\"k1\": [{\"k2\": \"aaa\", \"k3\": \"bbb\"}, {\"k2\": \"ccc\"}]}]}\nINSERT INTO t_json_array FORMAT JSONEachRow {\"id\": 2, \"arr\": [{\"k1\": [{\"k3\": \"ddd\", \"k4\": 10}, {\"k4\": 20}], \"k5\": {\"k6\": \"foo\"}}]}\n\nSELECT * FROM t_json_array ORDER BY id FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_array doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT id, arr.k1.k2, arr.k1.k3, arr.k1.k4, arr.k5.k6 FROM t_json_array ORDER BY id;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_array doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_json_array",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT arrayJoin(arrayJoin(arr.k1)) AS k1 FROM t_json_array ORDER BY k1 FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 82 (line 3, col 80): JSONEachRow\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT toTypeName(arrayJoin(arrayJoin(arr.k1))) AS arr FROM t_json_array LIMIT 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_array doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_json_array",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE t_json_array;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_array doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_json_array",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM values('arr Array(JSON)', '[\\'{\"x\" : 1}\\']') FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 69 (line 3, col 67): JSONEachRow\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"values\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM values('arr Map(String, JSON)', '{\\'x\\' : \\'{\"y\" : 1}\\', \\'t\\' : \\'{\"y\" : 2}\\'}') FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 105 (line 2, col 104): JSONEachRow\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"values\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM values('arr Tuple(Int32, JSON)', '(1, \\'{\"y\" : 1}\\')', '(2, \\'{\"y\" : 2}\\')') FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 100 (line 2, col 99): JSONEachRow\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"values\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM format(JSONEachRow, '{\"arr\" : [{\"x\" : \"aaa\", \"y\" : [1,2,3]}]}') FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 87 (line 2, col 86): JSONEachRow\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"JSONEachRow\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM values('arr Array(JSON)', '[\\'{\"x\" : 1}\\']') FORMAT JSONEachRow;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 68 (line 2, col 67): JSONEachRow\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"values\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01825_type_json_sparse.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-fasttest\n\nDROP TABLE IF EXISTS t_json_sparse;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET allow_experimental_object_type = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 43 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t_json_sparse (data JSON)\nENGINE = MergeTree ORDER BY tuple()\nSETTINGS ratio_of_defaults_for_sparse_serialization = 0.1,\nmin_bytes_for_wide_part = 0, index_granularity = 8192, index_granularity_bytes = '10Mi';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 50, e.displayText() = DB::Exception: Unknown data type family: JSON, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM STOP MERGES t_json_sparse;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 37 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t_json_sparse VALUES ('{\"k1\": 1, \"k2\": {\"k3\": 4}}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_sparse doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_json_sparse",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t_json_sparse SELECT '{\"k1\": 2}' FROM numbers(200000);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_sparse doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_json_sparse",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT subcolumns.names, subcolumns.serializations, count() FROM system.parts_columns\nARRAY JOIN subcolumns\nWHERE database = currentDatabase()\n    AND table = 't_json_sparse' AND column = 'data' AND active\nGROUP BY subcolumns.names, subcolumns.serializations\nORDER BY subcolumns.names;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column subcolumns.names in block. There are only columns: active, database, table, column, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '=============';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '============='\n0   =============",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM START MERGES t_json_sparse;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 38 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nOPTIMIZE TABLE t_json_sparse FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_sparse doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT subcolumns.names, subcolumns.serializations, count() FROM system.parts_columns\nARRAY JOIN subcolumns\nWHERE database = currentDatabase()\n    AND table = 't_json_sparse' AND column = 'data' AND active\nGROUP BY subcolumns.names, subcolumns.serializations\nORDER BY subcolumns.names;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column subcolumns.names in block. There are only columns: active, database, table, column, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '=============';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '============='\n0   =============",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDETACH TABLE t_json_sparse;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_sparse doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"TABLE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nATTACH TABLE t_json_sparse;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 3, col 2): FORMAT Native. Expected one of: AS, ENGINE, ON, storage definition, OpeningRoundBracket, Dot, token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"TABLE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT subcolumns.names, subcolumns.serializations, count() FROM system.parts_columns\nARRAY JOIN subcolumns\nWHERE database = currentDatabase()\n    AND table = 't_json_sparse' AND column = 'data' AND active\nGROUP BY subcolumns.names, subcolumns.serializations\nORDER BY subcolumns.names;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column subcolumns.names in block. There are only columns: active, database, table, column, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t_json_sparse SELECT '{\"k1\": 2}' FROM numbers(200000);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_sparse doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_json_sparse",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '=============';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '============='\n0   =============",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE t_json_sparse FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_sparse doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT subcolumns.names, subcolumns.serializations, count() FROM system.parts_columns\nARRAY JOIN subcolumns\nWHERE database = currentDatabase()\n    AND table = 't_json_sparse' AND column = 'data' AND active\nGROUP BY subcolumns.names, subcolumns.serializations\nORDER BY subcolumns.names;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column subcolumns.names in block. There are only columns: active, database, table, column, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT data.k1, count(), sum(data.k2.k3) FROM t_json_sparse GROUP BY data.k1 ORDER BY data.k1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_json_sparse doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_json_sparse",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- DROP TABLE t_json_sparse;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 4, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01913_names_of_tuple_literal.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET allow_experimental_analyzer = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 38 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT ((1, 2), (2, 3), (3, 4)) FORMAT TSVWithNames;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 42 (line 3, col 40): TSVWithNames\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"TSVWithNames\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT ((1, 2), (2, 3), (3, 4)) FORMAT TSVWithNames SETTINGS legacy_column_name_of_tuple_literal = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 41 (line 2, col 40): TSVWithNames SETTINGS legacy_column_name_of_tuple_literal = 1\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"TSVWithNames\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01915_json_extract_raw_string.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "\nselect JSONExtract('{\"a\": \"123\", \"b\": 456, \"c\": [7, 8, 9]}', 'Tuple(a String, b String, c String)');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function JSONExtract, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: JSONExtract",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nwith '{\"string_value\":null}' as json select JSONExtract(json, 'string_value', 'Nullable(String)');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function JSONExtract, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"json\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nwith '{\"string_value\":null}' as json select JSONExtract(json, 'string_value', 'LowCardinality(Nullable(String))');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function JSONExtract, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"json\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect JSONExtractString('{\"a\": 123}', 'a');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function JSONExtractString, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: JSONExtractString",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect JSONExtractString('{\"a\": \"123\"}', 'a');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function JSONExtractString, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: JSONExtractString",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect JSONExtractString('{\"a\": null}', 'a');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function JSONExtractString, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: JSONExtractString",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01931_storage_merge_no_columns.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "drop table if exists data;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ncreate table data (key Int) engine=MergeTree() order by key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect 1 from merge(currentDatabase(), '^data$') prewhere _table in (NULL);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"_table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError ILLEGAL_PREWHERE }\nselect 1 from merge(currentDatabase(), '^data$') where _table in (NULL);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: merge",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table data;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: data",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01932_null_valid_identifier.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT `null` FROM remote('127.0.0.2', view(SELECT 1 AS `null`));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 52 (line 1, col 52): 1 AS `null`))\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SELECT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT `NULL` FROM remote('127.0.0.2', view(SELECT 1 AS `NULL`));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 53 (line 2, col 52): 1 AS `NULL`))\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SELECT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT `nULl`, null FROM remote('127.0.0.2', view(SELECT 1 AS `nULl`));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 59 (line 2, col 58): 1 AS `nULl`))\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SELECT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "01942_snowflakeToDateTime.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- -- Error cases\nSELECT snowflakeToDateTime();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function snowflakeToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: snowflakeToDateTime",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\nSELECT snowflakeToDateTime64();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function snowflakeToDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: snowflakeToDateTime64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\n\nSELECT snowflakeToDateTime('abc');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function snowflakeToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: snowflakeToDateTime",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT snowflakeToDateTime64('abc');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function snowflakeToDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: snowflakeToDateTime64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\n\nSELECT snowflakeToDateTime('abc', 123);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function snowflakeToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: snowflakeToDateTime",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\nSELECT snowflakeToDateTime64('abc', 123);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function snowflakeToDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: snowflakeToDateTime64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- {serverError ILLEGAL_TYPE_OF_ARGUMENT}\n\nSELECT 'const column';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'const column'\n0   const column",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH\n\tCAST(1426860704886947840 AS Int64) AS i64,\n\t'UTC' AS tz\nSELECT\n\ttz,\n\ti64,\n\tsnowflakeToDateTime(i64, tz) as dt,\n\ttoTypeName(dt),\n\tsnowflakeToDateTime64(i64, tz) as dt64,\n\ttoTypeName(dt64);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function snowflakeToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"1426860704886947840\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH\n\tCAST(1426860704886947840 AS Int64) AS i64,\n\t'Asia/Shanghai' AS tz\nSELECT\n\ttz,\n\ti64,\n\tsnowflakeToDateTime(i64, tz) as dt,\n\ttoTypeName(dt),\n\tsnowflakeToDateTime64(i64, tz) as dt64,\n\ttoTypeName(dt64);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function snowflakeToDateTime, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"1426860704886947840\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nDROP TABLE IF EXISTS tab;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE tab(val Int64, tz String) engine=Log;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO tab VALUES (42, 'Asia/Singapore');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: tab",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 1 FROM tab WHERE snowflakeToDateTime(42::Int64, tz) != now() SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 49 (line 3, col 47): ::Int64, tz) != now() SETTINGS allow_nonconst_timezone_arguments = 1\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 1 FROM tab WHERE snowflakeToDateTime64(42::Int64, tz) != now() SETTINGS allow_nonconst_timezone_arguments = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 2, col 49): ::Int64, tz) != now() SETTINGS allow_nonconst_timezone_arguments = 1\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE tab;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: tab",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02012_zookeeper_changed_enum_type_incompatible.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: zookeeper, no-replicated-database\n-- Tag no-replicated-database: Fails due to additional replicas or shards\n\ndrop table if exists enum_alter_issue;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ncreate table enum_alter_issue (a Enum16('one' = 1, 'two' = 2), b Int)\nengine = ReplicatedMergeTree('/clickhouse/tables/{database}/test_02012/enum_alter_issue', 'r2')\nORDER BY b;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'one'\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ninsert into enum_alter_issue values ('one', 1), ('two', 1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.enum_alter_issue doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: enum_alter_issue",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nalter table enum_alter_issue detach partition id 'all';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.enum_alter_issue doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"detach\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nalter table enum_alter_issue modify column a Enum8('one' = 1, 'two' = 2, 'three' = 3);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.enum_alter_issue doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"modify\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into enum_alter_issue values ('one', 1), ('two', 1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.enum_alter_issue doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: enum_alter_issue",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nalter table enum_alter_issue attach partition id 'all';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.enum_alter_issue doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"attach\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from enum_alter_issue;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.enum_alter_issue doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: enum_alter_issue",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table enum_alter_issue;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.enum_alter_issue doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: enum_alter_issue",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02023_nullable_int_uint_where.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "drop table if exists t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nset allow_suspicious_low_cardinality_types = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 51 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ncreate table t1 (id LowCardinality(Nullable(Int64))) engine MergeTree order by id settings allow_nullable_key = 1, index_granularity = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 44, e.displayText() = DB::Exception: Cannot create table with column 'id' which type is 'LowCardinality(Nullable(Int64))' because LowCardinality type is not allowed. Set setting allow_experimental_low_cardinality_type = 1 in order to allow it., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Nullable\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ninsert into t1 values (21585718595728998), (null);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect * from t1 where id = 21585718595728998;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ndrop table t1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02024_compile_expressions_with_short_circuit_evaluation.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- { echo }\nselect 1+number+multiIf(number == 1, cityHash64(number), number) from numbers(1) settings compile_expressions=1, min_count_to_compile_expression=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting min_count_to_compile_expression, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"compile_expressions\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02030_tuple_filter.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET allow_experimental_analyzer = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 38 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS test_tuple_filter;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE test_tuple_filter (id UInt32, value String, log_date Date) Engine=MergeTree() ORDER BY id PARTITION BY log_date SETTINGS index_granularity = 3, index_granularity_bytes = '10Mi';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting index_granularity_bytes for storage MergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO test_tuple_filter VALUES (1,'A','2021-01-01'),(2,'B','2021-01-01'),(3,'C','2021-01-01'),(4,'D','2021-01-02'),(5,'E','2021-01-02');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET force_primary_key = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET optimize_move_to_prewhere = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 37 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM test_tuple_filter WHERE (id, value) = (1, 'A');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_tuple_filter WHERE (1, 'A') = (id, value);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_tuple_filter WHERE (id, value) = (1, 'A') AND (id, log_date) = (1, '2021-01-01');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_tuple_filter WHERE ((id, value), id * 2) = ((1, 'A'), 2);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_tuple_filter WHERE ((id, value), log_date) = ((1, 'A'), '2021-01-01');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- not supported functions (concat) do not lost\nSELECT * FROM test_tuple_filter WHERE (id, value, value||'foo') = ('1', 'A', 'A');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM test_tuple_filter WHERE (1, (1, (1, (1, (id, value))))) = (1, (1, (1, (1, (1, 'A')))));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM test_tuple_filter WHERE (1, value) = (id, 'A');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_tuple_filter WHERE (1, (1, (1, (1, tuple(id))))) = (1, (1, (1, (1, tuple(1)))));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_tuple_filter WHERE ((id, value), tuple(log_date)) = ((1, 'A'), tuple('2021-01-01'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET force_index_by_date = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET force_primary_key = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_tuple_filter WHERE (log_date, value) = ('2021-01-01', 'A');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET force_index_by_date = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET force_primary_key = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM test_tuple_filter WHERE (1, value) = (id, 'A');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_tuple_filter WHERE tuple(id) = tuple(1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test_tuple_filter WHERE (id, (id, id) = (1, NULL)) == (NULL, NULL);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM test_tuple_filter WHERE (log_date, value) = tuple('2021-01-01');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 43 }\nSELECT * FROM test_tuple_filter WHERE (id, value) = tuple(1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 43 }\nSELECT * FROM test_tuple_filter WHERE tuple(id, value) = tuple(value, id);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 386 }\nSELECT * FROM test_tuple_filter WHERE equals((id, value));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_tuple_filter doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_tuple_filter",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 42 }\n\nDROP TABLE IF EXISTS test_tuple_filter;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02067_lost_part_s3.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-fasttest\n\nDROP TABLE IF EXISTS partslost_0;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS partslost_1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS partslost_2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE partslost_0 (x String) ENGINE=ReplicatedMergeTree('/clickhouse/table/{database}_02067_lost/partslost', '0') ORDER BY tuple()\n    SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, old_parts_lifetime = 1,\n    cleanup_delay_period = 1, cleanup_delay_period_random_add = 1, cleanup_thread_preferred_points_per_iteration=0,\n    index_granularity = 8192, index_granularity_bytes = '10Mi';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting min_rows_for_wide_part for storage ReplicatedMergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE partslost_1 (x String) ENGINE=ReplicatedMergeTree('/clickhouse/table/{database}_02067_lost/partslost', '1') ORDER BY tuple()\n    SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, old_parts_lifetime = 1,\n    cleanup_delay_period = 1, cleanup_delay_period_random_add = 1, cleanup_thread_preferred_points_per_iteration=0,\n    index_granularity = 8192, index_granularity_bytes = '10Mi';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting min_rows_for_wide_part for storage ReplicatedMergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE partslost_2 (x String) ENGINE=ReplicatedMergeTree('/clickhouse/table/{database}_02067_lost/partslost', '2') ORDER BY tuple()\n    SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, old_parts_lifetime = 1,\n    cleanup_delay_period = 1, cleanup_delay_period_random_add = 1, cleanup_thread_preferred_points_per_iteration=0,\n    index_granularity = 8192, index_granularity_bytes = '10Mi';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting min_rows_for_wide_part for storage ReplicatedMergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nINSERT INTO partslost_0 SELECT toString(number) AS x from system.numbers LIMIT 10000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.partslost_0 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partslost_0",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE partslost_0 ADD INDEX idx x TYPE tokenbf_v1(285000, 3, 12345) GRANULARITY 3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 29): INDEX idx x TYPE tokenbf_v1(285000, 3, 12345) GRANULARITY 3\n FORMAT Native. Expected COLUMN, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partslost_0",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET mutations_sync = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE partslost_0 MATERIALIZE INDEX idx;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 3, col 25): MATERIALIZE INDEX idx\n FORMAT Native. Expected one of: ON, FREEZE, a list of ALTER commands, ALTER command, ADD COLUMN, DROP COLUMN, CLEAR COLUMN, MODIFY COLUMN, COMMENT COLUMN, MODIFY PRIMARY KEY, MODIFY ORDER BY, ATTACH PARTITION, DETACH PARTITION, DROP PARTITION, ATTACH PART, FETCH PARTITION, REPLACE PARTITION, DELETE WHERE, UPDATE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MATERIALIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- In worst case doesn't check anything, but it's not flaky\nselect sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 86 (line 4, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE partslost_0 DROP INDEX idx;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 3, col 30): INDEX idx\n FORMAT Native. Expected one of: COLUMN, PARTITION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"INDEX\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect count() from partslost_0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.partslost_0 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partslost_0",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from partslost_1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.partslost_1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partslost_1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect count() from partslost_2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.partslost_2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partslost_2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS partslost_0;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS partslost_1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS partslost_2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02102_sql_user_defined_functions_create_if_not_exists.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-parallel\n\nCREATE FUNCTION IF NOT EXISTS 02102_test_function AS x -> x + 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 3, col 8): FUNCTION IF NOT EXISTS 02102_test_function AS x -> x + 1\n FORMAT Native. Expected one of: VIEW, MATERIALIZED, DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FUNCTION\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 02102_test_function(1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 9 (line 2, col 8): 02102_test_function(1)\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02102_test_function\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE FUNCTION 02102_test_function AS x -> x + 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 10 (line 3, col 8): FUNCTION 02102_test_function AS x -> x + 1\n FORMAT Native. Expected one of: VIEW, MATERIALIZED, DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FUNCTION\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " --{serverError 609}\nCREATE FUNCTION IF NOT EXISTS 02102_test_function AS x -> x + 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 2, col 8): FUNCTION IF NOT EXISTS 02102_test_function AS x -> x + 1\n FORMAT Native. Expected one of: VIEW, MATERIALIZED, DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FUNCTION\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP FUNCTION 02102_test_function;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 7 (line 2, col 6): FUNCTION 02102_test_function\n FORMAT Native. Expected one of: DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FUNCTION\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02124_encrypt_decrypt_nullable.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-fasttest\n-- Tag no-fasttest: Depends on OpenSSL\n\n-------------------------------------------------------------------------------\n-- Validate that encrypt/decrypt (and mysql versions) work against Nullable(String).\n-- null gets encrypted/decrypted as null, non-null encrypted/decrypted as usual.\n-------------------------------------------------------------------------------\n-- using nullIf since that is the easiest way to produce `Nullable(String)` with a `null` value\n\n-----------------------------------------------------------------------------------------------------------------------------------\n-- MySQL compatibility\nSELECT 'aes_encrypt_mysql';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'aes_encrypt_mysql'\n0   aes_encrypt_mysql",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT aes_encrypt_mysql('aes-256-ecb', CAST(null as Nullable(String)), 'test_key________________________');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function aes_encrypt_mysql, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 'aes-256-ecb' as mode, 'Hello World!' as plaintext, 'test_key________________________' as key\nSELECT hex(aes_encrypt_mysql(mode, toNullable(plaintext), key));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function aes_encrypt_mysql, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"mode\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'aes_decrypt_mysql';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'aes_decrypt_mysql'\n0   aes_decrypt_mysql",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT aes_decrypt_mysql('aes-256-ecb', CAST(null as Nullable(String)), 'test_key________________________');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function aes_decrypt_mysql, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 'aes-256-ecb' as mode, unhex('D1B43643E1D0E9390E39BA4EAE150851') as ciphertext, 'test_key________________________' as key\nSELECT hex(aes_decrypt_mysql(mode, toNullable(ciphertext), key));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function aes_decrypt_mysql, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"mode\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-----------------------------------------------------------------------------------------------------------------------------------\n-- encrypt both non-null and null values of Nullable(String)\nSELECT 'encrypt';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'encrypt'\n0   encrypt",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 'aes-256-ecb' as mode, 'test_key________________________' as key\nSELECT mode, encrypt(mode, CAST(null as Nullable(String)), key);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function encrypt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"mode\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 'aes-256-gcm' as mode, 'test_key________________________' as key, 'test_iv_____' as iv\nSELECT mode, encrypt(mode, CAST(null as Nullable(String)), key, iv);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function encrypt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"mode\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 'aes-256-ecb' as mode, 'test_key________________________' as key\nSELECT mode, hex(encrypt(mode, toNullable('Hello World!'), key));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function encrypt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"mode\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 'aes-256-gcm' as mode, 'test_key________________________' as key, 'test_iv_____' as iv\nSELECT mode, hex(encrypt(mode, toNullable('Hello World!'), key, iv));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function encrypt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"mode\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-----------------------------------------------------------------------------------------------------------------------------------\n-- decrypt both non-null and null values of Nullable(String)\n\nSELECT 'decrypt';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'decrypt'\n0   decrypt",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 'aes-256-ecb' as mode, 'test_key________________________' as key\nSELECT mode, decrypt(mode, CAST(null as Nullable(String)), key);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function decrypt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"mode\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 'aes-256-gcm' as mode, 'test_key________________________' as key, 'test_iv_____' as iv\nSELECT mode, decrypt(mode, CAST(null as Nullable(String)), key, iv);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function decrypt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"mode\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 'aes-256-ecb' as mode, unhex('D1B43643E1D0E9390E39BA4EAE150851') as ciphertext, 'test_key________________________' as key\nSELECT mode, decrypt(mode, toNullable(ciphertext), key);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function decrypt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"mode\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 'aes-256-gcm' as mode, unhex('219E6478A1A3BB5B686DA4BAD70323F192EFEDCCBBD6F49E78A7E2F6') as ciphertext, 'test_key________________________' as key, 'test_iv_____' as iv\nSELECT mode, decrypt(mode, toNullable(ciphertext), key, iv);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function decrypt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"mode\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02155_read_in_order_max_rows_to_read.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET merge_tree_read_split_ranges_into_intersecting_and_non_intersecting_injection_probability = 0.0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 102 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS t_max_rows_to_read;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t_max_rows_to_read (a UInt64)\nENGINE = MergeTree ORDER BY a\nSETTINGS index_granularity = 4, index_granularity_bytes = '10Mi';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting index_granularity_bytes for storage MergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t_max_rows_to_read SELECT number FROM numbers(100);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_max_rows_to_read doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_max_rows_to_read",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_threads = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 24 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET optimize_read_in_order = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 34 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT a FROM t_max_rows_to_read WHERE a = 10 SETTINGS max_rows_to_read = 4;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_max_rows_to_read doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT a FROM t_max_rows_to_read ORDER BY a LIMIT 5 SETTINGS max_rows_to_read = 12;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_max_rows_to_read doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT a FROM t_max_rows_to_read WHERE a = 10 OR a = 20 SETTINGS max_rows_to_read = 12;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_max_rows_to_read doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT a FROM t_max_rows_to_read ORDER BY a LIMIT 20 FORMAT Null SETTINGS max_rows_to_read = 12;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 63 (line 3, col 61): Null SETTINGS max_rows_to_read = 12\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 158 }\nSELECT a FROM t_max_rows_to_read WHERE a > 10 ORDER BY a LIMIT 5 FORMAT Null SETTINGS max_rows_to_read = 12;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 97 (line 2, col 73): Null SETTINGS max_rows_to_read = 12\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 158 }\nSELECT a FROM t_max_rows_to_read WHERE a = 10 OR a = 20 FORMAT Null SETTINGS max_rows_to_read = 4;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 88 (line 2, col 64): Null SETTINGS max_rows_to_read = 4\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"FORMAT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 158 }\n\nDROP TABLE t_max_rows_to_read;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_max_rows_to_read doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_max_rows_to_read",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02156_storage_merge_prewhere.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET optimize_move_to_prewhere = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 36 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET enable_multiple_prewhere_read_steps = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 47 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET prefer_localhost_replica = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 36 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- Make sure plan is reliable\n\nDROP TABLE IF EXISTS t_02156_mt1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_mt2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_log;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_dist;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_merge1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_merge2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_merge3;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t_02156_mt1 (k UInt32, v String) ENGINE = MergeTree ORDER BY k SETTINGS min_bytes_for_wide_part=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting min_bytes_for_wide_part for storage MergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t_02156_mt2 (k UInt32, v String) ENGINE = MergeTree ORDER BY k SETTINGS min_bytes_for_wide_part=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting min_bytes_for_wide_part for storage MergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t_02156_log (k UInt32, v String) ENGINE = Log;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t_02156_dist (k UInt32, v String) ENGINE = Distributed(test_shard_localhost, currentDatabase(), t_02156_mt1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t_02156_merge1 (k UInt32, v String) ENGINE = Merge(currentDatabase(), 't_02156_mt1|t_02156_mt2');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t_02156_merge2 (k UInt32, v String) ENGINE = Merge(currentDatabase(), 't_02156_mt1|t_02156_log');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t_02156_merge3 (k UInt32, v String) ENGINE = Merge(currentDatabase(), 't_02156_mt2|t_02156_dist');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t_02156_mt1 SELECT number, toString(number) FROM numbers(10000);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_02156_mt1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_02156_mt1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t_02156_mt2 SELECT number, toString(number) FROM numbers(10000);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_02156_mt2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_02156_mt2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t_02156_log SELECT number, toString(number) FROM numbers(10000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_02156_log",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT replaceRegexpAll(explain, '__table1\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02156_merge1 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 67 (line 3, col 65): EXPLAIN actions=1 SELECT count() FROM t_02156_merge1 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%'\n FORMAT Nati. Expected one of: SELECT subquery, list of elements, SELECT query, WITH, SELECT, SELECT query, possibly with UNION, SELECT query, subquery, possibly with UNION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM t_02156_merge1 WHERE k = 3 AND notEmpty(v);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        0",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_02156_merge1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT replaceRegexpAll(explain, '__table1\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02156_merge2 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 67 (line 3, col 65): EXPLAIN actions=1 SELECT count() FROM t_02156_merge2 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%'\n FORMAT Nati. Expected one of: SELECT subquery, list of elements, SELECT query, WITH, SELECT, SELECT query, possibly with UNION, SELECT query, subquery, possibly with UNION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM t_02156_merge2 WHERE k = 3 AND notEmpty(v);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0        1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_02156_merge2",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT replaceRegexpAll(explain, '__table1\\.|_UInt8', '') FROM (EXPLAIN actions=1 SELECT count() FROM t_02156_merge3 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 67 (line 3, col 65): EXPLAIN actions=1 SELECT count() FROM t_02156_merge3 WHERE k = 3 AND notEmpty(v)) WHERE explain LIKE '%Prewhere%' OR explain LIKE '%Filter column%'\n FORMAT Nati. Expected one of: SELECT subquery, list of elements, SELECT query, WITH, SELECT, SELECT query, possibly with UNION, SELECT query, subquery, possibly with UNION, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM t_02156_merge3 WHERE k = 3 AND notEmpty(v);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_02156_mt1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_02156_merge3",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS t_02156_mt1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_mt2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_log;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_dist;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_merge1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_merge2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_02156_merge3;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02207_ttl_move_if_exists.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS t_ttl_move_if_exists;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t_ttl_move_if_exists (d DateTime, a UInt32)\nENGINE = MergeTree ORDER BY tuple()\nTTL d TO DISK IF EXISTS 'non_existing_disk';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 96 (line 5, col 1): TTL d TO DISK IF EXISTS 'non_existing_disk'\n FORMAT Native. Expected one of: QuestionMark, token, OR, BETWEEN, IS, PRIMARY KEY, PARTITION BY, SAMPLE BY, SETTINGS, FORMAT, INTO OUTFILE, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSHOW CREATE TABLE t_ttl_move_if_exists;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 390, e.displayText() = DB::Exception: There is no metadata file for table t_ttl_move_if_exists, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS t_ttl_move_if_exists;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02210_toColumnTypeName_toLowCardinality_const.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT toColumnTypeName(toLowCardinality(1));",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: [toColumnTypeName(toLowCardinality(1))]\nIndex: []",
                "source_shape": [
                    0,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toLowCardinality",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02240_filesystem_query_cache.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-parallel, no-fasttest, no-s3-storage, no-random-settings\n\n-- { echo }\n\nSYSTEM DROP FILESYSTEM CACHE;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 96 (line 5, col 13): FILESYSTEM CACHE\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET enable_filesystem_cache_on_write_operations=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 53 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET skip_download_if_exceeds_query_cache=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET filesystem_cache_max_download_size=128;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS test;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE test (key UInt32, value String)\nEngine=MergeTree()\nORDER BY key\nSETTINGS min_bytes_for_wide_part = 10485760,\n         compress_marks=false,\n         compress_primary_key=false,\n         disk = disk(\n            type = cache,\n            max_size = '128Mi',\n            path = 'filesystem_query_cache/',\n            cache_on_write_operations= 1,\n            enable_filesystem_query_cache_limit = 1,\n            delayed_cleanup_interval_ms = 100,\n            disk = 's3_disk');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 148 (line 6, col 25): false,\n         compress_primary_key=false,\n         disk = disk(\n            type = cache,\n            max_size = '128Mi',\n            path = 'filesystem_query. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM DROP FILESYSTEM CACHE;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): FILESYSTEM CACHE\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO test SELECT number, toString(number) FROM numbers(100);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT  * FROM test FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 2, col 28): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT file_segment_range_begin, file_segment_range_end, size FROM system.filesystem_cache ORDER BY file_segment_range_end, size;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table system.filesystem_cache doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.filesystem_cache",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM DROP FILESYSTEM CACHE;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): FILESYSTEM CACHE\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT file_segment_range_begin, file_segment_range_end, size FROM system.filesystem_cache;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table system.filesystem_cache doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.filesystem_cache",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM test FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 28 (line 2, col 27): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT file_segment_range_begin, file_segment_range_end, size FROM system.filesystem_cache;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table system.filesystem_cache doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.filesystem_cache",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM DROP FILESYSTEM CACHE;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): FILESYSTEM CACHE\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT file_segment_range_begin, file_segment_range_end, size FROM system.filesystem_cache;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table system.filesystem_cache doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.filesystem_cache",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02246_flatten_tuple.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-fasttest\n\nDROP TABLE IF EXISTS t_flatten_tuple;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_flatten_object;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET flatten_nested = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t_flatten_tuple(t Tuple(t1 Nested(a UInt32, s String), b UInt32, t2 Tuple(k String, v UInt32))) ENGINE = Memory;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error (data type): failed at position 24: UInt32, s String)), b UInt32, t2 Tuple(k String, v UInt32)). Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"t1\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t_flatten_tuple VALUES (([(1, 'a'), (2, 'b')], 3, ('c', 4)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_flatten_tuple doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_flatten_tuple",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT flattenTuple(t) AS ft, toTypeName(ft) FROM t_flatten_tuple;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_flatten_tuple doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_flatten_tuple",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET allow_experimental_object_type = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 43 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t_flatten_object(data JSON) ENGINE = Memory;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 50, e.displayText() = DB::Exception: Unknown data type family: JSON, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t_flatten_object VALUES ('{\"id\": 1, \"obj\": {\"k1\": 1, \"k2\": {\"k3\": 2, \"k4\": [{\"k5\": 3}, {\"k5\": 4}]}}, \"s\": \"foo\"}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_flatten_object doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_flatten_object",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t_flatten_object VALUES ('{\"id\": 2, \"obj\": {\"k2\": {\"k3\": \"str\", \"k4\": [{\"k6\": 55}]}, \"some\": 42}, \"s\": \"bar\"}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_flatten_object doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_flatten_object",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT toTypeName(data), toTypeName(flattenTuple(data)) FROM t_flatten_object LIMIT 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_flatten_object doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_flatten_object",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT untuple(flattenTuple(data)) FROM t_flatten_object ORDER BY data.id;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_flatten_object doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_flatten_object",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS t_flatten_tuple;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t_flatten_object;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02271_replace_partition_many_tables.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-fasttest\n\nDROP TABLE IF EXISTS replace_partition_source;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS replace_partition_dest1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS replace_partition_dest1_2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS replace_partition_dest2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS replace_partition_dest2_2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE replace_partition_source\n(\n    key UInt64\n)\nENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/source', '1')\nPARTITION BY key\nORDER BY tuple();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO replace_partition_source VALUES (1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_source doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replace_partition_source",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE replace_partition_dest1\n(\n    key UInt64\n)\nENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest1', '1')\nPARTITION BY key\nORDER BY tuple();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE replace_partition_dest1_2\n(\n    key UInt64\n)\nENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest1', '2')\nPARTITION BY key\nORDER BY tuple();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nCREATE TABLE replace_partition_dest2\n(\n    key UInt64\n)\nENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest2', '1')\nPARTITION BY key\nORDER BY tuple();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE replace_partition_dest2_2\n(\n    key UInt64\n)\nENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest2', '2')\nPARTITION BY key\nORDER BY tuple();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nALTER TABLE replace_partition_dest1 REPLACE PARTITION 1 FROM replace_partition_source;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_dest1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"REPLACE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nALTER TABLE replace_partition_dest2 REPLACE PARTITION 1 FROM replace_partition_source;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_dest2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"REPLACE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE replace_partition_source FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_source doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 26 (line 3, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE replace_partition_dest1_2 FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_dest1_2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nOPTIMIZE TABLE replace_partition_dest2_2 FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_dest2_2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 26 (line 3, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sleep(3) FORMAT Null;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 24): Null\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Null\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM replace_partition_source;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_source doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replace_partition_source",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM replace_partition_dest1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_dest1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replace_partition_dest1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM replace_partition_dest2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_dest2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replace_partition_dest2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM replace_partition_dest1_2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_dest1_2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replace_partition_dest1_2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM replace_partition_dest2_2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.replace_partition_dest2_2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: replace_partition_dest2_2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\n--DROP TABLE IF EXISTS replace_partition_source;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 53 (line 5, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n--DROP TABLE IF EXISTS replace_partition_dest1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n--DROP TABLE IF EXISTS replace_partition_dest1_2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 52 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n--DROP TABLE IF EXISTS replace_partition_dest2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n--DROP TABLE IF EXISTS replace_partition_dest2_2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 52 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02276_full_sort_join_unsupported.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t1 (key UInt32, val UInt32) ENGINE = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t1 VALUES (1, 1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t2 (key UInt32, val UInt32) ENGINE = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t2 VALUES (1, 2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t2",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET join_algorithm = 'full_sorting_merge';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 4, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM t1 JOIN t2 ON t1.key = t2.key AND t2.key > 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 403, e.displayText() = DB::Exception: Invalid expression for JOIN ON. Expected equals expression, got t2.key > 0. Supported syntax: JOIN ON Expr([table.]column, ...) = Expr([table.]column, ...) [AND Expr([table.]column, ...) = Expr([table.]column, ...) ...], e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nSELECT * FROM t1 JOIN t2 ON t1.key = t2.key AND t1.key > 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 403, e.displayText() = DB::Exception: Invalid expression for JOIN ON. Expected equals expression, got t1.key > 0. Supported syntax: JOIN ON Expr([table.]column, ...) = Expr([table.]column, ...) [AND Expr([table.]column, ...) = Expr([table.]column, ...) ...], e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nSELECT * FROM t1 JOIN t2 ON t1.key = t2.key OR t1.val = t2.key;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 403, e.displayText() = DB::Exception: Invalid expression for JOIN ON. Expected equals expression, got (t1.key = t2.key) OR (t1.val = t2.key). Supported syntax: JOIN ON Expr([table.]column, ...) = Expr([table.]column, ...) [AND Expr([table.]column, ...) = Expr([table.]column, ...) ...], e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nSELECT * FROM t1 ANTI JOIN t2 ON t1.key = t2.key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   key  val  default.t2.key  default.t2.val\n0    1    1               1               2",
                "source_shape": [
                    1,
                    4
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nSELECT * FROM t1 SEMI JOIN t2 ON t1.key = t2.key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   key  val  default.t2.key  default.t2.val\n0    1    1               1               2",
                "source_shape": [
                    1,
                    4
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nSELECT * FROM t1 ASOF JOIN t2 ON t1.key = t2.key AND t1.val > t2.val;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 403, e.displayText() = DB::Exception: Invalid expression for JOIN ON. Expected equals expression, got t1.val > t2.val. Supported syntax: JOIN ON Expr([table.]column, ...) = Expr([table.]column, ...) [AND Expr([table.]column, ...) = Expr([table.]column, ...) ...], e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nSELECT * FROM t1 ANY JOIN t2 ON t1.key = t2.key SETTINGS any_join_distinct_right_table_keys = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting any_join_distinct_right_table_keys, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nSELECT * FROM t1 JOIN t2 USING (key) SETTINGS join_use_nulls = 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   key  val  default.t2.key  default.t2.val\n0    1    1               1               2",
                "source_shape": [
                    1,
                    4
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETTINGS\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nSELECT * FROM ( SELECT key, sum(val) AS val FROM t1 GROUP BY key WITH TOTALS ) as t1\nJOIN ( SELECT key, sum(val) AS val FROM t2 GROUP BY key WITH TOTALS ) as t2 ON t1.key = t2.key;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column t2.key in block. There are only columns: key, val, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nSELECT * FROM t1 JOIN ( SELECT key, sum(val) AS val FROM t2 GROUP BY key WITH TOTALS ) as t2 ON t1.key = t2.key;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column t2.key in block. There are only columns: key, val, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nSELECT * FROM ( SELECT key, sum(val) AS val FROM t1 GROUP BY key WITH TOTALS ) as t1 JOIN t2 ON t1.key = t2.key;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 10, e.displayText() = DB::Exception: Not found column default.t2.key in block. There are only columns: key, val, default.t2.val, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError NOT_IMPLEMENTED }\n\nDROP TABLE IF EXISTS t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS t2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02291_dictionary_scalar_subquery_reload.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS test_dictionary_source_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE test_dictionary_source_table\n(\n    id UInt64,\n    value String\n) ENGINE = TinyLog;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS test_dictionary_view;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE VIEW test_dictionary_view\n(\n    id UInt64,\n    value String\n) AS SELECT id, value FROM test_dictionary_source_table WHERE id = (SELECT max(id) FROM test_dictionary_source_table);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"UInt64\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO test_dictionary_source_table VALUES (1, '1'), (2, '2'), (3, '3');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_dictionary_source_table",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP DICTIONARY IF EXISTS test_dictionary;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 8 (line 3, col 6): DICTIONARY IF EXISTS test_dictionary\n FORMAT Native. Expected one of: DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DICTIONARY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE DICTIONARY test_dictionary\n(\n    id UInt64,\n    value String\n)\nPRIMARY KEY id\nSOURCE(CLICKHOUSE(TABLE 'test_dictionary_view'))\nLIFETIME(MIN 0 MAX 1)\nLAYOUT(FLAT());",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 9 (line 2, col 8): DICTIONARY test_dictionary\n(\n    id UInt64,\n    value String\n)\nPRIMARY KEY id\nSOURCE(CLICKHOUSE(TABLE 'test_dictionary_view'))\nLIFETIME(MIN 0 MAX 1)\nLAYOUT(FLAT. Expected one of: VIEW, MATERIALIZED, DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DICTIONARY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM test_dictionary;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_dictionary doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_dictionary",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO test_dictionary_source_table VALUES (4, '4');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_dictionary_source_table",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM RELOAD DICTIONARY test_dictionary;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 2, col 26): test_dictionary\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM test_dictionary;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test_dictionary doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_dictionary",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP DICTIONARY test_dictionary;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 8 (line 3, col 6): DICTIONARY test_dictionary\n FORMAT Native. Expected one of: DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DICTIONARY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP VIEW test_dictionary_view;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 7 (line 2, col 6): VIEW test_dictionary_view\n FORMAT Native. Expected one of: DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such view: test_dictionary_view",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE test_dictionary_source_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_dictionary_source_table",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02319_timeslots_dt64.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT timeSlots(toDateTime64('2000-01-02 03:04:05.12', 2, 'UTC'), toDecimal64(10000, 0));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDecimal64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT timeSlots(toDateTime64('2000-01-02 03:04:05.233', 3, 'UTC'), toDecimal64(10000.12, 2), toDecimal64(634.1, 1));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDecimal64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT timeSlots(toDateTime64('2000-01-02 03:04:05.3456', 4, 'UTC'), toDecimal64(600, 0), toDecimal64(30, 0));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDecimal64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT timeSlots(toDateTime64('2000-01-02 03:04:05.23', 2, 'UTC'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 42 }\nSELECT timeSlots(toDateTime64('2000-01-02 03:04:05.345', 3, 'UTC'), toDecimal64(62.3, 1), toDecimal64(12.34, 2), 'one more');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDecimal64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 42 }\nSELECT timeSlots(toDateTime64('2000-01-02 03:04:05.456', 3, 'UTC'), 'wrong argument');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDateTime64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 43 }\nSELECT timeSlots(toDateTime64('2000-01-02 03:04:05.123', 3, 'UTC'), toDecimal64(600, 0), 'wrong argument');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDecimal64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 43 }\nSELECT timeSlots(toDateTime64('2000-01-02 03:04:05.1232', 4, 'UTC'), toDecimal64(600, 0), toDecimal64(0, 0));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function toDateTime64, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toDecimal64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 44 };",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 2, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02327_try_infer_integers_schema_inference.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-fasttest\n\nset input_format_try_infer_integers=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 62 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nset input_format_try_infer_exponent_floats=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 48 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect 'JSONEachRow';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'JSONEachRow'\n0   JSONEachRow",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(JSONEachRow, '{\"x\" : 123}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(JSONEachRow, '{\"x\" : [123, 123]}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(JSONEachRow, '{\"x\" : {\"a\" : [123, 123]}}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(JSONEachRow, '{\"x\" : {\"a\" : [123, 123]}}\\n{\"x\" : {\"b\" : [321, 321]}}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(JSONEachRow, '{\"x\" : 123}\\n{\"x\" : 123.123}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(JSONEachRow, '{\"x\" : 123}\\n{\"x\" : 1e2}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(JSONEachRow, '{\"x\" : [123, 123]}\\n{\"x\" : [321.321, 312]}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(JSONEachRow, '{\"x\" : {\"a\" : [123, 123]}}\\n{\"x\" : {\"b\" : [321.321, 123]}}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect 'CSV';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'CSV'\n0   CSV",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(CSV, '123');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(CSV, '\"[123, 123]\"');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(CSV, '\"{\\'a\\' : [123, 123]}\"');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(CSV, '\"{\\'a\\' : [123, 123]}\"\\n\"{\\'b\\' : [321, 321]}\"');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(CSV, '123\\n123.123');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(CSV, '122\\n1e2');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(CSV, '\"[123, 123]\"\\n\"[321.321, 312]\"');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(CSV, '\"{\\'a\\' : [123, 123]}\"\\n\"{\\'b\\' : [321.321, 123]}\"');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect 'TSV';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'TSV'\n0   TSV",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(TSV, '123');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(TSV, '[123, 123]');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(TSV, '{\\'a\\' : [123, 123]}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(TSV, '{\\'a\\' : [123, 123]}\\n{\\'b\\' : [321, 321]}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(TSV, '123\\n123.123');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(TSV, '122\\n1e2');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(TSV, '[123, 123]\\n[321.321, 312]');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(TSV, '{\\'a\\' : [123, 123]}\\n{\\'b\\' : [321.321, 123]}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect 'Values';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'Values'\n0   Values",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(Values, '(123)');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(Values, '([123, 123])');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(Values, '({\\'a\\' : [123, 123]})');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(Values, '({\\'a\\' : [123, 123]}), ({\\'b\\' : [321, 321]})');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(Values, '(123), (123.123)');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(Values, '(122), (1e2)');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(Values, '([123, 123])\\n([321.321, 312])');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndesc format(Values, '({\\'a\\' : [123, 123]}), ({\\'b\\' : [321.321, 123]})');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02346_additional_filters.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: distributed\ndrop table if exists table_1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table if exists table_2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table if exists v_numbers;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table if exists mv_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ncreate table table_1 (x UInt32, y String) engine = MergeTree order by x;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into table_1 values (1, 'a'), (2, 'bb'), (3, 'ccc'), (4, 'dddd');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE distr_table (x UInt32, y String) ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), 'table_1');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 170, e.displayText() = DB::Exception: Requested cluster 'test_cluster_two_shards' not found, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- { echoOn }\n\nselect * from table_1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x     y\n0  1     a\n1  2    bb\n2  3   ccc\n3  4  dddd",
                "source_shape": [
                    4,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from table_1 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 58 (line 2, col 57): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from table_1 settings additional_table_filters={'table_1' : 'x != 2 and x != 3'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 58 (line 2, col 57): {'table_1' : 'x != 2 and x != 3'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect x from table_1 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 58 (line 2, col 57): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect y from table_1 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 58 (line 2, col 57): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 71 (line 2, col 70): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 74 (line 2, col 73): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"x\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 87 (line 2, col 86): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"x\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect x from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 71 (line 2, col 70): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect x from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 74 (line 2, col 73): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"x\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect x from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 87 (line 2, col 86): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"x\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect y from table_1 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 71 (line 2, col 70): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect y from table_1 prewhere x != 4 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 74 (line 2, col 73): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"x\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect y from table_1 prewhere x != 4 where x != 3 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 87 (line 2, col 86): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"x\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect x from table_1 where x != 2 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 71 (line 2, col 70): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect x from table_1 prewhere x != 2 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 74 (line 2, col 73): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"x\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect x from table_1 prewhere x != 2 where x != 2 settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 87 (line 2, col 86): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"x\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'system.one' : 'dummy = 0'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 87 (line 3, col 85): {'system.one' : 'dummy = 0'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from remote('127.0.0.{1,2}', system.one) settings additional_table_filters={'system.one' : 'dummy != 0'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 86 (line 2, col 85): {'system.one' : 'dummy != 0'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect * from distr_table settings additional_table_filters={'distr_table' : 'x = 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 63 (line 3, col 61): {'distr_table' : 'x = 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from distr_table settings additional_table_filters={'distr_table' : 'x != 2 and x != 3'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 62 (line 2, col 61): {'distr_table' : 'x != 2 and x != 3'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect * from system.numbers limit 5;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   number\n0       0\n1       1\n2       2\n3       3\n4       4",
                "source_shape": [
                    5,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.numbers",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from system.numbers as t limit 5 settings additional_table_filters={'t' : 'number % 2 != 0'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 78 (line 2, col 77): {'t' : 'number % 2 != 0'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from system.numbers limit 5 settings additional_table_filters={'system.numbers' : 'number != 3'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 73 (line 2, col 72): {'system.numbers' : 'number != 3'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from system.numbers limit 5 settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 73 (line 2, col 72): {'system.numbers':'number != 3','table_1':'x!=2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from (select number from system.numbers limit 5 union all select x from table_1) order by number settings additional_table_filters={'system.numbers':'number != 3','table_1':'x!=2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 142 (line 2, col 141): {'system.numbers':'number != 3','table_1':'x!=2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "LIMIT clause should come after UNION ALL not before",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect number, x, y from (select number from system.numbers limit 5) f any left join (select x, y from table_1) s on f.number = s.x settings additional_table_filters={'system.numbers' : 'number != 3', 'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 168 (line 2, col 167): {'system.numbers' : 'number != 3', 'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"any\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect b + 1 as c from (select a + 1 as b from (select x + 1 as a from table_1)) settings additional_table_filters={'table_1' : 'x != 2 and x != 3'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 117 (line 2, col 116): {'table_1' : 'x != 2 and x != 3'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- { echoOff }\n\ncreate view v_numbers as select number + 1 as x from system.numbers limit 5;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "view v_numbers cannot reference objects in database system",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- { echoOn }\nselect * from v_numbers;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x\n0  1\n1  2\n2  3\n3  4\n4  5",
                "source_shape": [
                    5,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: v_numbers",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from v_numbers settings additional_table_filters={'system.numbers' : 'number != 3'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 60 (line 2, col 59): {'system.numbers' : 'number != 3'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from v_numbers settings additional_table_filters={'v_numbers' : 'x != 3'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 60 (line 2, col 59): {'v_numbers' : 'x != 3'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from v_numbers settings additional_table_filters={'system.numbers' : 'number != 3', 'v_numbers' : 'x != 3'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 60 (line 2, col 59): {'system.numbers' : 'number != 3', 'v_numbers' : 'x != 3'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- { echoOff }\n\ncreate table table_2 (x UInt32, y String) engine = MergeTree order by x;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into table_2 values (4, 'dddd'), (5, 'eeeee'), (6, 'ffffff'), (7, 'ggggggg');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_2",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ncreate materialized view mv_table to table_2 (x UInt32, y String) as select * from table_1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"materialized\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- additional filter for inner tables for Materialized View does not work because it does not create internal interpreter\n-- probably it is expected\n-- { echoOn }\nselect * from mv_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x        y\n0  4     dddd\n1  5    eeeee\n2  6   ffffff\n3  7  ggggggg",
                "source_shape": [
                    4,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: mv_table",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from mv_table settings additional_table_filters={'mv_table' : 'x != 5'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 59 (line 2, col 58): {'mv_table' : 'x != 5'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from mv_table settings additional_table_filters={'table_1' : 'x != 5'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 59 (line 2, col 58): {'table_1' : 'x != 5'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from mv_table settings additional_table_filters={'table_2' : 'x != 5'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 59 (line 2, col 58): {'table_2' : 'x != 5'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_table_filters\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- { echoOff }\n\ncreate table m_table (x UInt32, y String) engine = Merge(currentDatabase(), '^table_');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 57, e.displayText() = DB::Exception: Table default.m_table already exists., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- additional filter for inner tables for Merge does not work because it does not create internal interpreter\n-- probably it is expected\n-- { echoOn }\nselect * from m_table order by x;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x        y\n0  1        a\n1  2       bb\n2  3      ccc\n3  4     dddd\n4  4     dddd\n5  5    eeeee\n6  6   ffffff\n7  7  ggggggg",
                "source_shape": [
                    8,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: m_table",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from m_table order by x settings additional_table_filters={'table_1' : 'x != 2'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 69 (line 2, col 68): {'table_1' : 'x != 2'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from m_table order by x  settings additional_table_filters={'table_2' : 'x != 5'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 70 (line 2, col 69): {'table_2' : 'x != 5'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 2', 'table_2' : 'x != 5'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 70 (line 2, col 69): {'table_1' : 'x != 2', 'table_2' : 'x != 5'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 4'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 70 (line 2, col 69): {'table_1' : 'x != 4'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from m_table order by x  settings additional_table_filters={'table_2' : 'x != 4'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 70 (line 2, col 69): {'table_2' : 'x != 4'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from m_table order by x  settings additional_table_filters={'table_1' : 'x != 4', 'table_2' : 'x != 4'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 70 (line 2, col 69): {'table_1' : 'x != 4', 'table_2' : 'x != 4'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from m_table order by x  settings additional_table_filters={'m_table' : 'x != 4'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 70 (line 2, col 69): {'m_table' : 'x != 4'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from m_table order by x  settings additional_table_filters={'m_table' : 'x != 4', 'table_1' : 'x != 2', 'table_2' : 'x != 5'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 70 (line 2, col 69): {'m_table' : 'x != 4', 'table_1' : 'x != 2', 'table_2' : 'x != 5'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- additional_result_filter\n\nselect * from table_1 settings additional_result_filter='x != 2';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting additional_result_filter, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_result_filter\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect *, x != 2 from table_1 settings additional_result_filter='x != 2';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting additional_result_filter, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_result_filter\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from table_1 where x != 1 settings additional_result_filter='x != 2';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting additional_result_filter, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from table_1 where x != 1 settings additional_result_filter='x != 2 and x != 3';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting additional_result_filter, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from table_1 prewhere x != 3 where x != 1 settings additional_result_filter='x != 2';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting additional_result_filter, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"x\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect * from table_1 limit 3 settings additional_result_filter='x != 2';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting additional_result_filter, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect x + 1 from table_1 settings additional_result_filter='`plus(x, 1)` != 2';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting additional_result_filter, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"additional_result_filter\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect * from (select x + 1 as a, y from table_1 union all select x as a, y from table_1) order by a, y settings additional_result_filter='a = 3';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting additional_result_filter, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from (select x + 1 as a, y from table_1 union all select x as a, y from table_1) order by a, y settings additional_result_filter='a != 3';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting additional_result_filter, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02346_additional_filters_distr.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-parallel, distributed\n\ncreate database if not exists shard_0;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"database\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ncreate database if not exists shard_1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"database\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ndrop table if exists dist_02346;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table if exists shard_0.data_02346;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ndrop table if exists shard_1.data_02346;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ncreate table shard_0.data_02346 (x UInt32, y String) engine = MergeTree order by x settings index_granularity = 2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unknown database shard_0",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into shard_0.data_02346 values (1, 'a'), (2, 'bb'), (3, 'ccc'), (4, 'dddd');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: shard_0.data_02346",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ncreate table shard_1.data_02346 (x UInt32, y String) engine = MergeTree order by x settings index_granularity = 2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unknown database shard_1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into shard_1.data_02346 values (5, 'a'), (6, 'bb'), (7, 'ccc'), (8, 'dddd');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: shard_1.data_02346",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ncreate table dist_02346 (x UInt32, y String) engine=Distributed('test_cluster_two_shards_different_databases', /* default_database= */ '', data_02346);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 170, e.displayText() = DB::Exception: Requested cluster 'test_cluster_two_shards_different_databases' not found, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nset max_rows_to_read=4;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect * from dist_02346 order by x settings additional_table_filters={'dist_02346' : 'x > 3 and x < 7'};",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 73 (line 3, col 71): {'dist_02346' : 'x > 3 and x < 7'}\n FORMAT Native. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02347_rank_corr_nan.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT rankCorr(number, nan) FROM numbers(10);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function rankCorr, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02366_asof_optimize_predicate_bug_37813.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t1 (c1 Int32, c2 Int32) ENGINE MergeTree ORDER BY c1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MergeTree\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t1 (c1, c2) VALUES (1, 10), (1, 20), (1, 30);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS t2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t2 (c1 Int32, c2 Int32, c3 String) ENGINE MergeTree ORDER BY (c1, c2, c3);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MergeTree\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t2 (c1, c2, c3) VALUES (1, 5, 'a'), (1, 15, 'b'), (1, 25, 'c');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t2",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET enable_optimize_predicate_expression = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 49 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH\n  v1 AS (SELECT t1.c2, t2.c2, t2.c3 FROM t1 ASOF JOIN t2 USING (c1, c2))\n  SELECT count() FROM v1 WHERE c3 = 'b';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 9): (SELECT t1.c2, t2.c2, t2.c3 FROM t1 ASOF JOIN t2 USING (c1, c2))\n  SELECT count() FROM v1 WHERE c3 = 'b'\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET enable_optimize_predicate_expression = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 49 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH\n  v1 AS (SELECT t1.c2, t2.c2, t2.c3 FROM t1 ASOF JOIN t2 USING (c1, c2))\n  SELECT count() FROM v1 WHERE c3 = 'b';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 9): (SELECT t1.c2, t2.c2, t2.c3 FROM t1 ASOF JOIN t2 USING (c1, c2))\n  SELECT count() FROM v1 WHERE c3 = 'b'\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02366_kql_distinct.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS Customers;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE Customers\n(    \n    FirstName Nullable(String),\n    LastName String, \n    Occupation String,\n    Education String,\n    Age Nullable(UInt8)\n) ENGINE = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO Customers VALUES ('Theodore','Diaz','Skilled Manual','Bachelors',28), ('Stephanie','Cox','Management abcd defg','Bachelors',33),('Peter','Nara','Skilled Manual','Graduate Degree',26),('Latoya','Shen','Professional','Graduate Degree',25),('Apple','','Skilled Manual','Bachelors',28),(NULL,'why','Professional','Partial College',38);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: Customers",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nset dialect = 'kusto';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 26 (line 4, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nprint '--  distinct * --';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 3 (line 3, col 1): print '--  distinct * --'\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"print\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCustomers | distinct *;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 2 (line 2, col 1): Customers | distinct *\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Customers\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nprint '--  distinct one column --';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 3 (line 3, col 1): print '--  distinct one column --'\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"print\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCustomers | distinct Occupation;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 2 (line 2, col 1): Customers | distinct Occupation\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Customers\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nprint '--  distinct two column --';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 3 (line 3, col 1): print '--  distinct two column --'\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"print\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCustomers | distinct Occupation, Education;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 2 (line 2, col 1): Customers | distinct Occupation, Education\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Customers\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nprint '--  distinct with where --';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 3 (line 3, col 1): print '--  distinct with where --'\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"print\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCustomers where Age <30 | distinct Occupation, Education;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 2 (line 2, col 1): Customers where Age <30 | distinct Occupation, Education\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Customers\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nprint '--  distinct with where, order --';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 3 (line 3, col 1): print '--  distinct with where, order --'\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"print\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCustomers |where Age <30 | order by Age| distinct Occupation, Education;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 2 (line 2, col 1): Customers |where Age <30 | order by Age| distinct Occupation, Education\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Customers\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02377_majority_insert_quorum_zookeeper_long.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: long, zookeeper, no-replicated-database\n\n-- no-replicated-database:\n--   The number of replicas is doubled, so `SYSTEM STOP FETCHES` stop not enough replicas.\n\nSET insert_quorum_parallel = false;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 199 (line 6, col 30): false\n FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET select_sequential_consistency = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 42 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS quorum1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS quorum2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS quorum3;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02377/quorum', '1') ORDER BY x PARTITION BY y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02377/quorum', '2') ORDER BY x PARTITION BY y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- insert_quorum = n/2 + 1 , so insert will be written to both replica\nSET insert_quorum = 'auto';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 102 (line 5, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET insert_keeper_fault_injection_probability=0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 51 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO quorum1 VALUES (1, '2018-11-15');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO quorum1 VALUES (2, '2018-11-15');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO quorum1 VALUES (3, '2018-12-16');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x FROM quorum1 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum2 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE quorum2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Create 3 replicas and stop sync 2 replicas\nCREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02377/quorum1', '1') ORDER BY x PARTITION BY y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02377/quorum1', '2') ORDER BY x PARTITION BY y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE quorum3(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02377/quorum1', '3') ORDER BY x PARTITION BY y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 225, e.displayText() = DB::Exception: Can't create replicated table without ZooKeeper, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ReplicatedMergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Insert should be successful\n-- stop replica 3\nSYSTEM STOP FETCHES quorum3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 81 (line 6, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO quorum1 VALUES (1, '2018-11-15');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum1 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum2 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum3 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum3 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum3",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- {serverError REPLICA_IS_NOT_IN_QUORUM}\n\n-- Sync replica 3\nSYSTEM START FETCHES quorum3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 93 (line 5, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM SYNC REPLICA quorum3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum3 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum3 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum3",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Stop 2 replicas , so insert wont be successful\nSYSTEM STOP FETCHES quorum2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 82 (line 5, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM STOP FETCHES quorum3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET insert_quorum_timeout = 5000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 36 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO quorum1 VALUES (2, '2018-11-15');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError UNKNOWN_STATUS_OF_INSERT }\nSELECT x FROM quorum1 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum2 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum3 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum3 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum3",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Sync replica 2 and 3\nSYSTEM START FETCHES quorum2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 57 (line 5, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM SYNC REPLICA quorum2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM START FETCHES quorum3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM SYNC REPLICA quorum3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET insert_quorum_timeout = 600000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 39 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- set default value back\nINSERT INTO quorum1 VALUES (3, '2018-11-15');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum1 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM SYNC REPLICA quorum2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM SYNC REPLICA quorum3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum2 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x FROM quorum3 ORDER BY x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum3 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum3",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE quorum1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum1 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE quorum2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE quorum3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.quorum3 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: quorum3",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02418_keeper_map_keys_limit.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-ordinary-database, no-fasttest\n\nDROP TABLE IF EXISTS 02418_test SYNC;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 66 (line 3, col 22): 02418_test SYNC\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE 02418_test (key UInt64, value Float64) Engine=KeeperMap('/' || currentDatabase() || '/test2418', 3) PRIMARY KEY(key);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 16 (line 3, col 14): 02418_test (key UInt64, value Float64) Engine=KeeperMap('/' || currentDatabase() || '/test2418', 3) PRIMARY KEY(key)\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO 02418_test VALUES (1, 1.1), (2, 2.2);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 13): 02418_test VALUES (1, 1.1), (2, 2.2). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM 02418_test;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 2, col 21): 02418_test\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO 02418_test VALUES (3, 3.3), (4, 4.4);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 13): 02418_test VALUES (3, 3.3), (4, 4.4). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError LIMIT_EXCEEDED }\n\nINSERT INTO 02418_test VALUES (1, 2.1), (2, 3.2), (3, 3.3);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 49 (line 3, col 13): 02418_test VALUES (1, 2.1), (2, 3.2), (3, 3.3). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM 02418_test;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 2, col 21): 02418_test\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE 02418_test_another (key UInt64, value Float64) Engine=KeeperMap('/' || currentDatabase() || '/test2418', 4) PRIMARY KEY(key);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 16 (line 3, col 14): 02418_test_another (key UInt64, value Float64) Engine=KeeperMap('/' || currentDatabase() || '/test2418', 4) PRIMARY KEY(key)\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test_another\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02418_test VALUES (4, 4.4);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02418_test VALUES (4, 4.4). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError LIMIT_EXCEEDED }\nINSERT INTO 02418_test_another VALUES (4, 4.4);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 48 (line 2, col 13): 02418_test_another VALUES (4, 4.4). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test_another\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count() FROM 02418_test;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 23 (line 3, col 21): 02418_test\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM 02418_test_another;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 2, col 21): 02418_test_another\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test_another\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDELETE FROM 02418_test WHERE key <= 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 3 (line 3, col 1): DELETE FROM 02418_test WHERE key <= 2\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02418_test VALUES (1, 1.1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02418_test VALUES (1, 1.1). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02418_test VALUES (2, 1.1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02418_test VALUES (2, 1.1). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError LIMIT_EXCEEDED }\n\nSELECT count() FROM 02418_test;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 57 (line 3, col 21): 02418_test\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM 02418_test_another;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 2, col 21): 02418_test_another\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test_another\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE 02418_test SYNC;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 3, col 12): 02418_test SYNC\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE 02418_test_another SYNC;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 13 (line 2, col 12): 02418_test_another SYNC\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02418_test_another\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02428_partial_sort_optimization_bug.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "create table partial_sort_opt_bug (x UInt64) engine = MergeTree order by tuple() settings index_granularity = 1000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 57, e.displayText() = DB::Exception: Table default.partial_sort_opt_bug already exists., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ninsert into partial_sort_opt_bug select number + 100000 from numbers(4000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partial_sort_opt_bug",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ninsert into partial_sort_opt_bug select number from numbers(1000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partial_sort_opt_bug",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into partial_sort_opt_bug select number + 200000 from numbers(3000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partial_sort_opt_bug",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into partial_sort_opt_bug select number + 1000 from numbers(4000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: partial_sort_opt_bug",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\noptimize table partial_sort_opt_bug final;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"optimize\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect x from partial_sort_opt_bug order by x limit 2000 settings max_block_size = 4000;",
                "source_success": true,
                "source_exception": "",
                "source_result": "        x\n0       0\n1       0\n2       0\n3       0\n4       1\n5       1\n6       1\n7       1\n8       2\n9       2\n10      2\n11      2\n12      3\n13      3\n14      3\n15      3\n16      4\n17      4\n18      4\n19      4\n20      5\n21      5\n22      5\n23      5\n24      6\n25      6\n26      6\n27      6\n28      7\n29      7\n30      7\n31      7\n32      8\n33      8\n34      8\n35      8\n36      9\n37      9\n38      9\n39      9\n40     10\n41     10\n42     10\n43     10\n44     11\n45     11\n46     11\n47     11\n48     12\n49     12\n50     12\n51     12\n52     13\n53     13\n54     13\n55     13\n56     14\n57     14\n58     14\n59     14\n60     15\n61     15\n62     15\n63     15\n64     16\n65     16\n66     16\n67     16\n68     17\n69     17\n70     17\n71     17\n72     18\n73     18\n74     18\n75     18\n76     19\n77     19\n78     19\n79     19\n80     20\n81     20\n82     20\n83     20\n84     21\n85     21\n86     21\n87     21\n88     22\n89     22\n90     22\n91     22\n92     23\n93     23\n94     23\n95     23\n96     24\n97     24\n98     24\n99     24\n100    25\n101    25\n102    25\n103    25\n104    26\n105    26\n106    26\n107    26\n108    27\n109    27\n110    27\n111    27\n112    28\n113    28\n114    28\n115    28\n116    29\n117    29\n118    29\n119    29\n120    30\n121    30\n122    30\n123    30\n124    31\n125    31\n126    31\n127    31\n128    32\n129    32\n130    32\n131    32\n132    33\n133    33\n134    33\n135    33\n136    34\n137    34\n138    34\n139    34\n140    35\n141    35\n142    35\n143    35\n144    36\n145    36\n146    36\n147    36\n148    37\n149    37\n150    37\n151    37\n152    38\n153    38\n154    38\n155    38\n156    39\n157    39\n158    39\n159    39\n160    40\n161    40\n162    40\n163    40\n164    41\n165    41\n166    41\n167    41\n168    42\n169    42\n170    42\n171    42\n172    43\n173    43\n174    43\n175    43\n176    44\n177    44\n178    44\n179    44\n180    45\n181    45\n182    45\n183    45\n184    46\n185    46\n186    46\n187    46\n188    47\n189    47\n190    47\n191    47\n192    48\n193    48\n194    48\n195    48\n196    49\n197    49\n198    49\n199    49\n200    50\n201    50\n202    50\n203    50\n204    51\n205    51\n206    51\n207    51\n208    52\n209    52\n210    52\n211    52\n212    53\n213    53\n214    53\n215    53\n216    54\n217    54\n218    54\n219    54\n220    55\n221    55\n222    55\n223    55\n224    56\n225    56\n226    56\n227    56\n228    57\n229    57\n230    57\n231    57\n232    58\n233    58\n234    58\n235    58\n236    59\n237    59\n238    59\n239    59\n240    60\n241    60\n242    60\n243    60\n244    61\n245    61\n246    61\n247    61\n248    62\n249    62\n250    62\n251    62\n252    63\n253    63\n254    63\n255    63\n256    64\n257    64\n258    64\n259    64\n260    65\n261    65\n262    65\n263    65\n264    66\n265    66\n266    66\n267    66\n268    67\n269    67\n270    67\n271    67\n272    68\n273    68\n274    68\n275    68\n276    69\n277    69\n278    69\n279    69\n280    70\n281    70\n282    70\n283    70\n284    71\n285    71\n286    71\n287    71\n288    72\n289    72\n290    72\n291    72\n292    73\n293    73\n294    73\n295    73\n296    74\n297    74\n298    74\n299    74\n300    75\n301    75\n302    75\n303    75\n304    76\n305    76\n306    76\n307    76\n308    77\n309    77\n310    77\n311    77\n312    78\n313    78\n314    78\n315    78\n316    79\n317    79\n318    79\n319    79\n320    80\n321    80\n322    80\n323    80\n324    81\n325    81\n326    81\n327    81\n328    82\n329    82\n330    82\n331    82\n332    83\n333    83\n334    83\n335    83\n336    84\n337    84\n338    84\n339    84\n340    85\n341    85\n342    85\n343    85\n344    86\n345    86\n346    86\n347    86\n348    87\n349    87\n350    87\n351    87\n352    88\n353    88\n354    88\n355    88\n356    89\n357    89\n358    89\n359    89\n360    90\n361    90\n362    90\n363    90\n364    91\n365    91\n366    91\n367    91\n368    92\n369    92\n370    92\n371    92\n372    93\n373    93\n374    93\n375    93\n376    94\n377    94\n378    94\n379    94\n380    95\n381    95\n382    95\n383    95\n384    96\n385    96\n386    96\n387    96\n388    97\n389    97\n390    97\n391    97\n392    98\n393    98\n394    98\n395    98\n396    99\n397    99\n398    99\n399    99\n400   100\n401   100\n402   100\n403   100\n404   101\n405   101\n406   101\n407   101\n408   102\n409   102\n410   102\n411   102\n412   103\n413   103\n414   103\n415   103\n416   104\n417   104\n418   104\n419   104\n420   105\n421   105\n422   105\n423   105\n424   106\n425   106\n426   106\n427   106\n428   107\n429   107\n430   107\n431   107\n432   108\n433   108\n434   108\n435   108\n436   109\n437   109\n438   109\n439   109\n440   110\n441   110\n442   110\n443   110\n444   111\n445   111\n446   111\n447   111\n448   112\n449   112\n450   112\n451   112\n452   113\n453   113\n454   113\n455   113\n456   114\n457   114\n458   114\n459   114\n460   115\n461   115\n462   115\n463   115\n464   116\n465   116\n466   116\n467   116\n468   117\n469   117\n470   117\n471   117\n472   118\n473   118\n474   118\n475   118\n476   119\n477   119\n478   119\n479   119\n480   120\n481   120\n482   120\n483   120\n484   121\n485   121\n486   121\n487   121\n488   122\n489   122\n490   122\n491   122\n492   123\n493   123\n494   123\n495   123\n496   124\n497   124\n498   124\n499   124\n500   125\n501   125\n502   125\n503   125\n504   126\n505   126\n506   126\n507   126\n508   127\n509   127\n510   127\n511   127\n512   128\n513   128\n514   128\n515   128\n516   129\n517   129\n518   129\n519   129\n520   130\n521   130\n522   130\n523   130\n524   131\n525   131\n526   131\n527   131\n528   132\n529   132\n530   132\n531   132\n532   133\n533   133\n534   133\n535   133\n536   134\n537   134\n538   134\n539   134\n540   135\n541   135\n542   135\n543   135\n544   136\n545   136\n546   136\n547   136\n548   137\n549   137\n550   137\n551   137\n552   138\n553   138\n554   138\n555   138\n556   139\n557   139\n558   139\n559   139\n560   140\n561   140\n562   140\n563   140\n564   141\n565   141\n566   141\n567   141\n568   142\n569   142\n570   142\n571   142\n572   143\n573   143\n574   143\n575   143\n576   144\n577   144\n578   144\n579   144\n580   145\n581   145\n582   145\n583   145\n584   146\n585   146\n586   146\n587   146\n588   147\n589   147\n590   147\n591   147\n592   148\n593   148\n594   148\n595   148\n596   149\n597   149\n598   149\n599   149\n600   150\n601   150\n602   150\n603   150\n604   151\n605   151\n606   151\n607   151\n608   152\n609   152\n610   152\n611   152\n612   153\n613   153\n614   153\n615   153\n616   154\n617   154\n618   154\n619   154\n620   155\n621   155\n622   155\n623   155\n624   156\n625   156\n626   156\n627   156\n628   157\n629   157\n630   157\n631   157\n632   158\n633   158\n634   158\n635   158\n636   159\n637   159\n638   159\n639   159\n640   160\n641   160\n642   160\n643   160\n644   161\n645   161\n646   161\n647   161\n648   162\n649   162\n650   162\n651   162\n652   163\n653   163\n654   163\n655   163\n656   164\n657   164\n658   164\n659   164\n660   165\n661   165\n662   165\n663   165\n664   166\n665   166\n666   166\n667   166\n668   167\n669   167\n670   167\n671   167\n672   168\n673   168\n674   168\n675   168\n676   169\n677   169\n678   169\n679   169\n680   170\n681   170\n682   170\n683   170\n684   171\n685   171\n686   171\n687   171\n688   172\n689   172\n690   172\n691   172\n692   173\n693   173\n694   173\n695   173\n696   174\n697   174\n698   174\n699   174\n700   175\n701   175\n702   175\n703   175\n704   176\n705   176\n706   176\n707   176\n708   177\n709   177\n710   177\n711   177\n712   178\n713   178\n714   178\n715   178\n716   179\n717   179\n718   179\n719   179\n720   180\n721   180\n722   180\n723   180\n724   181\n725   181\n726   181\n727   181\n728   182\n729   182\n730   182\n731   182\n732   183\n733   183\n734   183\n735   183\n736   184\n737   184\n738   184\n739   184\n740   185\n741   185\n742   185\n743   185\n744   186\n745   186\n746   186\n747   186\n748   187\n749   187\n750   187\n751   187\n752   188\n753   188\n754   188\n755   188\n756   189\n757   189\n758   189\n759   189\n760   190\n761   190\n762   190\n763   190\n764   191\n765   191\n766   191\n767   191\n768   192\n769   192\n770   192\n771   192\n772   193\n773   193\n774   193\n775   193\n776   194\n777   194\n778   194\n779   194\n780   195\n781   195\n782   195\n783   195\n784   196\n785   196\n786   196\n787   196\n788   197\n789   197\n790   197\n791   197\n792   198\n793   198\n794   198\n795   198\n796   199\n797   199\n798   199\n799   199\n800   200\n801   200\n802   200\n803   200\n804   201\n805   201\n806   201\n807   201\n808   202\n809   202\n810   202\n811   202\n812   203\n813   203\n814   203\n815   203\n816   204\n817   204\n818   204\n819   204\n820   205\n821   205\n822   205\n823   205\n824   206\n825   206\n826   206\n827   206\n828   207\n829   207\n830   207\n831   207\n832   208\n833   208\n834   208\n835   208\n836   209\n837   209\n838   209\n839   209\n840   210\n841   210\n842   210\n843   210\n844   211\n845   211\n846   211\n847   211\n848   212\n849   212\n850   212\n851   212\n852   213\n853   213\n854   213\n855   213\n856   214\n857   214\n858   214\n859   214\n860   215\n861   215\n862   215\n863   215\n864   216\n865   216\n866   216\n867   216\n868   217\n869   217\n870   217\n871   217\n872   218\n873   218\n874   218\n875   218\n876   219\n877   219\n878   219\n879   219\n880   220\n881   220\n882   220\n883   220\n884   221\n885   221\n886   221\n887   221\n888   222\n889   222\n890   222\n891   222\n892   223\n893   223\n894   223\n895   223\n896   224\n897   224\n898   224\n899   224\n900   225\n901   225\n902   225\n903   225\n904   226\n905   226\n906   226\n907   226\n908   227\n909   227\n910   227\n911   227\n912   228\n913   228\n914   228\n915   228\n916   229\n917   229\n918   229\n919   229\n920   230\n921   230\n922   230\n923   230\n924   231\n925   231\n926   231\n927   231\n928   232\n929   232\n930   232\n931   232\n932   233\n933   233\n934   233\n935   233\n936   234\n937   234\n938   234\n939   234\n940   235\n941   235\n942   235\n943   235\n944   236\n945   236\n946   236\n947   236\n948   237\n949   237\n950   237\n951   237\n952   238\n953   238\n954   238\n955   238\n956   239\n957   239\n958   239\n959   239\n960   240\n961   240\n962   240\n963   240\n964   241\n965   241\n966   241\n967   241\n968   242\n969   242\n970   242\n971   242\n972   243\n973   243\n974   243\n975   243\n976   244\n977   244\n978   244\n979   244\n980   245\n981   245\n982   245\n983   245\n984   246\n985   246\n986   246\n987   246\n988   247\n989   247\n990   247\n991   247\n992   248\n993   248\n994   248\n995   248\n996   249\n997   249\n998   249\n999   249\n1000  250\n1001  250\n1002  250\n1003  250\n1004  251\n1005  251\n1006  251\n1007  251\n1008  252\n1009  252\n1010  252\n1011  252\n1012  253\n1013  253\n1014  253\n1015  253\n1016  254\n1017  254\n1018  254\n1019  254\n1020  255\n1021  255\n1022  255\n1023  255\n1024  256\n1025  256\n1026  256\n1027  256\n1028  257\n1029  257\n1030  257\n1031  257\n1032  258\n1033  258\n1034  258\n1035  258\n1036  259\n1037  259\n1038  259\n1039  259\n1040  260\n1041  260\n1042  260\n1043  260\n1044  261\n1045  261\n1046  261\n1047  261\n1048  262\n1049  262\n1050  262\n1051  262\n1052  263\n1053  263\n1054  263\n1055  263\n1056  264\n1057  264\n1058  264\n1059  264\n1060  265\n1061  265\n1062  265\n1063  265\n1064  266\n1065  266\n1066  266\n1067  266\n1068  267\n1069  267\n1070  267\n1071  267\n1072  268\n1073  268\n1074  268\n1075  268\n1076  269\n1077  269\n1078  269\n1079  269\n1080  270\n1081  270\n1082  270\n1083  270\n1084  271\n1085  271\n1086  271\n1087  271\n1088  272\n1089  272\n1090  272\n1091  272\n1092  273\n1093  273\n1094  273\n1095  273\n1096  274\n1097  274\n1098  274\n1099  274\n1100  275\n1101  275\n1102  275\n1103  275\n1104  276\n1105  276\n1106  276\n1107  276\n1108  277\n1109  277\n1110  277\n1111  277\n1112  278\n1113  278\n1114  278\n1115  278\n1116  279\n1117  279\n1118  279\n1119  279\n1120  280\n1121  280\n1122  280\n1123  280\n1124  281\n1125  281\n1126  281\n1127  281\n1128  282\n1129  282\n1130  282\n1131  282\n1132  283\n1133  283\n1134  283\n1135  283\n1136  284\n1137  284\n1138  284\n1139  284\n1140  285\n1141  285\n1142  285\n1143  285\n1144  286\n1145  286\n1146  286\n1147  286\n1148  287\n1149  287\n1150  287\n1151  287\n1152  288\n1153  288\n1154  288\n1155  288\n1156  289\n1157  289\n1158  289\n1159  289\n1160  290\n1161  290\n1162  290\n1163  290\n1164  291\n1165  291\n1166  291\n1167  291\n1168  292\n1169  292\n1170  292\n1171  292\n1172  293\n1173  293\n1174  293\n1175  293\n1176  294\n1177  294\n1178  294\n1179  294\n1180  295\n1181  295\n1182  295\n1183  295\n1184  296\n1185  296\n1186  296\n1187  296\n1188  297\n1189  297\n1190  297\n1191  297\n1192  298\n1193  298\n1194  298\n1195  298\n1196  299\n1197  299\n1198  299\n1199  299\n1200  300\n1201  300\n1202  300\n1203  300\n1204  301\n1205  301\n1206  301\n1207  301\n1208  302\n1209  302\n1210  302\n1211  302\n1212  303\n1213  303\n1214  303\n1215  303\n1216  304\n1217  304\n1218  304\n1219  304\n1220  305\n1221  305\n1222  305\n1223  305\n1224  306\n1225  306\n1226  306\n1227  306\n1228  307\n1229  307\n1230  307\n1231  307\n1232  308\n1233  308\n1234  308\n1235  308\n1236  309\n1237  309\n1238  309\n1239  309\n1240  310\n1241  310\n1242  310\n1243  310\n1244  311\n1245  311\n1246  311\n1247  311\n1248  312\n1249  312\n1250  312\n1251  312\n1252  313\n1253  313\n1254  313\n1255  313\n1256  314\n1257  314\n1258  314\n1259  314\n1260  315\n1261  315\n1262  315\n1263  315\n1264  316\n1265  316\n1266  316\n1267  316\n1268  317\n1269  317\n1270  317\n1271  317\n1272  318\n1273  318\n1274  318\n1275  318\n1276  319\n1277  319\n1278  319\n1279  319\n1280  320\n1281  320\n1282  320\n1283  320\n1284  321\n1285  321\n1286  321\n1287  321\n1288  322\n1289  322\n1290  322\n1291  322\n1292  323\n1293  323\n1294  323\n1295  323\n1296  324\n1297  324\n1298  324\n1299  324\n1300  325\n1301  325\n1302  325\n1303  325\n1304  326\n1305  326\n1306  326\n1307  326\n1308  327\n1309  327\n1310  327\n1311  327\n1312  328\n1313  328\n1314  328\n1315  328\n1316  329\n1317  329\n1318  329\n1319  329\n1320  330\n1321  330\n1322  330\n1323  330\n1324  331\n1325  331\n1326  331\n1327  331\n1328  332\n1329  332\n1330  332\n1331  332\n1332  333\n1333  333\n1334  333\n1335  333\n1336  334\n1337  334\n1338  334\n1339  334\n1340  335\n1341  335\n1342  335\n1343  335\n1344  336\n1345  336\n1346  336\n1347  336\n1348  337\n1349  337\n1350  337\n1351  337\n1352  338\n1353  338\n1354  338\n1355  338\n1356  339\n1357  339\n1358  339\n1359  339\n1360  340\n1361  340\n1362  340\n1363  340\n1364  341\n1365  341\n1366  341\n1367  341\n1368  342\n1369  342\n1370  342\n1371  342\n1372  343\n1373  343\n1374  343\n1375  343\n1376  344\n1377  344\n1378  344\n1379  344\n1380  345\n1381  345\n1382  345\n1383  345\n1384  346\n1385  346\n1386  346\n1387  346\n1388  347\n1389  347\n1390  347\n1391  347\n1392  348\n1393  348\n1394  348\n1395  348\n1396  349\n1397  349\n1398  349\n1399  349\n1400  350\n1401  350\n1402  350\n1403  350\n1404  351\n1405  351\n1406  351\n1407  351\n1408  352\n1409  352\n1410  352\n1411  352\n1412  353\n1413  353\n1414  353\n1415  353\n1416  354\n1417  354\n1418  354\n1419  354\n1420  355\n1421  355\n1422  355\n1423  355\n1424  356\n1425  356\n1426  356\n1427  356\n1428  357\n1429  357\n1430  357\n1431  357\n1432  358\n1433  358\n1434  358\n1435  358\n1436  359\n1437  359\n1438  359\n1439  359\n1440  360\n1441  360\n1442  360\n1443  360\n1444  361\n1445  361\n1446  361\n1447  361\n1448  362\n1449  362\n1450  362\n1451  362\n1452  363\n1453  363\n1454  363\n1455  363\n1456  364\n1457  364\n1458  364\n1459  364\n1460  365\n1461  365\n1462  365\n1463  365\n1464  366\n1465  366\n1466  366\n1467  366\n1468  367\n1469  367\n1470  367\n1471  367\n1472  368\n1473  368\n1474  368\n1475  368\n1476  369\n1477  369\n1478  369\n1479  369\n1480  370\n1481  370\n1482  370\n1483  370\n1484  371\n1485  371\n1486  371\n1487  371\n1488  372\n1489  372\n1490  372\n1491  372\n1492  373\n1493  373\n1494  373\n1495  373\n1496  374\n1497  374\n1498  374\n1499  374\n1500  375\n1501  375\n1502  375\n1503  375\n1504  376\n1505  376\n1506  376\n1507  376\n1508  377\n1509  377\n1510  377\n1511  377\n1512  378\n1513  378\n1514  378\n1515  378\n1516  379\n1517  379\n1518  379\n1519  379\n1520  380\n1521  380\n1522  380\n1523  380\n1524  381\n1525  381\n1526  381\n1527  381\n1528  382\n1529  382\n1530  382\n1531  382\n1532  383\n1533  383\n1534  383\n1535  383\n1536  384\n1537  384\n1538  384\n1539  384\n1540  385\n1541  385\n1542  385\n1543  385\n1544  386\n1545  386\n1546  386\n1547  386\n1548  387\n1549  387\n1550  387\n1551  387\n1552  388\n1553  388\n1554  388\n1555  388\n1556  389\n1557  389\n1558  389\n1559  389\n1560  390\n1561  390\n1562  390\n1563  390\n1564  391\n1565  391\n1566  391\n1567  391\n1568  392\n1569  392\n1570  392\n1571  392\n1572  393\n1573  393\n1574  393\n1575  393\n1576  394\n1577  394\n1578  394\n1579  394\n1580  395\n1581  395\n1582  395\n1583  395\n1584  396\n1585  396\n1586  396\n1587  396\n1588  397\n1589  397\n1590  397\n1591  397\n1592  398\n1593  398\n1594  398\n1595  398\n1596  399\n1597  399\n1598  399\n1599  399\n1600  400\n1601  400\n1602  400\n1603  400\n1604  401\n1605  401\n1606  401\n1607  401\n1608  402\n1609  402\n1610  402\n1611  402\n1612  403\n1613  403\n1614  403\n1615  403\n1616  404\n1617  404\n1618  404\n1619  404\n1620  405\n1621  405\n1622  405\n1623  405\n1624  406\n1625  406\n1626  406\n1627  406\n1628  407\n1629  407\n1630  407\n1631  407\n1632  408\n1633  408\n1634  408\n1635  408\n1636  409\n1637  409\n1638  409\n1639  409\n1640  410\n1641  410\n1642  410\n1643  410\n1644  411\n1645  411\n1646  411\n1647  411\n1648  412\n1649  412\n1650  412\n1651  412\n1652  413\n1653  413\n1654  413\n1655  413\n1656  414\n1657  414\n1658  414\n1659  414\n1660  415\n1661  415\n1662  415\n1663  415\n1664  416\n1665  416\n1666  416\n1667  416\n1668  417\n1669  417\n1670  417\n1671  417\n1672  418\n1673  418\n1674  418\n1675  418\n1676  419\n1677  419\n1678  419\n1679  419\n1680  420\n1681  420\n1682  420\n1683  420\n1684  421\n1685  421\n1686  421\n1687  421\n1688  422\n1689  422\n1690  422\n1691  422\n1692  423\n1693  423\n1694  423\n1695  423\n1696  424\n1697  424\n1698  424\n1699  424\n1700  425\n1701  425\n1702  425\n1703  425\n1704  426\n1705  426\n1706  426\n1707  426\n1708  427\n1709  427\n1710  427\n1711  427\n1712  428\n1713  428\n1714  428\n1715  428\n1716  429\n1717  429\n1718  429\n1719  429\n1720  430\n1721  430\n1722  430\n1723  430\n1724  431\n1725  431\n1726  431\n1727  431\n1728  432\n1729  432\n1730  432\n1731  432\n1732  433\n1733  433\n1734  433\n1735  433\n1736  434\n1737  434\n1738  434\n1739  434\n1740  435\n1741  435\n1742  435\n1743  435\n1744  436\n1745  436\n1746  436\n1747  436\n1748  437\n1749  437\n1750  437\n1751  437\n1752  438\n1753  438\n1754  438\n1755  438\n1756  439\n1757  439\n1758  439\n1759  439\n1760  440\n1761  440\n1762  440\n1763  440\n1764  441\n1765  441\n1766  441\n1767  441\n1768  442\n1769  442\n1770  442\n1771  442\n1772  443\n1773  443\n1774  443\n1775  443\n1776  444\n1777  444\n1778  444\n1779  444\n1780  445\n1781  445\n1782  445\n1783  445\n1784  446\n1785  446\n1786  446\n1787  446\n1788  447\n1789  447\n1790  447\n1791  447\n1792  448\n1793  448\n1794  448\n1795  448\n1796  449\n1797  449\n1798  449\n1799  449\n1800  450\n1801  450\n1802  450\n1803  450\n1804  451\n1805  451\n1806  451\n1807  451\n1808  452\n1809  452\n1810  452\n1811  452\n1812  453\n1813  453\n1814  453\n1815  453\n1816  454\n1817  454\n1818  454\n1819  454\n1820  455\n1821  455\n1822  455\n1823  455\n1824  456\n1825  456\n1826  456\n1827  456\n1828  457\n1829  457\n1830  457\n1831  457\n1832  458\n1833  458\n1834  458\n1835  458\n1836  459\n1837  459\n1838  459\n1839  459\n1840  460\n1841  460\n1842  460\n1843  460\n1844  461\n1845  461\n1846  461\n1847  461\n1848  462\n1849  462\n1850  462\n1851  462\n1852  463\n1853  463\n1854  463\n1855  463\n1856  464\n1857  464\n1858  464\n1859  464\n1860  465\n1861  465\n1862  465\n1863  465\n1864  466\n1865  466\n1866  466\n1867  466\n1868  467\n1869  467\n1870  467\n1871  467\n1872  468\n1873  468\n1874  468\n1875  468\n1876  469\n1877  469\n1878  469\n1879  469\n1880  470\n1881  470\n1882  470\n1883  470\n1884  471\n1885  471\n1886  471\n1887  471\n1888  472\n1889  472\n1890  472\n1891  472\n1892  473\n1893  473\n1894  473\n1895  473\n1896  474\n1897  474\n1898  474\n1899  474\n1900  475\n1901  475\n1902  475\n1903  475\n1904  476\n1905  476\n1906  476\n1907  476\n1908  477\n1909  477\n1910  477\n1911  477\n1912  478\n1913  478\n1914  478\n1915  478\n1916  479\n1917  479\n1918  479\n1919  479\n1920  480\n1921  480\n1922  480\n1923  480\n1924  481\n1925  481\n1926  481\n1927  481\n1928  482\n1929  482\n1930  482\n1931  482\n1932  483\n1933  483\n1934  483\n1935  483\n1936  484\n1937  484\n1938  484\n1939  484\n1940  485\n1941  485\n1942  485\n1943  485\n1944  486\n1945  486\n1946  486\n1947  486\n1948  487\n1949  487\n1950  487\n1951  487\n1952  488\n1953  488\n1954  488\n1955  488\n1956  489\n1957  489\n1958  489\n1959  489\n1960  490\n1961  490\n1962  490\n1963  490\n1964  491\n1965  491\n1966  491\n1967  491\n1968  492\n1969  492\n1970  492\n1971  492\n1972  493\n1973  493\n1974  493\n1975  493\n1976  494\n1977  494\n1978  494\n1979  494\n1980  495\n1981  495\n1982  495\n1983  495\n1984  496\n1985  496\n1986  496\n1987  496\n1988  497\n1989  497\n1990  497\n1991  497\n1992  498\n1993  498\n1994  498\n1995  498\n1996  499\n1997  499\n1998  499\n1999  499",
                "source_shape": [
                    2000,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"settings\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02473_map_element_nullable.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "WITH map(1, 2, 3, NULL) AS m SELECT m[toNullable(1)], m[toNullable(2)], m[toNullable(3)];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"1\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH map(1, 2, 3, NULL) AS m SELECT m[materialize(toNullable(1))], m[materialize(toNullable(2))], m[materialize(toNullable(3))];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"1\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[toNullable(1)], m[toNullable(2)], m[toNullable(3)];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[materialize(toNullable(1))], m[materialize(toNullable(2))], m[materialize(toNullable(3))];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH map('a', 2, 'b', NULL) AS m SELECT m[toNullable('a')], m[toNullable('b')], m[toNullable('c')];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"2\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH map('a', 2, 'b', NULL) AS m SELECT m[materialize(toNullable('a'))], m[materialize(toNullable('b'))], m[materialize(toNullable('c'))];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"2\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[toNullable('a')], m[toNullable('b')], m[toNullable('c')];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[materialize(toNullable('a'))], m[materialize(toNullable('b'))], m[materialize(toNullable('c'))];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH map(1, 2, 3, NULL) AS m SELECT m[1], m[2], m[3];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"1\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH map(1, 2, 3, NULL) AS m SELECT m[materialize(1)], m[materialize(2)], m[materialize(3)];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"1\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[1], m[2], m[3];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[materialize(1)], m[materialize(2)], m[materialize(3)];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH map('a', 2, 'b', NULL) AS m SELECT m['a'], m['b'], m['c'];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"2\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH map('a', 2, 'b', NULL) AS m SELECT m[materialize('a')], m[materialize('b')], m[materialize('c')];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"2\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m['a'], m['b'], m['c'];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nWITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[materialize('a')], m[materialize('b')], m[materialize('c')];",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function map, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02478_projection_with_group_by_alter.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS testing;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE testing\n(\n    a String,\n    b String,\n    c Int32,\n    d Int32,\n    e Int32,\n    PROJECTION proj_1\n    (\n        SELECT c ORDER BY d\n    ),\n    PROJECTION proj_2\n    (\n        SELECT c ORDER BY e, d\n    )\n)\nENGINE = MergeTree() PRIMARY KEY (a) SETTINGS min_bytes_for_wide_part = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 138 (line 12, col 18): ORDER BY d\n    ),\n    PROJECTION proj_2\n    (\n        SELECT c ORDER BY e, d\n    )\n)\nENGINE = MergeTree() PRIMARY KEY (a) SETTINGS min_bytes_for_wide_part = 0\n . Expected one of: Comma, token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SELECT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO testing SELECT number, number, number, number, number%2 FROM numbers(5);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testing",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- { echoOn }\n\nOPTIMIZE TABLE testing FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT c FROM testing ORDER BY d;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testing",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT c FROM testing ORDER BY e, d;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testing",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- update all columns used by proj_1\nALTER TABLE testing UPDATE c = c+1, d = d+2 WHERE True SETTINGS mutations_sync=2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 95 (line 4, col 56): SETTINGS mutations_sync=2\n FORMAT Native. Expected one of: Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, FORMAT, INTO OUTFILE, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"UPDATE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM system.mutations WHERE database = currentDatabase() AND table = 'testing' AND not is_done;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT c FROM testing ORDER BY d;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testing",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT c FROM testing ORDER BY e, d;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testing",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\n-- update only one column\nALTER TABLE testing UPDATE d = d-1 WHERE True SETTINGS mutations_sync=2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 76 (line 5, col 47): SETTINGS mutations_sync=2\n FORMAT Native. Expected one of: Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, FORMAT, INTO OUTFILE, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"UPDATE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM system.mutations WHERE database = currentDatabase() AND table = 'testing' AND not is_done;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT c FROM testing ORDER BY d;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testing",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT c FROM testing ORDER BY e, d;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testing",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\n-- update only another one column\nALTER TABLE testing UPDATE c = c-1 WHERE True SETTINGS mutations_sync=2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 84 (line 5, col 47): SETTINGS mutations_sync=2\n FORMAT Native. Expected one of: Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, FORMAT, INTO OUTFILE, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"UPDATE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM system.mutations WHERE database = currentDatabase() AND table = 'testing' AND not is_done;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT c FROM testing ORDER BY d;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testing",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT c FROM testing ORDER BY e, d;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testing",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- { echoOff }\n\nDROP TABLE testing;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.testing doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: testing",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02480_max_map_null_totals.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function maxMap, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function maxMap, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function maxMap, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function minMap, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function minMap, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function minMap, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  sumMap(array(modulo(number, 3), minus(modulo(number, 4), 1)), array(number, NULL))\n0                                                                         ([0], [0])\n1                                                                         ([1], [1])\n2                                                                         ([2], [2])",
                "source_shape": [
                    3,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  sumMap(array(modulo(number, 3), minus(modulo(number, 4), 1)), array(number, NULL))\n0                                                                         ([0], [0])\n1                                                             ([0, 1, 2], [0, 1, 2])\n2                                                                         ([1], [1])\n3                                                                         ([2], [2])",
                "source_shape": [
                    4,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  sumMap(array(modulo(number, 3), minus(modulo(number, 4), 1)), array(number, NULL))\n0                                                                         ([0], [0])\n1                                                             ([0, 1, 2], [0, 1, 2])\n2                                                                         ([1], [1])\n3                                                                         ([2], [2])",
                "source_shape": [
                    4,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-'\n0   -",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 55 (line 3, col 53): :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 55 (line 3, col 53): :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 55 (line 3, col 53): :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-'\n0   -",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 55 (line 3, col 53): :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 55 (line 3, col 53): :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 55 (line 3, col 53): :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02494_query_cache_query_log.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-parallel\n-- Tag no-parallel: Messes with internal cache\n\nSYSTEM DROP QUERY CACHE;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 82 (line 4, col 13): QUERY CACHE\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- DROP TABLE system.query_log;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 35 (line 4, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- debugging\n\n\n\nSELECT '-- Run a query with query cache not enabled';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- Run a query with query cache not enabled'\n0   -- Run a query with query cache not enabled",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 124437993;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   124437993\n0  124437993",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM FLUSH LOGS;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 16 (line 3, col 14): LOGS\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Field 'query_cache_usage' should be 'None'\nSELECT type, query, query_cache_usage\nFROM system.query_log\nWHERE current_database = currentDatabase()\n    AND query = 'SELECT 124437993;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 168 (line 7, col 17): 'SELECT 124437993\n FORMAT Native. Single quoted string is not closed, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"'SELECT 124437993;\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "'\n    AND type = 'QueryFinish'\nORDER BY type, query_cache_usage;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 1 (line 1, col 1): '\n    AND type = 'QueryFinish'\nORDER BY type, query_cache_usage\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'\n    AND type = '\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\n\nSELECT '-- Run a query with query cache enabled';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- Run a query with query cache enabled'\n0   -- Run a query with query cache enabled",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 124437994 SETTINGS use_query_cache = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting use_query_cache, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"use_query_cache\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM FLUSH LOGS;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 16 (line 3, col 14): LOGS\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Field 'query_cache_usage' should be 'Write'\nSELECT type, query, query_cache_usage\nFROM system.query_log\nWHERE current_database = currentDatabase()\n    AND query = 'SELECT 124437994 SETTINGS use_query_cache = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 169 (line 7, col 17): 'SELECT 124437994 SETTINGS use_query_cache = 1\n FORMAT Native. Single quoted string is not closed, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"'SELECT 124437994 SETTINGS use_query_cache = 1;\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "'\n    AND type = 'QueryFinish'\nORDER BY type, query_cache_usage;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 1 (line 1, col 1): '\n    AND type = 'QueryFinish'\nORDER BY type, query_cache_usage\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'\n    AND type = '\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\n\nSELECT '-- Run the same query with query cache enabled';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- Run the same query with query cache enabled'\n0   -- Run the same query with query cache enabled",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 124437994 SETTINGS use_query_cache = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting use_query_cache, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"use_query_cache\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM FLUSH LOGS;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 16 (line 3, col 14): LOGS\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Field 'query_cache_usage' should be 'Read'\nSELECT type, query, query_cache_usage\nFROM system.query_log\nWHERE current_database = currentDatabase()\n    AND query = 'SELECT 124437994 SETTINGS use_query_cache = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 168 (line 7, col 17): 'SELECT 124437994 SETTINGS use_query_cache = 1\n FORMAT Native. Single quoted string is not closed, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"'SELECT 124437994 SETTINGS use_query_cache = 1;\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "'\n    AND type = 'QueryFinish'\nORDER BY type, query_cache_usage;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 1 (line 1, col 1): '\n    AND type = 'QueryFinish'\nORDER BY type, query_cache_usage\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'\n    AND type = '\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\n\nSELECT '-- Throw exception with query cache enabled';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- Throw exception with query cache enabled'\n0   -- Throw exception with query cache enabled",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 124437995, throwIf(1) SETTINGS use_query_cache = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting use_query_cache, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"use_query_cache\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO }\n\nSYSTEM FLUSH LOGS;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 71 (line 3, col 14): LOGS\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Field 'query_cache_usage' should be 'None'\nSELECT query, query_cache_usage\nFROM system.query_log\nWHERE current_database = currentDatabase()\n    AND query = 'SELECT 124437995, throwIf(1) SETTINGS use_query_cache = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 162 (line 7, col 17): 'SELECT 124437995, throwIf(1) SETTINGS use_query_cache = 1\n FORMAT Native. Single quoted string is not closed, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"'SELECT 124437995, throwIf(1) SETTINGS use_query_cache = 1;\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "'\n    AND type = 'ExceptionWhileProcessing';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 1 (line 1, col 1): '\n    AND type = 'ExceptionWhileProcessing'\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'\n    AND type = '\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSYSTEM DROP QUERY CACHE;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 13): QUERY CACHE\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02504_parse_datetime_best_effort_calebeaires.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "CREATE TEMPORARY TABLE my_table (col_date Date, col_date32 Date32, col_datetime DateTime('UTC'), col_datetime32 DateTime32('UTC'), col_datetime64 DateTime64);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 50, e.displayText() = DB::Exception: Unknown data type family: Date32, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"'UTC'\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into `my_table` (`col_date`, `col_date32`, `col_datetime`, `col_datetime32`, `col_datetime64`) values (parseDateTime64BestEffort('1969-01-01'), '1969-01-01', parseDateTime64BestEffort('1969-01-01 10:42:00'), parseDateTime64BestEffort('1969-01-01 10:42:00'), parseDateTime64BestEffort('1969-01-01 10:42:00'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.my_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: my_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- The values for Date32 and DateTime64 will be year 1969, while the values of Date, DateTime will contain a value affected by implementation-defined overflow and can be arbitrary.\nSELECT toYear(col_date), col_date32, toYear(col_datetime), toYear(col_datetime32), col_datetime64 FROM my_table;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.my_table doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: my_table",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02515_tuple_lambda_parsing.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "explain ast select tuple(a) -> f(a);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 1 (line 1, col 1): explain ast select tuple(a) -> f(a)\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ast\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { clientError SYNTAX_ERROR }\nexplain ast select tuple(a, b) -> f(a);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 34 (line 2, col 1): explain ast select tuple(a, b) -> f(a)\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ast\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { clientError SYNTAX_ERROR }\nexplain ast select (tuple(a)) -> f(a);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 34 (line 2, col 1): explain ast select (tuple(a)) -> f(a)\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ast\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { clientError SYNTAX_ERROR }\nexplain ast select (f(a)) -> f(a);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 34 (line 2, col 1): explain ast select (f(a)) -> f(a)\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ast\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { clientError SYNTAX_ERROR }\nexplain ast select (a::UInt64) -> f(a);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 34 (line 2, col 1): explain ast select (a::UInt64) -> f(a)\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ast\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { clientError SYNTAX_ERROR }\nexplain ast select (1) -> f(a);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 34 (line 2, col 1): explain ast select (1) -> f(a)\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ast\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { clientError SYNTAX_ERROR }\nexplain ast select (1::UInt64) -> f(a);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 34 (line 2, col 1): explain ast select (1::UInt64) -> f(a)\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ast\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { clientError SYNTAX_ERROR }\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 36 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02516_projections_and_context.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS test1__fuzz_37;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE test1__fuzz_37 (`i` Date) ENGINE = MergeTree ORDER BY i;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into test1__fuzz_37 values ('2020-10-10');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1__fuzz_37",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nset allow_experimental_analyzer = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 39 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM test1__fuzz_37 GROUP BY dictHas(NULL, (dictHas(NULL, (('', materialize(NULL)), materialize(NULL))), 'KeyKey')), dictHas('test_dictionary', tuple(materialize('Ke\\0'))), tuple(dictHas(NULL, (tuple('Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0\\0\\0\\0Ke\\0'), materialize(NULL)))), 'test_dicti\\0nary', (('', materialize(NULL)), dictHas(NULL, (dictHas(NULL, tuple(materialize(NULL))), 'KeyKeyKeyKeyKeyKeyKeyKey')), materialize(NULL));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: No such external dictionary: test_dictionary, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1__fuzz_37",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError BAD_ARGUMENTS }\nSELECT count() FROM test1__fuzz_37 GROUP BY dictHas('non_existing_dictionary', materialize('a'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type String of second argument of function dictHas, must be UInt64 or tuple(...)., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1__fuzz_37",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError BAD_ARGUMENTS }\nset allow_experimental_analyzer = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 72 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM test1__fuzz_37 GROUP BY dictHas(NULL, (dictHas(NULL, (('', materialize(NULL)), materialize(NULL))), 'KeyKey')), dictHas('test_dictionary', tuple(materialize('Ke\\0'))), tuple(dictHas(NULL, (tuple('Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0Ke\\0\\0\\0\\0Ke\\0'), materialize(NULL)))), 'test_dicti\\0nary', (('', materialize(NULL)), dictHas(NULL, (dictHas(NULL, tuple(materialize(NULL))), 'KeyKeyKeyKeyKeyKeyKeyKey')), materialize(NULL));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: No such external dictionary: test_dictionary, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1__fuzz_37",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError BAD_ARGUMENTS }\nSELECT count() FROM test1__fuzz_37 GROUP BY dictHas('non_existing_dictionary', materialize('a'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: Illegal type String of second argument of function dictHas, must be UInt64 or tuple(...)., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1__fuzz_37",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError BAD_ARGUMENTS }\nDROP TABLE test1__fuzz_37;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1__fuzz_37",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02521_lightweight_delete_and_ttl.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS lwd_test_02521;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE lwd_test_02521 (id UInt64, value String, event_time DateTime)\nENGINE MergeTree()\nORDER BY id\nSETTINGS min_bytes_for_wide_part = 0, index_granularity = 8192, index_granularity_bytes = '10Mi';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting min_bytes_for_wide_part for storage MergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MergeTree\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO lwd_test_02521 SELECT number, randomString(10), now() - INTERVAL 2 MONTH FROM numbers(50000);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.lwd_test_02521 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"2\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO lwd_test_02521 SELECT number, randomString(10), now() FROM numbers(50000);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.lwd_test_02521 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: lwd_test_02521",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE lwd_test_02521 FINAL SETTINGS mutations_sync = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 39 (line 3, col 37): SETTINGS mutations_sync = 1\n FORMAT Native. Expected one of: DEDUPLICATE, FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET mutations_sync=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- { echoOn }\nSELECT 'Rows in parts', SUM(rows) FROM system.parts WHERE database = currentDatabase() AND table = 'lwd_test_02521' AND active;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'Rows in parts'  SUM(rows)\n0   Rows in parts          0",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 'Count', count() FROM lwd_test_02521;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.lwd_test_02521 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: lwd_test_02521",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nDELETE FROM lwd_test_02521 WHERE id < 25000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 4 (line 4, col 1): DELETE FROM lwd_test_02521 WHERE id < 25000\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: lwd_test_02521",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'Rows in parts', SUM(rows) FROM system.parts WHERE database = currentDatabase() AND table = 'lwd_test_02521' AND active;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'Rows in parts'  SUM(rows)\n0   Rows in parts          0",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 'Count', count() FROM lwd_test_02521;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.lwd_test_02521 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: lwd_test_02521",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nALTER TABLE lwd_test_02521 MODIFY TTL event_time + INTERVAL 1 MONTH SETTINGS mutations_sync = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 38 (line 4, col 35): TTL event_time + INTERVAL 1 MONTH SETTINGS mutations_sync = 1\n FORMAT Native. Expected one of: COLUMN, PRIMARY KEY, ORDER BY, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"MODIFY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'Rows in parts', SUM(rows) FROM system.parts WHERE database = currentDatabase() AND table = 'lwd_test_02521' AND active;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'Rows in parts'  SUM(rows)\n0   Rows in parts          0",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 'Count', count() FROM lwd_test_02521;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.lwd_test_02521 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: lwd_test_02521",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nALTER TABLE lwd_test_02521 DELETE WHERE id >= 40000 SETTINGS mutations_sync = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 56 (line 4, col 53): SETTINGS mutations_sync = 1\n FORMAT Native. Expected one of: Comma, QuestionMark, token, OR, BETWEEN, IS, FORMAT, INTO OUTFILE, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DELETE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'Rows in parts', SUM(rows) FROM system.parts WHERE database = currentDatabase() AND table = 'lwd_test_02521' AND active;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'Rows in parts'  SUM(rows)\n0   Rows in parts          0",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 'Count', count() FROM lwd_test_02521;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.lwd_test_02521 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: lwd_test_02521",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nOPTIMIZE TABLE lwd_test_02521 FINAL SETTINGS mutations_sync = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 40 (line 4, col 37): SETTINGS mutations_sync = 1\n FORMAT Native. Expected one of: DEDUPLICATE, FORMAT, INTO OUTFILE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 'Rows in parts', SUM(rows) FROM system.parts WHERE database = currentDatabase() AND table = 'lwd_test_02521' AND active;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  'Rows in parts'  SUM(rows)\n0   Rows in parts          0",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 'Count', count() FROM lwd_test_02521;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.lwd_test_02521 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: lwd_test_02521",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- { echoOff }\n\nDROP TABLE lwd_test_02521;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.lwd_test_02521 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: lwd_test_02521",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02539_vertical_merge_compact_parts.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS t_compact_vertical_merge;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t_compact_vertical_merge (id UInt64, s LowCardinality(String), arr Array(UInt64))\nENGINE MergeTree ORDER BY id\nSETTINGS\n    index_granularity = 16,\n    min_bytes_for_wide_part = 0,\n    min_rows_for_wide_part = 100,\n    vertical_merge_algorithm_min_rows_to_activate = 1,\n    vertical_merge_algorithm_min_columns_to_activate = 1,\n    allow_vertical_merges_from_compact_to_wide_parts = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 44, e.displayText() = DB::Exception: Cannot create table with column 's' which type is 'LowCardinality(String)' because LowCardinality type is not allowed. Set setting allow_experimental_low_cardinality_type = 1 in order to allow it., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"String\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t_compact_vertical_merge SELECT number, toString(number), range(number % 10) FROM numbers(40);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_compact_vertical_merge doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_compact_vertical_merge",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t_compact_vertical_merge SELECT number, toString(number), range(number % 10) FROM numbers(40);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_compact_vertical_merge doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_compact_vertical_merge",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE t_compact_vertical_merge FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_compact_vertical_merge doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM FLUSH LOGS;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 2, col 14): LOGS\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH splitByChar('_', part_name) AS name_parts,\n    name_parts[2]::UInt64 AS min_block,\n    name_parts[3]::UInt64 AS max_block\nSELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log\nWHERE\n    database = currentDatabase() AND\n    table = 't_compact_vertical_merge' AND\n    min_block = 1 AND max_block = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 68 (line 4, col 18): ::UInt64 AS min_block,\n    name_parts[3]::UInt64 AS max_block\nSELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log\nWHERE\n   . Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, SELECT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"name_parts\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO t_compact_vertical_merge SELECT number, toString(number), range(number % 10) FROM numbers(40);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_compact_vertical_merge doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_compact_vertical_merge",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nOPTIMIZE TABLE t_compact_vertical_merge FINAL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_compact_vertical_merge doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSYSTEM FLUSH LOGS;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 2, col 14): LOGS\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SYSTEM\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH splitByChar('_', part_name) AS name_parts,\n    name_parts[2]::UInt64 AS min_block,\n    name_parts[3]::UInt64 AS max_block\nSELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log\nWHERE\n    database = currentDatabase() AND\n    table = 't_compact_vertical_merge' AND\n    min_block = 1 AND max_block = 3;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 68 (line 4, col 18): ::UInt64 AS min_block,\n    name_parts[3]::UInt64 AS max_block\nSELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log\nWHERE\n   . Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, SELECT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"name_parts\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE t_compact_vertical_merge;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_compact_vertical_merge doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_compact_vertical_merge",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02540_date_column_consistent_insert_behaviour.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS 02540_date;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 1, col 22): 02540_date\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE 02540_date (txt String, x Date) engine=Memory;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 2, col 14): 02540_date (txt String, x Date) engine=Memory\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- Date: Supported range of values: [1970-01-01, 2149-06-06].\n--                                  ^----closed interval---^\n\nINSERT INTO 02540_date VALUES('65535', 65535);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 139 (line 6, col 13): 02540_date VALUES('65535', 65535). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toUInt16(65535)', toUInt16(65535));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toUInt16(65535)', toUInt16(65535)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- #43370 weird one -> used to be 1970-01-01\nINSERT INTO 02540_date VALUES('toInt32(65535)', toInt32(65535));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 59 (line 2, col 13): 02540_date VALUES('toInt32(65535)', toInt32(65535)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toUInt32(65535)', toUInt32(65535));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toUInt32(65535)', toUInt32(65535)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toDate(65535)', toDate(65535));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toDate(65535)', toDate(65535)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO 02540_date VALUES('CAST(65535 as UInt16)', CAST(65535 as UInt16));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 13): 02540_date VALUES('CAST(65535 as UInt16)', CAST(65535 as UInt16)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(65535 as Int32)', CAST(65535 as Int32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(65535 as Int32)', CAST(65535 as Int32)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(65535 as UInt32)', CAST(65535 as UInt32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(65535 as UInt32)', CAST(65535 as UInt32)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(65535 as Date)', CAST(65535 as Date));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(65535 as Date)', CAST(65535 as Date)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO 02540_date VALUES('65534', 65534);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 13): 02540_date VALUES('65534', 65534). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toUInt16(65534)', toUInt16(65534));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toUInt16(65534)', toUInt16(65534)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toInt32(65534)', toInt32(65534));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toInt32(65534)', toInt32(65534)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toUInt32(65534)', toUInt32(65534));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toUInt32(65534)', toUInt32(65534)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toDate(65534)', toDate(65534));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toDate(65534)', toDate(65534)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO 02540_date VALUES('CAST(65534 as UInt16)', CAST(65534 as UInt16));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 13): 02540_date VALUES('CAST(65534 as UInt16)', CAST(65534 as UInt16)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(65534 as Int32)', CAST(65534 as Int32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(65534 as Int32)', CAST(65534 as Int32)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(65534 as UInt32)', CAST(65534 as UInt32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(65534 as UInt32)', CAST(65534 as UInt32)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(65534 as Date)', CAST(65534 as Date));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(65534 as Date)', CAST(65534 as Date)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO 02540_date VALUES('0', 0);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 13): 02540_date VALUES('0', 0). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toUInt16(0)', toUInt16(0));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toUInt16(0)', toUInt16(0)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toInt32(0)', toInt32(0));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toInt32(0)', toInt32(0)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toUInt32(0)', toUInt32(0));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toUInt32(0)', toUInt32(0)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toDate(0)', toDate(0));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toDate(0)', toDate(0)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO 02540_date VALUES('CAST(0 as UInt16)', CAST(0 as UInt16));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 13): 02540_date VALUES('CAST(0 as UInt16)', CAST(0 as UInt16)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(0 as Int32)', CAST(0 as Int32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(0 as Int32)', CAST(0 as Int32)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(0 as UInt32)', CAST(0 as UInt32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(0 as UInt32)', CAST(0 as UInt32)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(0 as Date)', CAST(0 as Date));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(0 as Date)', CAST(0 as Date)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\n-- 65536 will be done using the TZ settings (comments in #45914)\n-- We can expect either 1970-01-01 or 1970-01-02\n-- time_zone.toDayNum(std::min(time_t(from), time_t(0xFFFFFFFF)))\nINSERT INTO 02540_date VALUES('65536', 65536);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 196 (line 7, col 13): 02540_date VALUES('65536', 65536). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toUInt16(65536)', toUInt16(65536));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toUInt16(65536)', toUInt16(65536)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- Narrowing conversion 65536 ==> 0\nINSERT INTO 02540_date VALUES('toInt32(65536)', toInt32(65536));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 2, col 13): 02540_date VALUES('toInt32(65536)', toInt32(65536)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toUInt32(65536)', toUInt32(65536));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toUInt32(65536)', toUInt32(65536)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('toDate(65536)', toDate(65536));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('toDate(65536)', toDate(65536)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO 02540_date VALUES('CAST(65536 as UInt16)', CAST(65536 as UInt16));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 15 (line 3, col 13): 02540_date VALUES('CAST(65536 as UInt16)', CAST(65536 as UInt16)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- Narrowing conversion 65536 ==> 0\nINSERT INTO 02540_date VALUES('CAST(65536 as Int32)', CAST(65536 as Int32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 2, col 13): 02540_date VALUES('CAST(65536 as Int32)', CAST(65536 as Int32)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(65536 as UInt32)', CAST(65536 as UInt32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(65536 as UInt32)', CAST(65536 as UInt32)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO 02540_date VALUES('CAST(65536 as Date)', CAST(65536 as Date));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 14 (line 2, col 13): 02540_date VALUES('CAST(65536 as Date)', CAST(65536 as Date)). Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nSELECT x, txt FROM 02540_date WHERE txt == '65535';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 23 (line 4, col 20): 02540_date WHERE txt == '65535'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(65535)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toUInt16(65535)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toInt32(65535)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toInt32(65535)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toUInt32(65535)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toUInt32(65535)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toDate(65535)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toDate(65535)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as UInt16)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 3, col 20): 02540_date WHERE txt == 'CAST(65535 as UInt16)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as Int32)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'CAST(65535 as Int32)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as UInt32)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'CAST(65535 as UInt32)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as Date)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'CAST(65535 as Date)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x, txt FROM 02540_date WHERE txt == '65534';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 3, col 20): 02540_date WHERE txt == '65534'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(65534)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toUInt16(65534)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toInt32(65534)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toInt32(65534)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toUInt32(65534)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toUInt32(65534)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toDate(65534)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toDate(65534)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as UInt16)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 3, col 20): 02540_date WHERE txt == 'CAST(65534 as UInt16)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as Int32)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'CAST(65534 as Int32)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as UInt32)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'CAST(65534 as UInt32)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as Date)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'CAST(65534 as Date)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x, txt FROM 02540_date WHERE txt == '0';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 3, col 20): 02540_date WHERE txt == '0'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(0)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toUInt16(0)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toInt32(0)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toInt32(0)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toUInt32(0)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toUInt32(0)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'toDate(0)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'toDate(0)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as UInt16)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 3, col 20): 02540_date WHERE txt == 'CAST(0 as UInt16)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as Int32)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'CAST(0 as Int32)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as UInt32)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'CAST(0 as UInt32)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as Date)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'CAST(0 as Date)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == '65536';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 47 (line 3, col 45): 02540_date WHERE txt == '65536'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'toInt32(65536)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 2, col 45): 02540_date WHERE txt == 'toInt32(65536)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'toUInt32(65536)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 2, col 45): 02540_date WHERE txt == 'toUInt32(65536)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'toDate(65536)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 2, col 45): 02540_date WHERE txt == 'toDate(65536)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'CAST(65536 as Int32)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 47 (line 3, col 45): 02540_date WHERE txt == 'CAST(65536 as Int32)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'CAST(65536 as UInt32)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 2, col 45): 02540_date WHERE txt == 'CAST(65536 as UInt32)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'CAST(65536 as Date)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 2, col 45): 02540_date WHERE txt == 'CAST(65536 as Date)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(65536)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 3, col 20): 02540_date WHERE txt == 'toUInt16(65536)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, txt FROM 02540_date WHERE txt == 'CAST(65536 as UInt16)';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 21 (line 2, col 20): 02540_date WHERE txt == 'CAST(65536 as UInt16)'\n FORMAT Native. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"02540_date\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02560_vertical_merge_memory_usage.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-s3-storage\ndrop table if exists tvm;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ncreate table tvm (c0 UInt64, c1 UInt64, c2 UInt64, c3 UInt64, c4 UInt64, c5 UInt64, c6 UInt64, c7 UInt64, c8 UInt64, c9 UInt64, c10 UInt64, c11 UInt64, c12 UInt64, c13 UInt64, c14 UInt64, c15 UInt64, c16 UInt64, c17 UInt64, c18 UInt64, c19 UInt64, c20 UInt64, c21 UInt64, c22 UInt64, c23 UInt64, c24 UInt64, c25 UInt64, c26 UInt64, c27 UInt64, c28 UInt64, c29 UInt64, c30 UInt64, c31 UInt64, c32 UInt64, c33 UInt64, c34 UInt64, c35 UInt64, c36 UInt64, c37 UInt64, c38 UInt64, c39 UInt64, c40 UInt64, c41 UInt64, c42 UInt64, c43 UInt64, c44 UInt64, c45 UInt64, c46 UInt64, c47 UInt64, c48 UInt64, c49 UInt64, c50 UInt64, c51 UInt64, c52 UInt64, c53 UInt64, c54 UInt64, c55 UInt64, c56 UInt64, c57 UInt64, c58 UInt64, c59 UInt64, c60 UInt64, c61 UInt64, c62 UInt64, c63 UInt64, c64 UInt64, c65 UInt64, c66 UInt64, c67 UInt64, c68 UInt64, c69 UInt64, c70 UInt64, c71 UInt64, c72 UInt64, c73 UInt64, c74 UInt64, c75 UInt64, c76 UInt64, c77 UInt64, c78 UInt64, c79 UInt64, c80 UInt64, c81 UInt64, c82 UInt64, c83 UInt64, c84 UInt64, c85 UInt64, c86 UInt64, c87 UInt64, c88 UInt64, c89 UInt64, c90 UInt64, c91 UInt64, c92 UInt64, c93 UInt64, c94 UInt64, c95 UInt64, c96 UInt64, c97 UInt64, c98 UInt64, c99 UInt64, c100 UInt64, c101 UInt64, c102 UInt64, c103 UInt64, c104 UInt64, c105 UInt64, c106 UInt64, c107 UInt64, c108 UInt64, c109 UInt64, c110 UInt64, c111 UInt64, c112 UInt64, c113 UInt64, c114 UInt64, c115 UInt64, c116 UInt64, c117 UInt64, c118 UInt64, c119 UInt64, c120 UInt64, c121 UInt64, c122 UInt64, c123 UInt64, c124 UInt64, c125 UInt64, c126 UInt64, c127 UInt64, c128 UInt64, c129 UInt64, c130 UInt64, c131 UInt64, c132 UInt64, c133 UInt64, c134 UInt64, c135 UInt64, c136 UInt64, c137 UInt64, c138 UInt64, c139 UInt64, c140 UInt64, c141 UInt64, c142 UInt64, c143 UInt64, c144 UInt64, c145 UInt64, c146 UInt64, c147 UInt64, c148 UInt64, c149 UInt64, c150 UInt64, c151 UInt64, c152 UInt64, c153 UInt64, c154 UInt64, c155 UInt64, c156 UInt64, c157 UInt64, c158 UInt64, c159 UInt64, c160 UInt64, c161 UInt64, c162 UInt64, c163 UInt64, c164 UInt64, c165 UInt64, c166 UInt64, c167 UInt64, c168 UInt64, c169 UInt64, c170 UInt64, c171 UInt64, c172 UInt64, c173 UInt64, c174 UInt64, c175 UInt64, c176 UInt64, c177 UInt64, c178 UInt64, c179 UInt64, c180 UInt64, c181 UInt64, c182 UInt64, c183 UInt64, c184 UInt64, c185 UInt64, c186 UInt64, c187 UInt64, c188 UInt64, c189 UInt64, c190 UInt64, c191 UInt64, c192 UInt64, c193 UInt64, c194 UInt64, c195 UInt64, c196 UInt64, c197 UInt64, c198 UInt64, c199 UInt64, c200 UInt64, c201 UInt64, c202 UInt64, c203 UInt64, c204 UInt64, c205 UInt64, c206 UInt64, c207 UInt64, c208 UInt64, c209 UInt64, c210 UInt64, c211 UInt64, c212 UInt64, c213 UInt64, c214 UInt64, c215 UInt64, c216 UInt64, c217 UInt64, c218 UInt64, c219 UInt64, c220 UInt64, c221 UInt64, c222 UInt64, c223 UInt64, c224 UInt64, c225 UInt64, c226 UInt64, c227 UInt64, c228 UInt64, c229 UInt64, c230 UInt64, c231 UInt64, c232 UInt64, c233 UInt64, c234 UInt64, c235 UInt64, c236 UInt64, c237 UInt64, c238 UInt64, c239 UInt64, c240 UInt64, c241 UInt64, c242 UInt64, c243 UInt64, c244 UInt64, c245 UInt64, c246 UInt64, c247 UInt64, c248 UInt64, c249 UInt64, c250 UInt64, c251 UInt64, c252 UInt64, c253 UInt64, c254 UInt64, c255 UInt64, c256 UInt64, c257 UInt64, c258 UInt64, c259 UInt64, c260 UInt64, c261 UInt64, c262 UInt64, c263 UInt64, c264 UInt64, c265 UInt64, c266 UInt64, c267 UInt64, c268 UInt64, c269 UInt64, c270 UInt64, c271 UInt64, c272 UInt64, c273 UInt64, c274 UInt64, c275 UInt64, c276 UInt64, c277 UInt64, c278 UInt64, c279 UInt64, c280 UInt64, c281 UInt64, c282 UInt64, c283 UInt64, c284 UInt64, c285 UInt64, c286 UInt64, c287 UInt64, c288 UInt64, c289 UInt64, c290 UInt64, c291 UInt64, c292 UInt64, c293 UInt64, c294 UInt64, c295 UInt64, c296 UInt64, c297 UInt64, c298 UInt64, c299 UInt64) engine = MergeTree order by tuple() settings min_rows_for_wide_part = 10, min_bytes_for_wide_part=0, vertical_merge_algorithm_min_rows_to_activate=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Unknown setting min_rows_for_wide_part for storage MergeTree, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ninsert into tvm select number + 0, number + 1, number + 2, number + 3, number + 4, number + 5, number + 6, number + 7, number + 8, number + 9, number + 10, number + 11, number + 12, number + 13, number + 14, number + 15, number + 16, number + 17, number + 18, number + 19, number + 20, number + 21, number + 22, number + 23, number + 24, number + 25, number + 26, number + 27, number + 28, number + 29, number + 30, number + 31, number + 32, number + 33, number + 34, number + 35, number + 36, number + 37, number + 38, number + 39, number + 40, number + 41, number + 42, number + 43, number + 44, number + 45, number + 46, number + 47, number + 48, number + 49, number + 50, number + 51, number + 52, number + 53, number + 54, number + 55, number + 56, number + 57, number + 58, number + 59, number + 60, number + 61, number + 62, number + 63, number + 64, number + 65, number + 66, number + 67, number + 68, number + 69, number + 70, number + 71, number + 72, number + 73, number + 74, number + 75, number + 76, number + 77, number + 78, number + 79, number + 80, number + 81, number + 82, number + 83, number + 84, number + 85, number + 86, number + 87, number + 88, number + 89, number + 90, number + 91, number + 92, number + 93, number + 94, number + 95, number + 96, number + 97, number + 98, number + 99, number + 100, number + 101, number + 102, number + 103, number + 104, number + 105, number + 106, number + 107, number + 108, number + 109, number + 110, number + 111, number + 112, number + 113, number + 114, number + 115, number + 116, number + 117, number + 118, number + 119, number + 120, number + 121, number + 122, number + 123, number + 124, number + 125, number + 126, number + 127, number + 128, number + 129, number + 130, number + 131, number + 132, number + 133, number + 134, number + 135, number + 136, number + 137, number + 138, number + 139, number + 140, number + 141, number + 142, number + 143, number + 144, number + 145, number + 146, number + 147, number + 148, number + 149, number + 150, number + 151, number + 152, number + 153, number + 154, number + 155, number + 156, number + 157, number + 158, number + 159, number + 160, number + 161, number + 162, number + 163, number + 164, number + 165, number + 166, number + 167, number + 168, number + 169, number + 170, number + 171, number + 172, number + 173, number + 174, number + 175, number + 176, number + 177, number + 178, number + 179, number + 180, number + 181, number + 182, number + 183, number + 184, number + 185, number + 186, number + 187, number + 188, number + 189, number + 190, number + 191, number + 192, number + 193, number + 194, number + 195, number + 196, number + 197, number + 198, number + 199, number + 200, number + 201, number + 202, number + 203, number + 204, number + 205, number + 206, number + 207, number + 208, number + 209, number + 210, number + 211, number + 212, number + 213, number + 214, number + 215, number + 216, number + 217, number + 218, number + 219, number + 220, number + 221, number + 222, number + 223, number + 224, number + 225, number + 226, number + 227, number + 228, number + 229, number + 230, number + 231, number + 232, number + 233, number + 234, number + 235, number + 236, number + 237, number + 238, number + 239, number + 240, number + 241, number + 242, number + 243, number + 244, number + 245, number + 246, number + 247, number + 248, number + 249, number + 250, number + 251, number + 252, number + 253, number + 254, number + 255, number + 256, number + 257, number + 258, number + 259, number + 260, number + 261, number + 262, number + 263, number + 264, number + 265, number + 266, number + 267, number + 268, number + 269, number + 270, number + 271, number + 272, number + 273, number + 274, number + 275, number + 276, number + 277, number + 278, number + 279, number + 280, number + 281, number + 282, number + 283, number + 284, number + 285, number + 286, number + 287, number + 288, number + 289, number + 290, number + 291, number + 292, number + 293, number + 294, number + 295, number + 296, number + 297, number + 298, number + 299 from numbers(20);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.tvm doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: tvm",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\noptimize table tvm final;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.tvm doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"optimize\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nsystem flush logs;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 16 (line 3, col 14): logs\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"system\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n-- should be about 4MB\nselect formatReadableSize(peak_memory_usage), * from system.part_log where table = 'tvm' and database = currentDatabase() and event_date >= today() - 1 and event_type = 'MergeParts' and peak_memory_usage > 100000000 format Vertical;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 248 (line 3, col 224): Vertical\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ndrop table tvm;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.tvm doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: tvm",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02561_with_fill_date_datetime_incompatible.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT today() AS a\nORDER BY a ASC WITH FILL FROM now() - toIntervalMonth(1) TO now() + toIntervalDay(1) STEP 82600;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 36 (line 2, col 16): WITH FILL FROM now() - toIntervalMonth(1) TO now() + toIntervalDay(1) STEP 82600\n FORMAT Native. Expected one of: UNION ALL, Comma, token, SETTINGS, FORMAT, INTO OUTFILE, LIMIT, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"WITH\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError 475 }\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02568_array_map_const_low_cardinality.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT arrayMap(x -> (toLowCardinality(1) + 1::Nullable(UInt8)), [1]);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 1, col 46): ::Nullable(UInt8)), [1])\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02582_async_reading_with_small_limit.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-s3-storage\n\nSET merge_tree_read_split_ranges_into_intersecting_and_non_intersecting_injection_probability = 0.0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 126 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ndrop table if exists t;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ncreate table t(a UInt64) engine=MergeTree order by tuple();",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nsystem stop merges t;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 25 (line 4, col 2): FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"system\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\ninsert into t select * from numbers_mt(1e3);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function numbers_mt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into t select * from numbers_mt(1e3);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function numbers_mt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into t select * from numbers_mt(1e3);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function numbers_mt, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nset allow_asynchronous_read_from_io_pool_for_merge_tree = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 64 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nset max_streams_for_merge_tree_reading = 64;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 47 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nset max_block_size = 65409;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- slightly different transforms will be generated by reading steps if we let settings randomisation to change this setting value --\nset read_in_order_two_level_merge_threshold = 1000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 188 (line 5, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- for pretty simple queries (no filter, aggregation and so on) with a limit smaller than the `max_block_size` we request reading using only a single stream for better performance --\nexplain pipeline select * from t limit 100;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 186 (line 4, col 1): explain pipeline select * from t limit 100\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"pipeline\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02677_grace_hash_limit_race.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS test_grace_hash;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE test_grace_hash (id UInt32, value UInt64) ENGINE = MergeTree ORDER BY id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO test_grace_hash SELECT number, number % 100 = 0 FROM numbers(100000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_grace_hash",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET join_algorithm = 'grace_hash';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 38 (line 4, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count() FROM (\n    SELECT f.id FROM test_grace_hash AS f\n    LEFT JOIN test_grace_hash AS d\n    ON f.id = d.id\n    LIMIT 1000\n);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0     1000",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_grace_hash",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE test_grace_hash;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_grace_hash",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02686_bson3.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- It correctly throws exception about incorrect data:\n\nSELECT * FROM format(BSONEachRow, 'WatchID Int64, JavaEnable Int16, Title String, GoodEvent Int16, EventTime DateTime, EventDate Date, CounterID Int32, ClientIP Int32, RegionID Int32, UserID Int64, CounterClass Int16, OS Int16, UserAgent Int16, URL String, Referer String, IsRefresh Int16, RefererCategoryID Int16, RefererRegionID Int32, URLCategoryID Int16, URLRegionID Int32, ResolutionWidth Int16, ResolutionHeight Int16, ResolutionDepth Int16, FlashMajor Int16, FlashMinor Int16, FlashMinor2 String, NetMajor Int16, NetMinor Int16, UserAgentMajor Int16, UserAgentMinor String, CookieEnable Int16, JavascriptEnable Int16, IsMobile Int16, MobilePhone Int16, MobilePhoneModel String, Params String, IPNetworkID Int32, TraficSourceID Int16, SearchEngineID Int16, SearchPhrase String, AdvEngineID Int16, IsArtifical Int16, WindowClientWidth Int16, WindowClientHeight Int16, ClientTimeZone Int16, ClientEventTime DateTime, SilverlightVersion1 Int16, SilverlightVersion2 Int16, SilverlightVersion3 Int32, SilverlightVersion4 Int16, PageCharset String, CodeVersion Int32, IsLink Int16, IsDownload Int16, IsNotBounce Int16, FUniqID Int64, OriginalURL String, HID Int32, IsOldCounter Int16, IsEvent Int16, IsParameter Int16, DontCountHits Int16, WithHash Int16, HitColor String, LocalEventTime DateTime, Age Int16, Sex Int16, Income Int16, Interests Int16, Robotness Int16, RemoteIP Int32, WindowName Int32, OpenerName Int32, HistoryLength Int16, BrowserLanguage String, BrowserCountry String, SocialNetwork String, SocialAction String, HTTPError Int16, SendTiming Int32, DNSTiming Int32, ConnectTiming Int32, ResponseStartTiming Int32, ResponseEndTiming Int32, FetchTiming Int32, SocialSourceNetworkID Int16, SocialSourcePage String, ParamPrice Int64, ParamOrderID String, ParamCurrency String, ParamCurrencyID Int16, OpenstatServiceName String, OpenstatCampaignID String, OpenstatAdID String, OpenstatSourceID String, UTMSource String, UTMMedium String, UTMCampaign String, UTMContent String, UTMTerm String, FromTag String, HasGCLID Int16, RefererHash Int64, URLHash Int64, CLID Int32',\n$$^\u0007\u0000\u0000\u0012WatchID\u0000c*5/ !p~\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u00007Q\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0011\u0000\u0000\u0000\u0010ClientIP\u0000z\u0010RegionID\u0000G\u0003\u0000\u0000\u0012UserID\u0000 :6\u0010CounterClass\u0000\u0000\u0000\u0000\u0000\u0010OS\u0000\u0000\u0000\u0000\u0000\u0010UserAgent\u0000\u0000\u0000\u0000\u0000\u0005URL\u0000\u0000\u0000\u0000\u0000\u0000\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCategoryID\u0000\u0000\u0000\u0000\u0000\u0010URLRegionID\u0000\u0000\u0000\u0000\u0000\u0010ResolutionWidth\u0000\u0000\u0000\u0000\u0000\u0010ResolutionHeight\u0000\u0000\u0000\u0000\u0000\u0010ResolutionDepth\u0000\u0000\u0000\u0000\u0000\u0010FlashMajor\u0000\u0000\u0000\u0000\u0000\u0010FlashMinor\u0000\u0000\u0000\u0000\u0000\u0005FlashMinor2\u0000\u0000\u0000\u0000\u0000\u0000\u0010NetMajor\u0000\u0000\u0000\u0000\u0000\u0010NetMinor\u0000\u0000\u0000\u0000\u0000\u0010UserAgentMajor\u0000\u0000\u0000\u0000\u0000\u0005UserAgentMinor\u0000\u0004\u0000\u0000\u0000\u0000\ufffdO\u0010CookieEnable\u0000\u0000\u0000\u0000\u0000\u0010JavascriptEnablsMobile\u0000\u0000\u0000\u0000\u0000\u0010MobilePhone\u0000\u0000\u0000\u0000\u0000\u0005MobilePhoneModel\u0000\u0000\u0000\u0000\u0000\u0000\u0005Params\u0000\u0000\u0000\u0000\u0000\u0000\u0010IPNetworkID\u00009\u0000\u0010TraficSourceID\u0000\u0004\u0000\u0000\u0000\u0010SearchEngineID\u0000\u0000\u0000\u0000\u0000\u0005SearchPhrase\u0000\u0000\u0000\u0000\u0000\u0000\u0010AdvEngineID\u0000\u0000\u0000\u0000\u0000\u0010IsArtifical\u0000\u0000\u0000\u0000\u0000\u0010WindowClientWidth\u0000\u0000\u0000\u0000\u0000\u0010WindowClientHeight\u0000\u0000\u0000\u0000\u0000\u0010ClientTimeZone\u0000\u0012ClientEventTime\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0010SilverlightVersion1\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion2\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion3\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion4\u0000\u0000\u0000\u0000\u0000\u0005PageCharset\u0000\u0000\u0000\u0000\u0000\u0000\u0010CodeVersion\u0000\u0000\u0000\u0000\u0000\u0010IsLink\u0000\u0000\u0000\u0000\u0000\u0010IsDownload\u0000\u0000\u0000\u0000\u0000\u0010IsNotBounce\u0000\u0000\u0000\u0000\u0000\u0012FUniqID\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005OriginalURL\u0000\u0000\u0000\u0000\u0000\u0000\u0010HID\u0000\u0000\u0000\u0000\u0000\u0010IsOldCounter\u0000\u0000\u0000\u0000\u0000\u0010IsEvent\u0000\u0000\u0000\u0000\u0000\u0010IsParameter\u0000\u0000\u0000\u0000\u0000\u0010DontCountHits\u0000\u0000\u0000\u0000\u0000\u0010WithHash\u0000\u0000\u0000\u0000\u0000\u0005HitColor\u0000\u0001\u0000\u0000\u0000\u00005\u0012LocalEventTime\u0000&Q\u0000\u0000\u0000\u0000\u0010Age\u0000\u0000\u0000\u0000\u0000\u0010Sex\u0000\u0000\u0000\u0000\u0000\u0010Income\u0000\u0000\u0000\u0000\u0000\u0010Interests\u0000\u0000\u0000\u0000\u0000\u0010Robotness\u0000\u0000\u0000\u0000\u0000\u0010RemoteIP\u0000^DI\u0010WindowName\u0000\u0010OpenerName\u0000\u0010HistoryLength\u0000\u0005BrowserLanguage\u0000\u0003\u0000\u0000\u0000\u0000\ufffd\u0005BrowserCountry\u0000\u0004\u0000\u0000\u0000\u0000\ufffd\f\u0005SocialNetwork\u0000\u0000\u0000\u0000\u0000\u0000\u0005SocialAction\u0000\u0000\u0000\u0000\u0000\u0000\u0010HTTPError\u0000\u0000\u0000\u0000\u0000\u0010SendTiming\u0000\u0000\u0000\u0000\u0000\u0010DNSTiming\u0000\u0000\u0000\u0000\u0000\u0010ConnectTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseStartTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseEndTiming\u0000\u0000\u0000\u0000\u0000\u0010FetchTiming\u0000\u0000\u0000\u0000\u0000\u0010SocialSourceNetworkID\u0000\u0000\u0000\u0000\u0000\u0005SocialSourcePage\u0000\u0000\u0000\u0000\u0000\u0000\u0012ParamPrice\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamOrderID\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamCurrency\u0000\u0003\u0000\u0000\u0000\u0000NH\u001c\u0010ParamCurrencyID\u0000\u0000\u0000\u0000\u0000\u0005OpenstatServiceName\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatCampaignID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatAdID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatSourceID\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMSource\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMMedium\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMCampaign\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMContent\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMTerm\u0000\u0000\u0000\u0000\u0000\u0000\u0005FromTag\u0000\u0000\u0000\u0000\u0000\u0000\u0010HasGCLID\u0000\u0000\u0000\u0000\u0000\u0012RefererHash\u0000X+'\u0012URLHash\u0000|3b.\u0010CLID\u0000\u0000\u0000\u0000\u0000\u0000^\u0007\u0000\u0000\u0012WatchID\u0000F\u04d32q\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u0000n$Q\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0011\u0000\u0000\u0000\u0010ClientIP\u0000z\u0010RegionID\u0000G\u0003\u0000\u0000\u0012UserID\u0000 :6\u0010CounterClass\u0000\u0000\u0000\u0000\u0000\u0010OS\u0000\u0000\u0000\u0000\u0000\u0010UserAgent\u0000\u0000\u0000\u0000\u0000\u0005URL\u0000\u0000\u0000\u0000\u0000\u0000\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCategoryID\u0000\u0000\u0000\u0000\u0000\u0010URLRegionID\u0000\u0000\u0000\u0000\u0000\u0010ResolutionWidth\u0000\u0000\u0000\u0000\u0000\u0010ResolutionHeight\u0000\u0000\u0000\u0000\u0000\u0010ResolutionDepth\u0000\u0000\u0000\u0000\u0000\u0010FlashMajor\u0000\u0000\u0000\u0000\u0000\u0010FlashMinor\u0000\u0000\u0000\u0000\u0000\u0005FlashMinor2\u0000\u0000\u0000\u0000\u0000\u0000\u0010NetMajor\u0000\u0000\u0000\u0000\u0000\u0010NetMinor\u0000\u0000\u0000\u0000\u0000\u0010UserAgentMajor\u0000\u0000\u0000\u0000\u0000\u0005UserAgentMinor\u0000\u0004\u0000\u0000\u0000\u0000\ufffdO\u0010CookieEnable\u0000\u0000\u0000\u0000\u0000\u0010JavascriptEnable\u0000\u0000\u0000\u0000\u0000\u0010IsMobile\u0000\u0000\u0000\u0000\u0000\u0010MobilePhone\u0000\u0000\u0000\u0000\u0000\u0005MobilePhoneModel\u0000\u0000\u0000\u0000\u0000\u0000\u0005Params\u0000\u0000\u0000\u0000\u0000\u0000\u0010IPNetworkID\u00009\u0000\u0010TraficSourceID\u0000\u0004\u0000\u0000\u0000\u0010SearchEngineID\u0000\u0000\u0000\u0000\u0000\u0005SearchPhrase\u0000\u0000\u0000\u0000\u0000\u0000\u0010AdvEngineID\u0000\u0000\u0000\u0000\u0000\u0010IsArtifical\u0000\u0000\u0000\u0000\u0000\u0010WindowClientWidth\u0000\u0000\u0000\u0000\u0000\u0010WindowClientHeight\u0000\u0000\u0000\u0000\u0000\u0010ClientTimeZone\u0000\u0012ClientEventTime\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0010SilverlightVersion1\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion2\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion3\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion4\u0000\u0000\u0000\u0000\u0000\u0005PageCharset\u0000\u0000\u0000\u0000\u0000\u0000\u0010CodeVersion\u0000\u0000\u0000\u0000\u0000\u0010IsLink\u0000\u0000\u0000\u0000\u0000\u0010IsDownload\u0000\u0000\u0000\u0000\u0000\u0010IsNotBounce\u0000\u0000\u0000\u0000\u0000\u0012FUniqID\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005OriginalURL\u0000\u0000\u0000\u0000\u0000\u0000\u0010HID\u0000\u0000\u0000\u0000\u0000\u0010IsOldCounter\u0000\u0000\u0000\u0000\u0000\u0010IsEvent\u0000\u0000\u0000\u0000\u0000\u0010IsParameter\u0000\u0000\u0000\u0000\u0000\u0010DontCountHits\u0000\u0000\u0000\u0000\u0000\u0010WithHash\u0000\u0000\u0000\u0000\u0000\u0005HitColor\u0000\u0001\u0000\u0000\u0000\u00005\u0012LocalEventTime\u0000\u01d8Q\u0000\u0000\u0000\u0000\u0010Age\u0000\u0000\u0000\u0000\u0000\u0010Sex\u0000\u0000\u0000\u0000\u0000\u0010Income\u0000\u0000\u0000\u0000\u0000\u0010Interests\u0000\u0000\u0000\u0000\u0000\u0010Robotness\u0000\u0000\u0000\u0000\u0000\u0010RemoteIP\u0000^DI\u0010WindowName\u0000\u0010OpenerName\u0000\u0010HistoryLength\u0000\u0005BrowserLanguage\u0000\u0003\u0000\u0000\u0000\u0000\ufffd\u0005BrowserCountry\u0000\u0004\u0000\u0000\u0000\u0000\ufffd\f\u0005SocialNetwork\u0000\u0000\u0000\u0000\u0000\u0000\u0005SocialAction\u0000\u0000\u0000\u0000\u0000\u0000\u0010HTTPError\u0000\u0000\u0000\u0000\u0000\u0010SendTiming\u0000\u0000\u0000\u0000\u0000\u0010DNSTiming\u0000\u0000\u0000\u0000\u0000\u0010ConnectTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseStartTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseEndTiming\u0000\u0000\u0000\u0000\u0000\u0010FetchTiming\u0000\u0000\u0000\u0000\u0000\u0010SocialSourceNetworkID\u0000\u0000\u0000\u0000\u0000\u0005SocialSourcePage\u0000\u0000\u0000\u0000\u0000\u0000\u0012PamPrice\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamOrderID\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamCurrency\u0000\u0003\u0000\u0000\u0000\u0000NH\u001c\u0010ParamCurrencyID\u0000\u0000\u0000\u0000\u0000\u0005OpenstatServiceName\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatCampaignID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatAdID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatSourceID\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMSource\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMMedium\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMCampaign\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMContent\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMTerm\u0000\u0000\u0000\u0000\u0000\u0000\u0005FromTag\u0000\u0000\u0000\u0000\u0000\u0000\u0010HasGCLID\u0000\u0000\u0000\u0000\u0000\u0012RefererHash\u0000X+'\u0012URLHash\u0000|3b.\u0010CLID\u0000\u0000\u0000\u0000\u0000\u0000^\u0007\u0000\u0000\u0012WatchID\u0000l!|@H\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u0000)Q\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0011\u0000\u0000\u0000\u0010ClientIP\u0000z\u0010RegionID\u0000G\u0003\u0000\u0000\u0012UserID\u0000 :6\u0010CounterClass\u0000\u0000\u0000\u0000\u0000\u0010OS\u0000\u0000\u0000\u0000\u0000\u0010UserAgent\u0000\u0000\u0000\u0000\u0000\u0005URL\u0000\u0000\u0000\u0000\u0000\u0000\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCategoryID\u0000\u0000\u0000\u0000\u0000\u0010URLRegionID\u0000\u0000\u0000\u0000\u0000\u0010ResolutionWidth\u0000\u0000\u0000\u0000\u0000\u0010ResolutionHeight\u0000\u0000\u0000\u0000\u0000\u0010ResolutionDepth\u0000\u0000\u0000\u0000\u0000\u0010FlashMajor\u0000\u0000\u0000\u0000\u0000\u0010FlashMinor\u0000\u0000\u0000\u0000\u0000\u0005FlashMinor2\u0000\u0000\u0000\u0000\u0000\u0000\u0010NetMajor\u0000\u0000\u0000\u0000\u0000\u0010NetMinor\u0000\u0000\u0000\u0000\u0000\u0010UserAgentMajor\u0000\u0000\u0000\u0000\u0000\u0005UserAgentMinor\u0000\u0004\u0000\u0000\u0000\u0000\ufffdO\u0010CookieEnable\u0000\u0000\u0000\u0000\u0000\u0010JavascriptEnable\u0000\u0000\u0000\u0000\u0000\u0010IsMobile\u0000\u0000\u0000\u0000\u0000\u0010MobilePhone\u0000\u0000\u0000\u0000\u0000\u0005MobilePhoneModel\u0000\u0000\u0000\u0000\u0000\u0000\u0005Params\u0000\u0000\u0000\u0000\u0000\u0000\u0010IPNetworkID\u00009\u0000\u0010TraficSourceID\u0000\u0004\u0000\u0000\u0000\u0010SearchEngineID\u0000\u0000\u0000\u0000\u0000\u0005SearchPhrase\u0000\u0000\u0000\u0000\u0000\u0000\u0010AdvEngineID\u0000\u0000\u0000\u0000\u0000\u0010IsArtifical\u0000\u0000\u0000\u0000\u0000\u0010WindowClientWidth\u0000\u0000\u0000\u0000\u0000\u0010WindowClientHeight\u0000\u0000\u0000\u0000\u0000\u0010ClientTimeZone\u0000\u0012ClientEventTime\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0010SilverlightVersion1\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion2\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion3\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion4\u0000\u0000\u0000\u0000\u0000\u0005PageCharset\u0000\u0000\u0000\u0000\u0000\u0000\u0010CodeVersion\u0000\u0000\u0000\u0000\u0000\u0010IsLink\u0000\u0000\u0000\u0000\u0000\u0010IsDownload\u0000\u0000\u0000\u0000\u0000\u0010IsNotBounce\u0000\u0000\u0000\u0000\u0000\u0012FUniqID\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005OriginalURL\u0000\u0000\u0000\u0000\u0000\u0000\u0010HID\u0000\u0000\u0000\u0000\u0000\u0010IsOldCounter\u0000\u0000\u0000\u0000\u0000\u0010IsEvent\u0000\u0000\u0000\u0000\u0000\u0010IsParameter\u0000\u0000\u0000\u0000\u0000\u0010DontCountHits\u0000\u0000\u0000\u0000\u0000\u0010WithHash\u0000\u0000\u0000\u0000\u0000\u0005HitColor\u0000\u0001\u0000\u0000\u0000\u00005\u0012LocalEventTime\u0000}Q\u0000\u0000\u0000\u0000\u0010Age\u0000\u0000\u0000\u0000\u0000\u0010Sex\u0000\u0000\u0000\u0000\u0000\u0010Income\u0000\u0000\u0000\u0000\u0000\u0010Interests\u0000\u0000\u0000\u0000\u0000\u0010Robotness\u0000\u0000\u0000\u0000\u0000\u0010RemoteIP\u0000^DI\u0010WindowName\u0000\u0010OpenerName\u0000\u0010HistoryLength\u0000\u0005BrowserLanguage\u0000\u0003\u0000\u0000\u0000\u0000\ufffd\u0005BrowserCountry\u0000\u0004\u0000\u0000\u0000\u0000\ufffd\f\u0005SocialNetwork\u0000\u0000\u0000\u0000\u0000\u0000\u0005SocialAction\u0000\u0000\u0000\u0000\u0000\u0000\u0010HTTPError\u0000\u0000\u0000\u0000\u0000\u0010SendTiming\u0000\u0000\u0000\u0000\u0000\u0010DNSTiming\u0000\u0000\u0000\u0000\u0000\u0010ConnectTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseStartTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseEndTiming\u0000\u0000\u0000\u0000\u0000\u0010FetchTiming\u0000\u0000\u0000\u0000\u0000\u0010SocialSourceNetworkID\u0000\u0000\u0000\u0000\u0000\u0005SocialSourcePage\u0000\u0000\u0000\u0000\u0000\u0000\u0012ParamPrice\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamOrderID\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamCurrency\u0000\u0003\u0000\u0000\u0000\u0000NH\u001c\u0010ParamCurrencyID\u0000\u0000\u0000\u0000\u0000\u0005OpenstatServiceName\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatCampaignID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatAdID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatSourceID\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMSource\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMMedium\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMCampaign\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMContent\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMTerm\u0000\u0000\u0000\u0000\u0000\u0000\u0005FromTag\u0000\u0000\u0000\u0000\u0000\u0000\u0010HasGCLID\u0000\u0000\u0000\u0000\u0000\u0012RefererHash\u0000X+'\u0012URLHash\u0000|3b.\u0010CLID\u0000\u0000\u0000\u0000\u0000\u0000^\u0007\u0000\u0000\u0012WatchID\u0000\u0005\u01d0=\u040cW\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u00008*Q\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0011\u0000\u0000\u0000\u0010ClientIP\u0000z\u0010RegionID\u0000G\u0003\u0000\u0000\u0012UserID\u0000 :6\u0010CounterClass\u0000\u0000\u0000\u0000\u0000\u0010OS\u0000\u0000\u0000\u0000\u0000\u0010UserAgent\u0000\u0000\u0000\u0000\u0000\u0005URL\u0000\u0000\u0000\u0000\u0000\u0000\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCategoryID\u0000\u0000\u0000\u0000\u0000\u0010URLRegionID\u0000\u0000\u0000\u0000\u0000\u0010ResolutionWidth\u0000\u0000\u0000\u0000\u0000\u0010ResolutionHeight\u0000\u0000\u0000\u0000\u0000\u0010ResolutionDepth\u0000\u0000\u0000\u0000\u0000\u0010FlashMajor\u0000\u0000\u0000\u0000\u0000\u0010FlashMinor\u0000\u0000\u0000\u0000\u0000\u0005FlashMinor2\u0000\u0000\u0000\u0000\u0000\u0000\u0010NetMajor\u0000\u0000\u0000\u0000\u0000\u0010NetMinor\u0000\u0000\u0000\u0000\u0000\u0010UserAgentMajor\u0000\u0000\u0000\u0000\u0000\u0005UserAgentMinor\u0000\u0004\u0000\u0000\u0000\u0000\ufffdO\u0010CookieEnable\u0000\u0000\u0000\u0000\u0000\u0010JavascriptEnable\u0000\u0000\u0000\u0000\u0000\u0010IsMobile\u0000\u0000\u0000\u0000\u0000\u0010MobilePhone\u0000\u0000\u0000\u0000\u0000\u0005MobilePhoneModel\u0000\u0000\u0000\u0000\u0000\u0000\u0005Params\u0000\u0000\u0000\u0000\u0000\u0000\u0010IPNetworkID\u00009\u0000\u0010TraficSourceID\u0000\u0004\u0000\u0000\u0000\u0010SearchEngineID\u0000\u0000\u0000\u0000\u0000\u0005SearchPhrase\u0000\u0000\u0000\u0000\u0000\u0000\u0010AdvEngineID\u0000\u0000\u0000\u0000\u0000\u0010IsArtifical\u0000\u0000\u0000\u0000\u0000\u0010WindowClientWidth\u0000\u0000\u0000\u0000\u0000\u0010WindowClientHeight\u0000\u0000\u0000\u0000\u0000\u0010ClientTimeZone\u0000\u0012ClientEventTime\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0010SilverlightVersion1\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion2\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion3\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion4\u0000\u0000\u0000\u0000\u0000\u0005PageCharset\u0000\u0000\u0000\u0000\u0000\u0000\u0010CodeVersion\u0000\u0000\u0000\u0000\u0000\u0010IsLink\u0000\u0000\u0000\u0000\u0000\u0010IsDownload\u0000\u0000\u0000\u0000\u0000\u0010IsNotBounce\u0000\u0000\u0000\u0000\u0000\u0012FUniqID\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005OriginalURL\u0000\u0000\u0000\u0000\u0000\u0000\u0010HID\u0000\u0000\u0000\u0000\u0000\u0010IsOldCounter\u0000\u0000\u0000\u0000\u0000\u0010IsEvent\u0000\u0000\u0000\u0000\u0000\u0010IsParameter\u0000\u0000\u0000\u0000\u0000\u0010DontCountHits\u0000\u0000\u0000\u0000\u0000\u0010WithHash\u0000\u0000\u0000\u0000\u0000\u0005HitColor\u0000\u0001\u0000\u0000\u0000\u00005\u0012LocalEventTime\u0000\u075eQ\u0000\u0000\u0000\u0000\u0010Age\u0000\u0000\u0000\u0000\u0000\u0010Sex\u0000\u0000\u0000\u0000\u0000\u0010Income\u0000\u0000\u0000\u0000\u0000\u0010Interests\u0000\u0000\u0000\u0000\u0000\u0010Robotness\u0000\u0000\u0000\u0000\u0000\u0010RemoteIP\u0000^DI\u0010WindowName\u0000\u0010OpenerName\u0000\u0010HistoryLength\u0000\u0005BrowserLanguage\u0000\u0003\u0000\u0000\u0000\u0000\ufffd\u0005BrowserCountry\u0000\u0004\u0000\u0000\u0000\u0000\ufffd\f\u0005SocialNetwork\u0000\u0000\u0000\u0000\u0000\u0000\u0005SocialAction\u0000\u0000\u0000\u0000\u0000\u0000\u0010HTTPError\u0000\u0000\u0000\u0000\u0000\u0010SendTiming\u0000\u0000\u0000\u0000\u0000\u0010DNSTiming\u0000\u0000\u0000\u0000\u0000\u0010ConnectTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseStartTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseEndTiming\u0000\u0000\u0000\u0000\u0000\u0010FetchTiming\u0000\u0000\u0000\u0000\u0000\u0010SocialSourceNetworkID\u0000\u0000\u0000\u0000\u0000\u0005SocialSourcePage\u0000\u0000\u0000\u0000\u0000\u0000\u0012ParamPrice\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamOrderID\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamCurrency\u0000\u0003\u0000\u0000\u0000\u0000NH\u001c\u0010ParamCurrencyID\u0000\u0000\u0000\u0000\u0000\u0005OpenstatServiceName\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatCampaignID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatAdID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatSourceID\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMSource\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMMedium\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMCampaign\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMContent\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMTerm\u0000\u0000\u0000\u0000\u0000\u0000\u0005FromTag\u0000\u0000\u0000\u0000\u0000\u0000\u0010HasGCLID\u0000\u0000\u0000\u0000\u0000\u0012RefererHash\u0000X+'\u0012URLHash\u0000|3b.\u0010CLID\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0012WatchID\u0000\u0011E&Ly\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u0000JQ\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0011\u0000\u0000\u0000\u0010ClientIP\u0000I`\u0010RegionID\u0000'\u0000\u0000\u0000\u0012UserID\u0000qJ\u0017d8\u0005\u0010CounterClass\u0000\u0000\u0000\u0000\u0000\u0010OS\u0000\u0002\u0000\u0000\u0000\u0010UserAgent\u0000\u0007\u0000\u0000\u0000\u0005URL\u0000-\u0000\u0000\u0000\u0000http://holodilnik.ru/russia/05jul2013&model=0\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCateParams String, IPNetworkID Int32, TraficSourceID Int16, SearchEngineID Int16, SearchPhrase String, AdvEngineID Int16, IsArtifical Int16, WindowClientWidth Int16, WindowClientHeight Int16, ClientTimeZone Int16, ClientEventTime DateTime, SilverlightVersion1 Int16, SilverlightVersion2 Int16, SilverlightVersion3 Int32, SilverlightVersion4 Int16, PageCharset String, CodeVersion Int32, IsLink Int16, IsDownload Int16, IsNotBounce Int16, FUniqID Int64, OriginalURL String, HID Int32, IsOldCounter Int16, IsEvent Int16, IsParameter Int16, DontCountHits Int16, WithHash Int16, HitColor String, LocalEventTime DateTime, Age Int16, Sex Int16, Income Int16, Interests Int16, Robotness Int16, RemoteIP Int32, WindowName Int32, OpenerName Int32, HistoryLength Int16, BrowserLanguage String, BrowserCountry String, SocialNetwork String, SocialAction String, HTTPError Int16, SendTiming Int32, DNSTiming Int32, ConnectTiming Int32, ResponseStartTiming Int32, ResponseEndTiming Int32,\u0000\u0010HistoryLength\u0000\u0005BrowserLanguage\u0000\u0003\u0000\u0000\u0000\u0000\ufffd\u0005BrowserCountry\u0000\u0004\u0000\u0000\u0000\u0000\ufffd\f\u0005SocialNetwork\u0000\u0000\u0000\u0000\u0000\u0000\u0005SocialAction\u0000\u0000\u0000\u0000\u0000\u0000\u0010HTTPError\u0000\u0000\u0000\u0000\u0000\u0010SendTiming\u0000\u0000\u0000\u0000\u0000\u0010DNSTiming\u0000\u0000\u0000\u0000\u0000\u0010ConnectTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseStartTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseEndTiming\u0000\u0000\u0000\u0000\u0000\u0010FetchTiming\u0000\u0000\u0000\u0000\u0000\u0010SocialSourceNetworkID\u0000\u0000\u0000\u0000\u0000\u0005SocialSourcePage\u0000\u0000\u0000\u0000\u0000\u0000\u0012ParamPrice\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamOrderID\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamCurrency\u0000\u0003\u0000\u0000\u0000\u0000NH\u001c\u0010ParamCurrencyID\u0000\u0000\u0000\u0000\u0000\u0005OpenstatServiceName\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatCampaignID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatAdID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatSourceID\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMSource\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMMedium\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMCampaign\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMContent\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMTerm\u0000\u0000\u0000\u0000\u0000\u0000\u0005FromTag\u0000\u0000\u0000\u0000\u0000\u0000\u0010HasGCLID\u0000\u0000\u0000\u0000\u0000\u0012RefererHash\u0000X+'\u0012URLHash\u0000\u0012\noe\u0010CLID\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0012WatchID\u0000\u0016k=p\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u0000\fQ\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0011\u0000\u0000\u0000\u0010ClienQ9H\u0010RegionID\u0000G\u0003\u0000\u0000\u0012UserID\u0000\nKs}\u0005\u0010CounterClass\u0000\u0000\u0000\u0000\u0000\u0010OS\u0000\u0002\u0000\u0000\u0000\u0010UserAgent\u0000\u0003\u0000\u0000\u0000\u0005URL\u0000H\u0000\u0000\u0000\u0000http://afisha.mail.ru/catalog/314/women.ru/ency=1&page3/?errovat-pinniki\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCategoryID\u00000=\u0000\u0000\u0010URLRegionID\u0000\u0000\u0000\u0000\u0010ResolutionWidth\u0000\u0000\u0000\u0000\u0000\u0010ResolutionHeight\u0000\u0000\u0000\u0000\u0000\u0010ResolutionDepth\u0000\u0000\u0000\u0000\u0000\u0010FlashMajor\u0000\u0000\u0000\u0000\u0000\u0010FlashMinor\u0000\u0000\u0000\u0000\u0000\u0005FlashMinor2\u0000\u0000\u0000\u0000\u0000\u0000\u0010NetMajor\u0000\u0000\u0000\u0000\u0000\u0010NetMinor\u0000\u0000\u0000\u0000\u0000\u0010UserAgentMajor\u0000\u0012\u0000\u0000\u0000\u0005UserAgentMinor\u0000\u0004\u0000\u0000\u0000\u0000D\ufffd\u0010CookieEnable\u0000\u0001\u0000\u0000\u0000\u0010JavascriptEnable\u0000\u0000\u0000\u0000\u0000\u0010IsMobile\u0000\u0000\u0000\u0000\u0000\u0010MobilePhone\u0000\u0000\u0000\u0000\u0000\u0005MobilePhoneModel\u0000\u0000\u0000\u0000\u0000\u0000\u0005Params\u0000\u0000\u0000\u0000\u0000\u0000\u0010IPNetworkID\u00009\u0000\u0010TraficSourceID\u0000\u0004\u0000\u0000\u0000\u0010SearchEngineID\u0000\u0000\u0000\u0000\u0000\u0005SearchPhrase\u0000\u0000\u0000\u0000\u0000\u0000\u0010AdvEngineID\u0000\u0000\u0000\u0000\u0000\u0010IsArtifical\u0000\u0000\u0000\u0000\u0000\u0010WindowClientWidth\u0000\u0000\u0000\u0000\u0000\u0010WindowClientHeight\u0000\u0000\u0000\u0000\u0000\u0010ClientTimeZone\u0000\u0012ClientEventTime\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0010SilverlightVersion1\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion2\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion3\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion4\u0000\u0000\u0000\u0000\u0000\nPageCharset\u0000\u0000\u0000\u0000\u0000\u0000\u0010CodeVersion\u0000\u0000\u0000\u0000\u0000\u0010IsLink\u0000\u0000\u0000\u0000\u0000\u0010IsDownload\u0000\u0000\u0000\u0000\u0000\u0010IsNotBounce\u0000\u0000\u0000\u0000\u0000\u0012FUniqID\u0000:W\u0011m\u0005OriginalURL\u0000\u0000\u0000\u0000\u0000\u0000\u0010HID\u0000\u0000\u0000\u0000\u0000\u0010IsOldCounter\u0000\u0000\u0000\u0000\u0000\u0010IsEvent\u0000\u0000\u0000\u0000\u0000\u0010IsParameter\u0000\u0000\u0000\u0000\u0000\u0010DontCountHits\u0000\u0000\u0000\u0000\u0000\u0010WithHash\u0000\u0000\u0000\u0000\u0000\u0005HitColor\u0000\u0001\u0000\u0000\u0000\u00005\u0012LocalEventTime\u0000AQ\u0000\u0000\u0000\u0000\u0010Age\u0000\u0000\u0000\u0000\u0000\u0010Sex\u0000\u0000\u0000\u0000\u0000\u0010Income\u0000\u0000\u0000\u0000\u0000\u0010Interests\u0000\u0000\u0000\u0000\u0000\u0010Robotness\u0000\u0000\u0000\u0000\u0000\u0010RemoteIP\u0000^DI\u0010WindowName\u0000\u0010OpenerName\u0000\u0010HistoryLength\u0000\u0005BrowserLanguage\u0000\u0003\u0000\u0000\u0000\u0000\ufffd\u0005BrowserCountry\u0000\u0004\u0000\u0000\u0000\u0000\ufffd\f\u0005SocialNetwork\u0000\u0000\u0000\u0000\u0000\u0000\u0005SocialAction\u0000\u0000\u0000\u0000\u0000\u0000\u0010HTTPError\u0000\u0000\u0000\u0000\u0000\u0010SendTiming\u0000\u0000\u0000\u0000\u0000\u0010DNSTiming\u0000\u0000\u0000\u0000\u0000\u0010ConnectTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseStartTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseEndTiming\u0000\u0000\u0000\u0000\u0000\u0010FetchTiming\u0000\u0000\u0000\u0000\u0000\u0010SocialSourceNetworkID\u0000\u0000\u0000\u0000\u0000\u0005SocialSourcePage\u0000\u0000\u0000\u0000\u0000\u0000\u0012ParamPrice\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamOrderID\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamCurrency\u0000\u0003\u0000\u0000\u0000\u0000NH\u001c\u0010ParamCurrencyID\u0000\u0000\u0000\u0000\u0000\u0005OpenstatServiceName\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatCampaignID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatAdID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatSourceID\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMSource\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMMedium\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMCampaign\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMContent\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMTerm\u0000\u0000\u0000\u0000\u0000\u0000\u0005FromTag\u0000\u0000\u0000\u0000\u0000\u0000\u0010HasGCLID\u0000\u0000\u0000\u0000\u0000\u0012RefererHash\u0000X+'\u0012URLHash\u0000\n#\\\u0018\u0010CLID\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0012WatchID\u00001\u000boC\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u00000Q\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0011\u0000\u0000\u0000\u0010ClientIP\u0000^{]\u0010RegionID\u0000\u0000\u0000\u0000\u0012UserID\u0000&n%t\"6\u0007\u0010CounterClass\u0000\u0000\u0000\u0000\u0000\u0010OS\u0000'\u0000\u0000\u0000\u0010UserAgent\u0000\u0007\u0000\u0000\u0000\u0005URL\u0000>\u0000\u0000\u0000\u0000http://bonprix.ru/index.ru/cinema/art/0 986 424 233 \u0441\u0435\u0437\u043e\u043d\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCategoryID\u0000\u0003\u0000\u0000\u0000\u0010URLRegionID\u0000\u0000\u0000\u0000\u0010ResolutionWidth\u0000\u0000\u0000\u0000\u0000\u0010ResolutionHeight\u0000\u0000\u0000\u0000\u0000\u0010ResolutionDepth\u0000\u0000\u0000\u0000\u0000\u0010FlashMajor\u0000\u0000\u0000\u0000\u0000\u0010FlashMinor\u0000\u0000\u0000\u0000\u0000\u0005FlashMinor2\u0000\u0000\u0000\u0000\u0000\u0000\u0010NetMajor\u0000\u0000\u0000\u0000\u0000\u0010NetMinor\u0000\u0000\u0000\u0000\u0000\u0010UserAgentMajor\u0000\u000f\u0000\u0000\u0000\u0005UserAgentMinor\u0000\u0004\u0000\u0000\u0000\u0000D\ufffd\u0010CookieEnable\u0000\u0001\u0000\u0000\u0000\u0010JavascriptEnable\u0000\u0000\u0000\u0000\u0000\u0010IsMobile\u0000\u0000\u0000\u0000\u0000\u0010MobilePhone\u0000\u0000\u0000\u0000\u0000\u0005MobilePhoneModel\u0000\u0000\u0000\u0000\u0000\u0000\u0005Params\u0000\u0000\u0000\u0000\u0000\u0000\u0010IPNetworkID\u0000#(\u0000\u0010TraficSourceID\u0000\u0004\u0000\u0000\u0000\u0010SearchEngineID\u0000\u0000\u0000\u0000\u0000\u0005SearchPhrase\u0000\u0000\u0000\u0000\u0000\u0000\u0010AdvEngineID\u0000\u0000\u0000\u0000\u0000\u0010IsArtifical\u0000\u0000\u0000\u0000\u0000\u0010WindowClientWidth\u0000\u0000\u0000\u0000\u0000\u0010WindowClientHeight\u0000\u0000\u0000\u0000\u0000\u0010ClientTimeZone\u0000\u0012ClientEventTime\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0010SilverlightVersion1\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion2\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion3\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion4\u0000\u0000\u0000\u0000\u0000\u0005PageCharset\u0000\u0000\u0000\u0000\u0000\u0000\u0010CodeVersion\u0000\u0000\u0000\u0000\u0000\u0010IsLink\u0000\u0000\u0000\u0000\u0000\u0010IsDownload\u0000\u0000\u0000\u0000\u0000\u0010IsNotBounce\u0000\u0000\u0000\u0000\u0000\u0012FUniqID\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005OriginalURL\u0000\u0000\u0000\u0000\u0000\u0000\u0010HID\u0000\u0000\u0000\u0000\u0000\u0010IsOldCounter\u0000\u0000\u0000\u0000\u0000\u0010IsEvent\u0000\u0000\u0000\u0000\u0000\u0010IsParameter\u0000\u0000\u0000\u0000\u0000\u0010DontCountHits\u0000\u0000\u0000\u0000\u0000\u0010WithHash\u0000\u0000\u0000\u0000\u0000\u0005HitColor\u0000\u0001\u0000\u0000\u0000\u00005\u0012LocalEventTime\u0000Q\u0000\u0000\u0000\u0000\u0010Age\u0000\u0000\u0000\u0000\u0000\u0010Sex\u0000\u0000\u0000\u0000\u0000\u0010Income\u0000\u0000\u0000\u0000\u0000\u0010Interests\u0000\u0000\u0000\u0000\u0000\u0010Robotness\u0000\u0000\u0000\u0000\u0000\u0010RemoteIP\u0000\u0017\u0007U\u0010WindowName\u0000\u0010OpenerName\u0000\u0010HistoryLength\u0000\u0005BrowserLanguage\u0000\u0003\u0000\u0000\u0000\u0000\ufffd\u0005BrowserCountry\u0000\u0004\u0000\u0000\u0000\u0000\ufffd\f\u0005SocialNetwork\u0000\u0000\u0000\u0000\u0000\u0000\u0005SocialAction\u0000\u0000\u0000\u0000\u0000\u0000\u0010HTTPError\u0000\u0000\u0000\u0000\u0000\u0010SendTiming\u0000\u0000\u0000\u0000\u0000\u0010DNSTiming\u0000\u0000\u0000\u0000\u0000\u0010ConnectTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseStartTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseEndTiming\u0000\u0000\u0000\u0000\u0000\u0010FetchTiming\u0000\u0000\u0000\u0000\u0000\u0010SocialSourceNetworkID\u0000\u0000\u0000\u0000\u0000\u0005SocialSourcePage\u0000\u0000\u0000\u0000\u0000\u0000\u0012ParamPrice\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamOrderID\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamCurrency\u0000\u0003\u0000\u0000\u0000\u0000NH\u001c\u0010ParamCurrencyID\u0000\u0000\u0000\u0000\u0000\u0005OpenstatServiceName\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatCampaignID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatAdID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatSourceID\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMSource\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMMedium\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMCampaign\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMContent\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMTerm\u0000\u0000\u0000\u0000\u0000\u0000\u0005FromTag\u0000\u0000\u0000\u0000\u0000\u0000\u0010HasGCLID\u0000\u0000\u0000\u0000\u0000\u0012RefererHash\u0000X+'\u0012URLHash\u0000X-h\u0006X \u0010CLID\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0012WatchID\u0000\u00bb-\u0010\u0015C_\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u000083Q\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0011\u0000\u0000\u0000\u0010ClientIP\u0000^{]\u0010RegionID\u0000\u0000\u0000\u0000\u0012UserID\u0000&n%t\"6\u0007\u0010CounterClass\u0000\u0000\u0000\u0000\u0000\u0010OS\u0000'\u0000\u0000\u0000\u0010UserAgent\u0000\u0007\u0000\u0000\u0000\u0005URL\u0000:\u0000\u0000\u0000\u0000http://bonprix.ru/index.ru/cinema/art/A00387,3797);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 2141 (line 4, col 1): $$^\u0007\u0000\u0000\u0012WatchID\u0000c*5/ !p~\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u00007Q\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0011\u0000\u0000\u0000\u0010ClientIP\u0000z\u0010RegionID\u0000G\u0003\u0000\u0000\u0012UserID\u0000 :6\u0010CounterCla. Unrecognized token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "the query contains a null character",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " ru)&bL\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCategoryID\u0000\u0003\u0000\u0000\u0000\u0010URLRegionID\u0000\u0000\u0000\u0000\u0010ResolutionWidth\u0000\u0000\u0000\u0000\u0000\u0010ResolutionHeight\u0000\u0000\u0000\u0000\u0000\u0010ResolutionDepth\u0000\u0000\u0000\u0000\u0000\u0010FlashMajor\u0000\u0000\u0000\u0000\u0000\u0010FlashMinor\u0000\u0000\u0000\u0000\u0000\u0005FlashMinor2\u0000\u0000\u0000\u0000\u0000\u0000\u0010NetMajor\u0000\u0000\u0000\u0000\u0000\u0010NetMinor\u0000\u0000\u0000\u0000\u0000\u0010UserAgentMajor\u0000\u000f\u0000\u0000\u0000\u0005UserAgentMinor\u0000\u0004\u0000\u0000\u0000\u0000D\ufffd\u0010CookieEnable\u0000\u0001\u0000\u0000\u0000\u0010JavascriptEnable\u0000\u0000\u0000\u0000\u0000\u0010IsMobile\u0000\u0000\u0000\u0000\u0000\u0010MobilePhone\u0000\u0000\u0000\u0000\u0000\u0005MobilePhoneModel\u0000\u0000\u0000\u0000\u0000\u0000\u0005Params\u0000\u0000\u0000\u0000\u0000\u0000\u0010IPNetworkID\u0000#(\u0000\u0010TraficSourceID\u0000\u0004\u0000\u0000\u0000\u0010SearchEngineID\u0000\u0000\u0000\u0000\u0000\u0005SearchPhrase\u0000\u0000\u0000\u0000\u0000\u0000\u0010AdvEngineID\u0000\u0000\u0000\u0000\u0000\u0010IsArtifical\u0000\u0000\u0000\u0000\u0000\u0010WindowClientWidth\u0000\u0000\u0000\u0000\u0000\u0010WindowClientHeight\u0000\u0000\u0000\u0000\u0000\u0010ClientTimeZone\u0000\u0012ClientEventTime\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0010SilverlightVersion1\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion2\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion3\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion4\u0000\u0000\u0000\u0000\u0000\u0005PageCharset\u0000\u0000\u0000\u0000\u0000\u0000\u0010CodeVersion\u0000\u0000\u0000\u0000\u0000\u0010IsLink\u0000\u0000\u0000\u0000\u0000\u0010IsDownload\u0000\u0000\u0000\u0000\u0000\u0010IsNotBounce\u0000\u0000\u0000\u0000\u0000\u0012FUniqID\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005OriginalURL\u0000\u0000\u0000\u0000\u0000\u0000\u0010HID\u0000\u0000\u0000\u0000\u0000\u0010IsOldCounter\u0000\u0000\u0000\u0000\u0000\u0010IsEvent\u0000\u0000\u0000\u0000\u0000\u0010IsParameter\u0000\u0000\u0000\u0000\u0000\u0010DontCountHits\u0000\u0000\u0000\u0000\u0000\u0010WithHash\u0000\u0000\u0000\u0000\u0000\u0005HitColor\u0000\u0001\u0000\u0000\u0000\u00005\u0012LocalEventTime\u0000\nQ\u0000\u0000\u0000\u0000\u0010Age\u0000\u0000\u0000\u0000\u0000\u0010Sex\u0000\u0000\u0000\u0000\u0000\u0010Income\u0000\u0000\u0000\u0000\u0000\u0010Interests\u0000\u0000\u0000\u0000\u0000\u0010Robotness\u0000\u0000\u0000\u0000\u0000\u0010RemoteIP\u0000\u0017\u0007U\u0010WindowName\u0000\u0010OpenerName\u0000\u0010HistoryLength\u0000\u0005BrowserLanguage\u0000\u0003\u0000\u0000\u0000\u0000\ufffd\u0005BrowserCountry\u0000\u0004\u0000\u0000\u0000\u0000\ufffd\f\u0005SocialNetwork\u0000\u0000\u0000\u0000\u0000\u0000\u0005SocialAction\u0000\u0000\u0000\u0000\u0000\u0000\u0010HTTPError\u0000\u0000\u0000\u0000\u0000\u0010SendTiming\u0000\u0000\u0000\u0000\u0000\u0010DNSTiming\u0000\u0000\u0000\u0000\u0000\u0010ConnectTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseStartTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseEndTiming\u0000\u0000\u0000\u0000\u0000\u0010FetchTiming\u0000\u0000\u0000\u0000\u0000\u0010SocialSourceNetworkID\u0000\u0000\u0000\u0000\u0000\u0005SocialSourcePage\u0000\u0000\u0000\u0000\u0000\u0000\u0012ParamPrice\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamOrderID\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamCurrency\u0000\u0003\u0000\u0000\u0000\u0000NH\u001c\u0010ParamCurrencyID\u0000\u0000\u0000\u0000\u0000\u0005OpenstatServiceName\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatCampaignID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatAdID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatSourceID\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMSource\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMMedium\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMCampaign\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMContent\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMTerm\u0000\u0000\u0000\u0000\u0000\u0000\u0005FromTag\u0000\u0000\u0000\u0000\u0000\u0000\u0010HasGCLID\u0000\u0000\u0000\u0000\u0000\u0012RefererHash\u0000X+'\u0012URLHash\u0000vv\u0001\u0010CLID\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0012WatchID\u0000\u007f\u000e\u0010\u0017\\\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u0000 Q\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0011\u0000\u0000\u0000\u0010ClientIP\u0000g\u0016U\u0010RegionID\u0000\u0000\u0000\u0000\u0012UserID\u0000syyf\u0010CounterClass\u0000\u0000\u0000\u0000\u0000\u0010OS\u0000,\u0000\u0000\u0000\u0010UserAgent\u0000\u0003\u0000\u0000\u0000\u0005URL\u00001\u0000\u0000\u0000\u0000http://tours/Ekategoriya%2F&sr=http://slovareniye\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCategoryID\u0000\u0000\u0000\u0000\u0000\u0010URLRegionID\u0000\u0000\u0000\u0000\u0010esRolutionWidth\u0000\u0000\u0000\u0000\u0000\u0010ResolutionHeight\u0000\u0000\u0000\u0000\u0000\u0010ResolutionDepth\u0000\u0000\u0000\u0000\u0000\u0010FlashMajor\u0000\u0000\u0000\u0000\u0000\u0010FlashMinor\u0000\u0000\u0000\u0000\u0000\u0005FlashMinor2\u0000\u0000\u0000\u0000\u0000\u0000\u0010NetMajor\u0000\u0000\u0000\u0000\u0000\u0010NetMinor\u0000\u0000\u0000\u0000\u0000\u0010UserAgentMajor\u0000\t\u0000\u0000\u0000\u0005UserAgentMinor\u0000\u0004\u0000\u0000\u0000\u0000D\ufffd\u0010CookieEnable\u0000\u0000\u0000\u0000\u0000\u0010JavascriptEnable\u0000\u0000\u0000\u0000\u0000\u0010IsMobile\u0000\u0000\u0000\u0000\u0000\u0010MobilePhone\u0000\u0000\u0000\u0000\u0000\u0005MobilePhoneModel\u0000\u0000\u0000\u0000\u0000\u0000\u0005Params\u0000\u0000\u0000\u0000\u0000\u0000\u0010IPNetworkID\u0000\u001d\u0000\u0010TraficSourceID\u0000\u0004\u0000\u0000\u0000\u0010SearchEngineID\u0000\u0000\u0000\u0000\u0000\u0005SearchPhrase\u0000\u0000\u0000\u0000\u0000\u0000\u0010AdvEngineID\u0000\u0000\u0000\u0000\u0000\u0010IsArtifical\u0000\u0000\u0000\u0000\u0000\u0010WindowClientWidth\u0000\u0000\u0000\u0000\u0000\u0010WindowClientHeight\u0000\u0000\u0000\u0000\u0000\u0010ClientTimeZone\u0000\u0012ClientEventTime\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0010SilverlightVersion1\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion2\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion3\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion4\u0000\u0000\u0000\u0000\u0000\u0005PageCharset\u0000\u0000\u0000\u0000\u0000\u0000\u0010CodeVersion\u0000\u0000\u0000\u0000\u0000\u0010IsLink\u0000\u0000\u0000\u0000\u0000\u0010IsDownload\u0000\u0000\u0000\u0000\u0000\u0010IsNotBounce\u0000\u0000\u0000\u0000\u0000\u0012FUniqID\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005OriginalURL\u0000\u0000\u0000\u0000\u0000\u0000\u0010HID\u0000\u0000\u0000\u0000\u0000\u0010IsOldCounter\u0000\u0000\u0000\u0000\u0000\u0010IsEvent\u0000\u0000\u0000\u0000\u0000\u0010IsParameter\u0000\u0000\u0000\u0000\u0000\u0010DontCountHits\u0000\u0000\u0000\u0000\u0000\u0010WithHash\u0000\u0000\u0000\u0000\u0000\u0005HitColor\u0000\u0001\u0000\u0000\u0000\u00005\u0012LocalEventTime\u0000YQ\u0000\u0000\u0000\u0000\u0010Age\u0000\u0000\u0000\u0000\u0000\u0010Sex\u0000\u0000\u0000\u0000\u0000\u0010Income\u0000\u0000\u0000\u0000\u0000\u0010Interests\u0000\u0000\u0000\u0000\u0000\u0010Robotness\u0000\u0000\u0000\u0000\u0000\u0010RemoteIP\u0000\u0003=k\u0010WindowName\u0000\u0010OpenerName\u0000\u0010HistoryLength\u0000\u0005BrowserLanguage\u0000\u0003\u0000\u0000\u0000\u0000\ufffd\u0005BrowserCountry\u0000\u0004\u0000\u0000\u0000\u0000\ufffd\f\u0005SocialNetwork\u0000\u0000\u0000\u0000\u0000\u0000\u0005SocialAction\u0000\u0000\u0000\u0000\u0000\u0000\u0010HTTPError\u0000\u0000\u0000\u0000\u0000\u0010SendTiming\u0000\u0000\u0000\u0000\u0000\u0010DNSTiming\u0000\u0000\u0000\u0000\u0000\u0010ConnectTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseStartTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseEndTiming\u0000\u0000\u0000\u0000\u0000\u0010FetchTiming\u0000\u0000\u0000\u0000\u0000\u0010SocialSourceNetworkID\u0000\u0000\u0000\u0000\u0000\u0005SocialSourcePage\u0000\u0000\u0000\u0000\u0000\u0000\u0012ParamPrice\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamOrderID\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamCurrency\u0000\u0003\u0000\u0000\u0000\u0000NH\u001c\u0010ParamCurrencyID\u0000\u0000\u0000\u0000\u0000\u0005OpenstatServiceName\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatCampaignID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatAdID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatSourceID\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMSource\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMMedium\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMCampaign\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMContent\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMTerm\u0000\u0000\u0000\u0000\u0000\u0000\u0005FromTag\u0000\u0000\u0000\u0000\u0000\u0000\u0010HasGCLID\u0000\u0000\u0000\u0000\u0000\u0012RefererHash\u0000X+'\u0012URLHash\u0000h\u0011\u00159D\u0010CLID\u0000\u0000\u0000\u0000\u0000\u0000^\u0007\u0000\u0000\u0012WatchID\u0000/EJ{\u0010JavaEnable\u0000\u0000\u0000\u0000\u0000\u0005Title\u0000\u0000\u0000\u0000\u0000\u0000\u0010GoodEvent\u0000\u0001\u0000\u0000\u0000\u0012EventTime\u00001Q\u0000\u0000\u0000\u0000\u0010EventDate\u0000\u001d>\u0000\u0000\u0010CounterID\u0000\u0014\u0000\u0000\u0000\u0010ClientIP\u0000z\u0010RegionID\u0000G\u0003\u0000\u0000\u0012UserID\u0000 :6\u0010CounterClass\u0000\u0000\u0000\u0000\u0000\u0010OS\u0000\u0000\u0000\u0000\u0000\u0010UserAgent\u0000\u0000\u0000\u0000\u0000\u0005URL\u0000\u0000\u0000\u0000\u0000\u0000\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCategoryID\u0000\u0000\u0000\u0000\u0000\u0010URLRegionID\u0000\u0000\u0000\u0000\u0000\u0010ResolutionWidth\u0000\u0000\u0000\u0000\u0000\u0010ResolutionHeight\u0000\u0000\u0000\u0000\u0000\u0010ResolutionDepth\u0000\u0000\u0000\u0000\u0000\u0010FlashMajor\u0000\u0000\u0000\u0000\u0000\u0010FlashMinor\u0000\u0000\u0000\u0000\u0000\u0005FlashMinor2\u0000\u0000\u0000\u0000\u0000\u0000\u0010NetMajor\u0000\u0000\u0000\u0000\u0000\u0010NetMinor\u0000\u0000\u0000\u0000\u0000\u0010UserAgentMajor\u0000\u0000\u0000\u0000\u0000\u0005UserAgentMinor\u0000\u0004\u0000\u0000\u0000\u0000\ufffdO\u0010CookieEnable\u0000\u0000\u0000\u0000\u0000\u0010JavascriptEnable\u0000\u0000\u0000\u0000\u0000\u0010IsMobile\u0000\u0000\u0000\u0000\u0000\u0010MobilePhone\u0000\u0000\u0000\u0000\u0000\u0005MobilePhkneModel\u0000\u0000\u0000\u0000\u0000\u0000\u0005Params\u0000\u0000\u0000\u0000\u0000\u0000\u0010IPNetworkID\u00009\u0000\u0010TraficSourceID\u0000\u0004\u0000\u0000\u0000\u0010SearchEngineID\u0000\u0000\u0000\u0000\u0000\u0005SearchPhrase\u0000\u0000\u0000\u0000\u0000\u0000\u0010AdvEngineID\u0000\u0000\u0000\u0000\u0000\u0010IsArtifical\u0000\u0000\u0000\u0000\u0000\u0010WindowClientWidth\u0000\u0000\u0000\u0000\u0000\u0010WindowClientHeight\u0000\u0000\u0000\u0000\u0000\u0010ClientTimeZone\u0000\u0012ClientEventTime\u0000\u0016\u0001\u0000\u0000\u0000\u0000\u0010SilverlightVersion1\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion2\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion3\u0000\u0000\u0000\u0000\u0000\u0010SilverlightVersion4\u0000\u0000\u0000\u0000\u0000\u0005PageCharset\u0000\u0000\u0000\u0000\u0000\u0000\u0010CodeVersion\u0000\u0000\u0000\u0000\u0000\u0010IsLink\u0000\u0000\u0000\u0000\u0000\u0010IsDownload\u0000\u0000\u0000\u0000\u0000\u0010IsNotBounce\u0000\u0000\u0000\u0000\u0000\u0012FUniqID\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005OriginalURL\u0000\u0000\u0000\u0000\u0000\u0000\u0010HID\u0000\u0000\u0000\u0000\u0000\u0010IsOldCounter\u0000\u0000\u0000\u0000\u0000\u0010IsEvent\u0000\u0000\u0000\u0000\u0000\u0010IsParameter\u0000\u0000\u0000\u0000\u0000\u0010DontCountHits\u0000\u0000\u0000\u0000\u0000\u0010WithHash\u0000\u0000\u0000\u0000\u0000\u0005HitColor\u0000\u0001\u0000\u0000\u0000\u00005\u0012LocalEventTime\u0000Q\u0000\u0000\u0000\u0000\u0010Age\u0000\u0000\u0000\u0000\u0000\u0010Sex\u0000\u0000\u0000\u0000\u0000\u0010Income\u0000\u0000\u0000\u0000\u0000\u0010Interests\u0000\u0000\u0000\u0000\u0000\u0010Robotness\u0000\u0000\u0000\u0000\u0000\u0010RemoteIP\u0000^DI\u0010WindowName\u0000\u0010OpenerName\u0000\u0010HistoryLength\u0000\u0005BrowserLanguage\u0000\u0003\u0000\u0000\u0000\u0000\ufffd\u0005BrowserCountry\u0000\u0004\u0000\u0000\u0000\u0000\ufffd\f\u0005SocialNetwork\u0000\u0000\u0000\u0000\u0000\u0000\u0005SocialAction\u0000\u0000\u0000\u0000\u0000\u0000\u0010HTTPError\u0000\u0000\u0000\u0000\u0000\u0010SendTiming\u0000\u0000\u0000\u0000\u0000\u0010DNSTiming\u0000\u0000\u0000\u0000\u0000\u0010ConnectTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseStartTiming\u0000\u0000\u0000\u0000\u0000\u0010ResponseEndTiming\u0000\u0000\u0000\u0000\u0000\u0010FetchTiming\u0000\u0000\u0000\u0000\u0000\u0010SocialSourceNetworkID\u0000\u0000\u0000\u0000\u0000\u0005SocialSourcePage\u0000\u0000\u0000\u0000\u0000\u0000\u0012ParamPrice\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamOrderID\u0000\u0000\u0000\u0000\u0000\u0000\u0005ParamCurrency\u0000\u0003\u0000\u0000\u0000\u0000NH\u001c\u0010ParamCurrencyID\u0000\u0000\u0000\u0000\u0000\u0005OpenstatServiceName\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatCampaignID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatAdID\u0000\u0000\u0000\u0000\u0000\u0000\u0005OpenstatSourceID\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMSource\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMMedium\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMCampaign\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMContent\u0000\u0000\u0000\u0000\u0000\u0000\u0005UTMTerm\u0000\u0000\u0000\u0000\u0000\u0000\u0005FromTag\u0000\u0000\u0000\u0000\u0000\u0000\u0010HasGCLID\u0000\u0000\u0000\u0000\u0000\u0012RefererHash\u0000X+'\u0012URLHash\u0000|3b.\u0010CLID\u0000\u0000\u0000\u0000\u0000\u0000$$);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 4 (line 1, col 4): )&bL\u0005Referer\u0000\u0000\u0000\u0000\u0000\u0000\u0010IsRefresh\u0000\u0000\u0000\u0000\u0000\u0010RefererCategoryID\u0000\u0000\u0000\u0000\u0000\u0010RefererRegionID\u0000\u0000\u0000\u0000\u0000\u0010URLCategoryID\u0000\u0003\u0000\u0000\u0000\u0010URLRegionID\u0000\u0000\u0000\u0000\u0010ResolutionWidth\u0000\u0000\u0000\u0000\u0000\u0010ResolutionHeight\u0000\u0000\u0000\u0000\u0000\u0010Reso. Unmatched parentheses: ), e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "the query contains a null character",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError INCORRECT_DATA }\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 38 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02725_alias_with_restricted_keywords.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT 1 `array`, 2 \"union\";",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 10 (line 1, col 10): `array`, 2 \"union\"\n FORMAT Native. Expected one of: AS, PREWHERE, identifier, UNION ALL, Comma, QuestionMark, token, FROM, OR, BETWEEN, IS, ORDER BY, WITH, WHERE, SETTINGS, FORMAT, INTO OUTFILE, GROUP BY, HAVING, LIMIT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02752_custom_separated_ignore_spaces_bug.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "select * from format(CustomSeparatedIgnoreSpaces, 'x String', ' unquoted_string\\n') settings format_custom_escaping_rule='CSV';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting format_custom_escaping_rule, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"format_custom_escaping_rule\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02807_lower_utf8_msan.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT lowerUTF8(arrayJoin(['\u00a9--------------------------------------', '\u00a9--------------------'])) ORDER BY 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "  lowerUTF8(arrayJoin(['\u00a9--------------------------------------', '\u00a9--------------------']))\n0                                                    \u00a9--------------------------------------\n1                                                                      \u00a9--------------------",
                "source_shape": [
                    2,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: '\u00a9--------------------------------------', '\u00a9--------------------'",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT upperUTF8(materialize('aaaa\u0410\u0411\u0412\u0413aaaaaaaaaaaa\u0410\u0411\u0412\u0413AAAAaaAA')) FROM numbers(2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  upperUTF8(materialize('aaaa\u0410\u0411\u0412\u0413aaaaaaaaaaaa\u0410\u0411\u0412\u0413AAAAaaAA'))\n0                           AAAA\u0410\u0411\u0412\u0413AAAAAAAAAAAA\u0410\u0411\u0412\u0413AAAAAAAA\n1                           AAAA\u0410\u0411\u0412\u0413AAAAAAAAAAAA\u0410\u0411\u0412\u0413AAAAAAAA",
                "source_shape": [
                    2,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02814_create_index_uniq_noop.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET allow_create_index_without_type=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 40 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET create_index_ignore_unique=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 36 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE UNIQUE INDEX idx_tab2_0 ON tab2 (col1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 9 (line 2, col 8): UNIQUE INDEX idx_tab2_0 ON tab2 (col1)\n FORMAT Native. Expected one of: VIEW, MATERIALIZED, DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: main.tab2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02815_fix_not_found_constants_col_in_block.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS t0;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t0 (vkey UInt32, c0 Float32, primary key(c0)) engine = AggregatingMergeTree;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 50, e.displayText() = DB::Exception: Unknown data type family: key, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into t0 values (19000, 1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t0 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t0",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect null as c_2_0, ref_2.c0 as c_2_1, ref_2.vkey as c_2_2 from t0 as ref_2 order by c_2_0 asc, c_2_1 asc, c_2_2 asc;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t0 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t0",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect null as c_2_0, ref_2.c0 as c_2_1, ref_2.vkey as c_2_2 from t0 as ref_2 order by c_2_0 asc, c_2_1 asc;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t0 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t0",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE t0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t0 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t0",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02861_filter_pushdown_const_bug.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET allow_experimental_analyzer = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 38 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t1 (key UInt8) ENGINE = Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t1 VALUES (1),(2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET join_algorithm = 'full_sorting_merge';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 46 (line 4, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT key FROM ( SELECT key FROM t1 ) AS t1 JOIN ( SELECT key FROM t1 ) AS t2 ON t1.key = t2.key WHERE key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   key\n0    1\n1    1",
                "source_shape": [
                    2,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT key FROM ( SELECT 1 AS key ) AS t1 JOIN ( SELECT 1 AS key ) AS t2 ON t1.key = t2.key WHERE key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   key\n0    1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "ambiguous column name: key",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM ( SELECT 1 AS key GROUP BY NULL ) AS t1 INNER JOIN (SELECT 1 AS key) AS t2 ON t1.key = t2.key WHERE t1.key ORDER BY key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   key  t2.key\n0    1       1",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_rows_in_set_to_optimize_join = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 45 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT key FROM ( SELECT key FROM t1 ) AS t1 JOIN ( SELECT key FROM t1 ) AS t2 ON t1.key = t2.key WHERE key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   key\n0    1\n1    1",
                "source_shape": [
                    2,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT key FROM ( SELECT 1 AS key ) AS t1 JOIN ( SELECT 1 AS key ) AS t2 ON t1.key = t2.key WHERE key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   key\n0    1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "ambiguous column name: key",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT * FROM ( SELECT 1 AS key GROUP BY NULL ) AS t1 INNER JOIN (SELECT 1 AS key) AS t2 ON t1.key = t2.key WHERE t1.key ORDER BY key;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   key  t2.key\n0    1       1",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET join_algorithm = 'grace_hash';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 38 (line 4, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM (SELECT key AS a FROM t1 ) t1 INNER JOIN (SELECT key AS c FROM t1 ) t2 ON c = a WHERE a;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: t2.a, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS t1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02861_index_set_incorrect_args.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- https://github.com/ClickHouse/ClickHouse/issues/52019\nDROP TABLE IF EXISTS set_index__fuzz_41;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE set_index__fuzz_41 (`a` Date, `b` Nullable(DateTime64(3)), INDEX b_set b TYPE set(0) GRANULARITY 1) ENGINE = MergeTree ORDER BY tuple();",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 86 (line 2, col 85): b TYPE set(0) GRANULARITY 1) ENGINE = MergeTree ORDER BY tuple()\n FORMAT Native. Expected one of: COMMENT, DEFAULT, MATERIALIZED, ALIAS, ClosingRoundBracket, Comma, token, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DateTime64\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO set_index__fuzz_41 (a) VALUES (today());",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.set_index__fuzz_41 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: set_index__fuzz_41",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT b FROM set_index__fuzz_41 WHERE and(b = 256) SETTINGS force_data_skipping_indices = 'b_set', optimize_move_to_prewhere = 0, max_parallel_replicas=2, parallel_replicas_for_non_replicated_merge_tree=1, allow_experimental_parallel_reading_from_replicas=2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting force_data_skipping_indices, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"and\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError TOO_FEW_ARGUMENTS_FOR_FUNCTION }\nDROP TABLE set_index__fuzz_41;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.set_index__fuzz_41 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: set_index__fuzz_41",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02871_join_on_system_errors.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "\n-- Unique table alias to distinguish between errors from different queries\nSELECT * FROM (SELECT 1 as a) t\nJOIN (SELECT 2 as a) `89467d35-77c2-4f82-ae7a-f093ff40f4cd`\nON t.a = `89467d35-77c2-4f82-ae7a-f093ff40f4cd`.a\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 9, e.displayText() = DB::Exception: Sizes of columns doesn't match: a: 0, 89467d35-77c2-4f82-ae7a-f093ff40f4cd.a: 1, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT *\nFROM system.errors\nWHERE name = 'UNKNOWN_IDENTIFIER'\nAND last_error_time > now() - 1\nAND last_error_message LIKE '%Missing columns%89467d35-77c2-4f82-ae7a-f093ff40f4cd%'\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table system.errors doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.errors",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02874_parse_json_as_json_each_row_on_no_metadata.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "desc format(JSON, '{\"a\" : 10, \"b\" : \"Hello\"}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"desc\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect * from format(JSON, '{\"a\" : 10, \"b\" : \"Hello\"}');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: format",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02905_show_setting_query.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SET max_threads = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 22 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSHOW SETTING max_threads;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 7 (line 2, col 6): SETTING max_threads\n FORMAT Native. Expected one of: TABLES, PROCESSLIST, CREATE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET max_threads = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 24 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSHOW SETTING max_threads;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 7 (line 2, col 6): SETTING max_threads\n FORMAT Native. Expected one of: TABLES, PROCESSLIST, CREATE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSHOW SETTING `max_threads' OR name = 'max_memory_usage`;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 8 (line 3, col 6): SETTING `max_threads' OR name = 'max_memory_usage`\n FORMAT Native. Expected one of: TABLES, PROCESSLIST, CREATE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SHOW\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02910_rocksdb_optimize.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: use-rocksdb\n\nCREATE TABLE dict (key UInt64, value String) ENGINE = EmbeddedRocksDB PRIMARY KEY key;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Engine EmbeddedRocksDB doesn't support PARTITION BY, PRIMARY KEY, ORDER BY or SAMPLE BY clauses. Currently only the MergeTree family of engines supports them, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO dict SELECT number, toString(number) FROM numbers(1e3);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.dict doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: dict",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nOPTIMIZE TABLE dict;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.dict doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"OPTIMIZE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02915_analyzer_fuzz_5.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "set allow_experimental_analyzer=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 36 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET max_block_size = 1000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 29 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET max_threads = 4;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 23 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET max_rows_to_group_by = 3000, group_by_overflow_mode = 'any';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 67 (line 3, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 'limit w/ GROUP BY', count(NULL), number FROM remote('127.{1,2}', view(SELECT intDiv(number, 2147483647)\n AS number FROM numbers(10))) GROUP BY number WITH ROLLUP ORDER BY count() ASC, number DESC NULLS LAST SETTINGS limit = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 87 (line 2, col 86): intDiv(number, 2147483647)\n AS number FROM numbers(10))) GROUP BY number WITH ROLLUP ORDER BY count() ASC, number DESC NULLS LAST SETTINGS limit = 2\n FORMAT Nat. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SELECT\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02916_distributed_skip_unavailable_shards.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: shard, no-fasttest\n\nDROP TABLE IF EXISTS table_02916;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS table_02916_distributed;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE table_02916\n(\n    `ID` UInt32,\n    `Name` String\n)\nENGINE = MergeTree\nORDER BY ID;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO table_02916 VALUES (1234, 'abcd');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_02916",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE table_02916_distributed\n(\n    `ID` UInt32,\n    `Name` String\n)\nENGINE = Distributed(test_unavailable_shard, currentDatabase(), table_02916, rand())\nSETTINGS skip_unavailable_shards = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 36, e.displayText() = DB::Exception: Engine Distributed doesn't support SETTINGS clause. Currently only the MergeTree family of engines, Kafka engine and Join engine support it, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET send_logs_level='fatal';",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32 (line 4, col 2): FORMAT Native. Expected one of: string literal, literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT *, _shard_num FROM table_02916_distributed;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.table_02916_distributed doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_02916_distributed",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE table_02916_distributed;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.table_02916_distributed doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_02916_distributed",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE table_02916;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: table_02916",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02932_lwd_and_mutations.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS t_lwd_mutations;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE t_lwd_mutations(id UInt64, v UInt64) ENGINE = MergeTree ORDER BY id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO t_lwd_mutations SELECT number, 0 FROM numbers(1000);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_lwd_mutations",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET mutations_sync = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 27 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDELETE FROM t_lwd_mutations WHERE id % 10 = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 3 (line 3, col 1): DELETE FROM t_lwd_mutations WHERE id % 10 = 0\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_lwd_mutations",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count(), sum(v), arraySort(groupUniqArray(id % 10)) FROM t_lwd_mutations;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()  sum(v) arraySort(groupUniqArray(modulo(id, 10)))\n0     1000       0            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_lwd_mutations",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count(), sum(rows), sum(has_lightweight_delete) FROM system.parts WHERE database = currentDatabase() AND table = 't_lwd_mutations' AND active;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: has_lightweight_delete, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE t_lwd_mutations UPDATE v = 1 WHERE id % 4 = 0, DELETE WHERE id % 10 = 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"UPDATE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count(), sum(v), arraySort(groupUniqArray(id % 10)) FROM t_lwd_mutations;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()  sum(v) arraySort(groupUniqArray(modulo(id, 10)))\n0     1000       0            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_lwd_mutations",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count(), sum(rows), sum(has_lightweight_delete) FROM system.parts WHERE database = currentDatabase() AND table = 't_lwd_mutations' AND active;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: has_lightweight_delete, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDELETE FROM t_lwd_mutations WHERE id % 10 = 2;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 3 (line 3, col 1): DELETE FROM t_lwd_mutations WHERE id % 10 = 2\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_lwd_mutations",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count(), sum(v), arraySort(groupUniqArray(id % 10)) FROM t_lwd_mutations;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()  sum(v) arraySort(groupUniqArray(modulo(id, 10)))\n0      900     250               [0, 2, 3, 4, 5, 6, 7, 8, 9]",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_lwd_mutations",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count(), sum(rows), sum(has_lightweight_delete) FROM system.parts WHERE database = currentDatabase() AND table = 't_lwd_mutations' AND active;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: has_lightweight_delete, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE t_lwd_mutations UPDATE v = 1 WHERE id % 4 = 1, DELETE WHERE id % 10 = 3;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"UPDATE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count(), sum(v), arraySort(groupUniqArray(id % 10)) FROM t_lwd_mutations;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()  sum(v) arraySort(groupUniqArray(modulo(id, 10)))\n0      900     250               [0, 2, 3, 4, 5, 6, 7, 8, 9]",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_lwd_mutations",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count(), sum(rows), sum(has_lightweight_delete) FROM system.parts WHERE database = currentDatabase() AND table = 't_lwd_mutations' AND active;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: has_lightweight_delete, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE t_lwd_mutations UPDATE _row_exists = 0 WHERE id % 10 = 4, DELETE WHERE id % 10 = 5;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 16, e.displayText() = DB::Exception: There is no column `_row_exists` in table, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"UPDATE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count(), sum(v), arraySort(groupUniqArray(id % 10)) FROM t_lwd_mutations;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()  sum(v) arraySort(groupUniqArray(modulo(id, 10)))\n0      800     400                  [0, 2, 4, 5, 6, 7, 8, 9]",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_lwd_mutations",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count(), sum(rows), sum(has_lightweight_delete) FROM system.parts WHERE database = currentDatabase() AND table = 't_lwd_mutations' AND active;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: has_lightweight_delete, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE t_lwd_mutations DELETE WHERE id % 10 = 6, UPDATE _row_exists = 0 WHERE id % 10 = 7;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 16, e.displayText() = DB::Exception: There is no column `_row_exists` in table, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DELETE\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count(), sum(v), arraySort(groupUniqArray(id % 10)) FROM t_lwd_mutations;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()  sum(v) arraySort(groupUniqArray(modulo(id, 10)))\n0      800     400                  [0, 2, 4, 5, 6, 7, 8, 9]",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_lwd_mutations",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count(), sum(rows), sum(has_lightweight_delete) FROM system.parts WHERE database = currentDatabase() AND table = 't_lwd_mutations' AND active;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: has_lightweight_delete, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nALTER TABLE t_lwd_mutations APPLY DELETED MASK;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 31 (line 3, col 29): APPLY DELETED MASK\n FORMAT Native. Expected one of: ON, FREEZE, a list of ALTER commands, ALTER command, ADD COLUMN, DROP COLUMN, CLEAR COLUMN, MODIFY COLUMN, COMMENT COLUMN, MODIFY PRIMARY KEY, MODIFY ORDER BY, ATTACH PARTITION, DETACH PARTITION, DROP PARTITION, ATTACH PART, FETCH PARTITION, REPLACE PARTITION, DELETE WHERE, UPDATE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"APPLY\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT count(), sum(v), arraySort(groupUniqArray(id % 10)) FROM t_lwd_mutations;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()  sum(v) arraySort(groupUniqArray(modulo(id, 10)))\n0      800     400                  [0, 2, 4, 5, 6, 7, 8, 9]",
                "source_shape": [
                    1,
                    3
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_lwd_mutations",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count(), sum(rows), sum(has_lightweight_delete) FROM system.parts WHERE database = currentDatabase() AND table = 't_lwd_mutations' AND active;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: has_lightweight_delete, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"table\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS t_lwd_mutations;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02932_set_ttl_where.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- Tags: no-ordinary-database\n\ncreate or replace table t_temp (\n    a UInt32,\n    timestamp DateTime\n)\nengine = MergeTree\norder by a\nTTL timestamp + INTERVAL 2 SECOND WHERE a in (select number from system.numbers limit 100_000);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 179 (line 9, col 46): (select number from system.numbers limit 100_000)\n FORMAT Native. Unmatched parentheses: (, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"or\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nselect sleep(1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   sleep(1)\n0         0",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: sleep",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into t_temp select rand(), now() from system.numbers limit 1_000_000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 68 (line 2, col 67): 1_000_000. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"1_000_000\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect sleep(1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   sleep(1)\n0         0",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: sleep",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\ninsert into t_temp select rand(), now() from system.numbers limit 1_000_000;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 68 (line 2, col 67): 1_000_000. Wrong number, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"1_000_000\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nselect sleep(1);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   sleep(1)\n0         0",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: sleep",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\noptimize table t_temp final;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_temp doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"optimize\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE t_temp;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.t_temp doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t_temp",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02935_format_with_arbitrary_types.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "\n-- Tags: no-fasttest\n-- no-fasttest: json type needs rapidjson library, geo types need s2 geometry\n\nSET allow_experimental_object_type = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 142 (line 6, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSET allow_suspicious_low_cardinality_types=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 48 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- Const string + non-const arbitrary type';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- Const string + non-const arbitrary type'\n0   -- Const string + non-const arbitrary type",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :: Int8));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: Int8))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(43 :: Int16));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: Int16))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(44 :: Int32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: Int32))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(45 :: Int64));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: Int64))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(46 :: Int128));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: Int128))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(47 :: Int256));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: Int256))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(48 :: UInt8));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: UInt8))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(49 :: UInt16));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: UInt16))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(50 :: UInt32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: UInt32))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(51 :: UInt64));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: UInt64))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(52 :: UInt128));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: UInt128))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(53 :: UInt256));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: UInt256))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(42.42 :: Float32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: Float32))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(43.43 :: Float64));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: Float64))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(44.44 :: Decimal(2)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: Decimal(2)))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(true :: Bool));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 79 (line 2, col 78): :: Bool))\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(false :: Bool));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: Bool))\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: String));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: String))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: FixedString(3)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: FixedString(3)))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: Nullable(String)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: Nullable(String)))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: Nullable(FixedString(3))));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: Nullable(FixedString(3))))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: LowCardinality(String)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: LowCardinality(String)))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: LowCardinality(FixedString(3))));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: LowCardinality(FixedString(3))))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('foo' :: LowCardinality(Nullable(String))));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: LowCardinality(Nullable(String))))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('bar' :: LowCardinality(Nullable(FixedString(3)))));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 2, col 79): :: LowCardinality(Nullable(FixedString(3)))))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :: LowCardinality(Nullable(UInt32))));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: LowCardinality(Nullable(UInt32))))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(42 :: LowCardinality(UInt32)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 77 (line 2, col 76): :: LowCardinality(UInt32)))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('fae310ca-d52a-4923-9e9b-02bf67f4b009' :: UUID));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 113 (line 2, col 112): :: UUID))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14' :: Date));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 87 (line 2, col 86): :: Date))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('2123-11-14' :: Date32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 87 (line 2, col 86): :: Date32))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14 05:50:12' :: DateTime('Europe/Amsterdam')));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 96 (line 2, col 95): :: DateTime('Europe/Amsterdam')))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('2023-11-14 05:50:12.123' :: DateTime64(3, 'Europe/Amsterdam')));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 100 (line 2, col 99): :: DateTime64(3, 'Europe/Amsterdam')))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('hallo' :: Enum('hallo' = 1)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 82 (line 2, col 81): :: Enum('hallo' = 1)))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(['foo', 'bar'] :: Array(String)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 89 (line 2, col 88): :: Array(String)))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('{\"foo\": \"bar\"}' :: JSON));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 91 (line 2, col 90): :: JSON))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize((42, 'foo') :: Tuple(Int32, String)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 86 (line 2, col 85): :: Tuple(Int32, String)))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize(map(42, 'foo') :: Map(Int32, String)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 89 (line 2, col 88): :: Map(Int32, String)))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('122.233.64.201' :: IPv4));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 91 (line 2, col 90): :: IPv4))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize('2001:0001:130F:0002:0003:09C0:876A:130B' :: IPv6));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 116 (line 2, col 115): :: IPv6))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize((42, 43) :: Point));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 83 (line 2, col 82): :: Point))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize([(0,0),(10,0),(10,10),(0,10)] :: Ring));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 104 (line 2, col 103): :: Ring))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize([[(20, 20), (50, 20), (50, 50), (20, 50)], [(30, 30), (50, 50), (50, 30)]] :: Polygon));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 149 (line 2, col 148): :: Polygon))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"]\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', 'answer', materialize([[[(0, 0), (10, 0), (10, 10), (0, 10)]], [[(20, 20), (50, 20), (50, 50), (20, 50)],[(30, 30), (50, 50), (50, 30)]]] :: MultiPolygon));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 190 (line 2, col 189): :: MultiPolygon))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \"]\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- Nested';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- Nested'\n0   -- Nested",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE IF EXISTS format_nested;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE format_nested(attrs Nested(k String, v String)) ENGINE = MergeTree ORDER BY tuple();",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"k\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO format_nested VALUES (['foo', 'bar'], ['qaz', 'qux']);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: format_nested",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}.', attrs.k, attrs.v) FROM format_nested;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: format_nested",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE format_nested;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: format_nested",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- NULL arguments';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- NULL arguments'\n0   -- NULL arguments",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', NULL, NULL);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', NULL, materialize(NULL :: Nullable(UInt64)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 74 (line 2, col 73): :: Nullable(UInt64)))\n FORMAT Native. Expected one of: AS, Comma, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 68 (line 2, col 67): :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)))\n FORMAT Native. Expected one of: AS, Comma, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', 42, materialize(NULL :: Nullable(UInt64)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 72 (line 2, col 71): :: Nullable(UInt64)))\n FORMAT Native. Expected one of: AS, Comma, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', '42', materialize(NULL :: Nullable(UInt64)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 74 (line 2, col 73): :: Nullable(UInt64)))\n FORMAT Native. Expected one of: AS, Comma, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', 42, materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 72 (line 2, col 71): :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)))\n FORMAT Native. Expected one of: AS, Comma, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', '42', materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 74 (line 2, col 73): :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)))\n FORMAT Native. Expected one of: AS, Comma, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- Various arguments tests';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- Various arguments tests'\n0   -- Various arguments tests",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', materialize('Non-const'), materialize(' strings'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: materialize",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', 'Two arguments ', 'test');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1} and {2}', 'Three ', 'arguments', ' test');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1} and {2}', materialize(3 :: Int64), ' arguments test', ' with int type');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 73 (line 2, col 72): :: Int64), ' arguments test', ' with int type')\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', materialize(42 :: Int32), materialize(144 :: UInt64));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 66 (line 2, col 65): :: Int32), materialize(144 :: UInt64))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1} and {2}', materialize(42 :: Int32), materialize(144 :: UInt64), materialize(255 :: UInt32));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 74 (line 2, col 73): :: Int32), materialize(144 :: UInt64), materialize(255 :: UInt32))\n FORMAT Native. Expected one of: AS, Comma, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1}', 42, 144);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The {0} to all questions is {1} and {2}', 42, 144, 255);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '-- Single argument tests';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '-- Single argument tests'\n0   -- Single argument tests",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The answer to all questions is {0}.', 42);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The answer to all questions is {0}.', materialize(42));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: materialize",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The answer to all questions is {0}.', 'foo');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The answer to all questions is {0}.', materialize('foo'));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: materialize",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The answer to all questions is {0}.', NULL);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function format, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT format('The answer to all questions is {0}.', materialize(NULL :: Nullable(UInt64)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 72 (line 2, col 71): :: Nullable(UInt64)))\n FORMAT Native. Expected one of: AS, Comma, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "unrecognized token: \":\"",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "02982_parallel_replicas_unexpected_cluster.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS test_unexpected_cluster;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE test_unexpected_cluster (n UInt64) ENGINE=MergeTree() ORDER BY tuple();",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO test_unexpected_cluster SELECT * FROM numbers(10);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_unexpected_cluster",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET allow_experimental_parallel_reading_from_replicas=2, max_parallel_replicas=2, cluster_for_parallel_replicas='test_cluster_two_shards', parallel_replicas_for_non_replicated_merge_tree=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 193 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT count() FROM test_unexpected_cluster WHERE NOT ignore(*);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   count()\n0       10",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_unexpected_cluster",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError UNEXPECTED_CLUSTER }\n\nDROP TABLE test_unexpected_cluster;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_unexpected_cluster",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03003_analyzer_setting.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "CREATE TABLE test (dummy Int8) ENGINE = Distributed(test_cluster_two_shards, 'system', 'one');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 170, e.displayText() = DB::Exception: Requested cluster 'test_cluster_two_shards' not found, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSET allow_experimental_analyzer = 0;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 40 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM (SELECT * FROM test SETTINGS allow_experimental_analyzer = 1);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_experimental_analyzer, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"allow_experimental_analyzer\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError INCORRECT_QUERY }\n\nSET allow_experimental_analyzer = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 75 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT * FROM (SELECT * FROM test SETTINGS allow_experimental_analyzer = 0);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 115, e.displayText() = DB::Exception: Unknown setting allow_experimental_analyzer, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"allow_experimental_analyzer\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError INCORRECT_QUERY }\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 39 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03013_group_by_use_nulls_with_materialize_and_analyzer.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "set allow_experimental_analyzer = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 38 (line 2, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nset group_by_use_nulls = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 30 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nset optimize_group_by_function_keys = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 43 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nset optimize_injective_functions_in_group_by = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 52 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"set\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 3 + 3 from numbers(10) GROUP BY GROUPING SETS (('str'), (3 + 3)) order by all;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 51 (line 3, col 49): SETS (('str'), (3 + 3)) order by all\n FORMAT Native. Expected one of: AS, UNION ALL, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, ORDER BY, WITH, SETTINGS, FORMAT, INTO OUTFILE, HAVING, LIMIT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT materialize(3) from numbers(10) GROUP BY GROUPING SETS (('str'), (materialize(3))) order by all;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 59 (line 2, col 58): SETS (('str'), (materialize(3))) order by all\n FORMAT Native. Expected one of: AS, UNION ALL, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, ORDER BY, WITH, SETTINGS, FORMAT, INTO OUTFILE, HAVING, LIMIT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT ignore(3) from numbers(10) GROUP BY GROUPING SETS (('str'), (ignore(3))) order by all;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 54 (line 2, col 53): SETS (('str'), (ignore(3))) order by all\n FORMAT Native. Expected one of: AS, UNION ALL, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, ORDER BY, WITH, SETTINGS, FORMAT, INTO OUTFILE, HAVING, LIMIT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT materialize(ignore(3)) from numbers(10) GROUP BY GROUPING SETS (('str'), (materialize(ignore(3)))) order by all;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 67 (line 2, col 66): SETS (('str'), (materialize(ignore(3)))) order by all\n FORMAT Native. Expected one of: AS, UNION ALL, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, ORDER BY, WITH, SETTINGS, FORMAT, INTO OUTFILE, HAVING, LIMIT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT ignore(materialize(3)) from numbers(10) GROUP BY GROUPING SETS (('str'), (ignore(materialize(3)))) order by all;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 67 (line 2, col 66): SETS (('str'), (ignore(materialize(3)))) order by all\n FORMAT Native. Expected one of: AS, UNION ALL, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, ORDER BY, WITH, SETTINGS, FORMAT, INTO OUTFILE, HAVING, LIMIT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SETS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03035_morton_encode_no_rows.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "SELECT mortonEncode(materialize((1, 1)), 65534, 65533);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function mortonEncode, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: materialize",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT mortonEncode((1, 1), 65534, 65533);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown function mortonEncode, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: mortonEncode",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03036_recursive_cte_postgres_2.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "/**\n  * Based on https://github.com/postgres/postgres/blob/master/src/test/regress/sql/with.sql, license:\n  *\n  * PostgreSQL Database Management System\n  * (formerly known as Postgres, then as Postgres95)\n  *\n  * Portions Copyright (c) 1996-2024, PostgreSQL Global Development Group\n  *\n  * Portions Copyright (c) 1994, The Regents of the University of California\n  *\n  * Permission to use, copy, modify, and distribute this software and its\n  * documentation for any purpose, without fee, and without a written agreement\n  * is hereby granted, provided that the above copyright notice and this\n  * paragraph and the following two paragraphs appear in all copies.\n  *\n  * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR\n  * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING\n  * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS\n  * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  *\n  * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,\n  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n  * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n  * ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO\n  *PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n  */\n\n--\n-- Tests for common table expressions (WITH query, ... SELECT ...)\n--\n\n-- { echoOn }\n\nSET allow_experimental_analyzer = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 1521 (line 36, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n--\n-- Some examples with a tree\n--\n-- department structure represented here is as follows:\n--\n-- ROOT-+->A-+->B-+->C\n--      |         |\n--      |         +->D-+->F\n--      +->E-+->G\n\nDROP TABLE IF EXISTS department;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE department (\n    id UInt64,  -- department ID\n    parent_department UInt64, -- upper department ID\n    name String -- department name\n)\nENGINE=TinyLog;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO department VALUES (0, NULL, 'ROOT');",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 321, e.displayText() = DB::Exception: Expression returns value NULL, that is out of range of type UInt64, at: NULL, 'ROOT'), e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO department VALUES (1, 0, 'A');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO department VALUES (2, 1, 'B');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO department VALUES (3, 2, 'C');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO department VALUES (4, 2, 'D');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO department VALUES (5, 0, 'E');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO department VALUES (6, 4, 'F');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO department VALUES (7, 5, 'G');",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\n-- extract all departments under 'A'. Result should be A, B, C, D and F\nWITH RECURSIVE subdepartment AS\n(\n    -- non recursive term\n    SELECT name as root_name, * FROM department WHERE name = 'A'\n\n    UNION ALL\n\n    -- recursive term\n    SELECT sd.root_name, d.* FROM department AS d, subdepartment AS sd\n        WHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment ORDER BY name;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 91 (line 5, col 16): subdepartment AS\n(\n    -- non recursive term\n    SELECT name as root_name, * FROM department WHERE name = 'A'\n\n    UNION ALL\n\n    -- recursive term\n    SELECT s. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, SELECT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- extract all departments under 'A' with \"level\" number\nWITH RECURSIVE subdepartment AS\n(\n    -- non recursive term\n    SELECT 1 AS level, * FROM department WHERE name = 'A'\n\n    UNION ALL\n\n    -- recursive term\n    SELECT sd.level + 1, d.* FROM department AS d, subdepartment AS sd\n        WHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment ORDER BY name;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 75 (line 4, col 16): subdepartment AS\n(\n    -- non recursive term\n    SELECT 1 AS level, * FROM department WHERE name = 'A'\n\n    UNION ALL\n\n    -- recursive term\n    SELECT sd.level. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, SELECT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- extract all departments under 'A' with \"level\" number.\n-- Only shows level 2 or more\nWITH RECURSIVE subdepartment AS\n(\n    -- non recursive term\n    SELECT 1 AS level, * FROM department WHERE name = 'A'\n\n    UNION ALL\n\n    -- recursive term\n    SELECT sd.level + 1, d.* FROM department AS d, subdepartment AS sd\n        WHERE d.parent_department = sd.id\n)\nSELECT * FROM subdepartment WHERE level >= 2 ORDER BY name;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 106 (line 5, col 16): subdepartment AS\n(\n    -- non recursive term\n    SELECT 1 AS level, * FROM department WHERE name = 'A'\n\n    UNION ALL\n\n    -- recursive term\n    SELECT sd.level. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, SELECT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- \"RECURSIVE\" is ignored if the query has no self-reference\nWITH RECURSIVE subdepartment AS\n(\n    -- note lack of recursive UNION structure\n    SELECT * FROM department WHERE name = 'A'\n)\nSELECT * FROM subdepartment ORDER BY name;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 79 (line 4, col 16): subdepartment AS\n(\n    -- note lack of recursive UNION structure\n    SELECT * FROM department WHERE name = 'A'\n)\nSELECT * FROM subdepartment ORDER BY name\n FORM. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, SELECT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: department",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- inside subqueries\nSELECT count(*) FROM\n(\n    WITH RECURSIVE t AS (\n        SELECT toUInt64(1) AS n UNION ALL SELECT n + 1 FROM t WHERE n < 500\n    )\n    SELECT * FROM t\n) AS t WHERE n < (\n        SELECT count(*) FROM (\n            WITH RECURSIVE t AS (\n                   SELECT toUInt64(1) AS n UNION ALL SELECT n + 1 FROM t WHERE n < 100\n                )\n            SELECT * FROM t WHERE n < 50000\n         ) AS t WHERE n < 100);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 66 (line 6, col 20): t AS (\n        SELECT toUInt64(1) AS n UNION ALL SELECT n + 1 FROM t WHERE n < 500\n    )\n    SELECT * FROM t\n) AS t WHERE n < (\n        SELECT count(*) FROM (\n . Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, SELECT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: toUInt64",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- corner case in which sub-WITH gets initialized first\nWITH RECURSIVE q AS (\n      SELECT * FROM department\n    UNION ALL\n      (WITH x AS (SELECT * FROM q)\n       SELECT * FROM x)\n    )\nSELECT * FROM q LIMIT 24;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 74 (line 4, col 16): q AS (\n      SELECT * FROM department\n    UNION ALL\n      (WITH x AS (SELECT * FROM q)\n       SELECT * FROM x)\n    )\nSELECT * FROM q LIMIT 24\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, SELECT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH RECURSIVE q AS (\n      SELECT * FROM department\n    UNION ALL\n      (WITH RECURSIVE x AS (\n           SELECT * FROM department\n         UNION ALL\n           (SELECT * FROM q UNION ALL SELECT * FROM x)\n        )\n       SELECT * FROM x)\n    )\nSELECT * FROM q LIMIT 32;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 18 (line 3, col 16): q AS (\n      SELECT * FROM department\n    UNION ALL\n      (WITH RECURSIVE x AS (\n           SELECT * FROM department\n         UNION ALL\n           (SELECT * FRO. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, SELECT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"(\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- recursive term has sub-UNION\nWITH RECURSIVE t AS (\n    SELECT 1 AS i, 2 AS j\n    UNION ALL\n    SELECT t2.i, t.j+1 FROM\n        (SELECT 2 AS i UNION ALL SELECT 3 AS i) AS t2\n        JOIN t ON (t2.i = t.i+1))\n\n    SELECT * FROM t;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 50 (line 4, col 16): t AS (\n    SELECT 1 AS i, 2 AS j\n    UNION ALL\n    SELECT t2.i, t.j+1 FROM\n        (SELECT 2 AS i UNION ALL SELECT 3 AS i) AS t2\n        JOIN t ON (t2.i = t.i+1. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, SELECT, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- { echoOff }\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 20 (line 5, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03042_not_found_column_c1.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- https://github.com/ClickHouse/ClickHouse/issues/42399\nSET allow_experimental_analyzer=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 93 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE IF NOT EXISTS t0 (c0 Int32) ENGINE = Memory() ;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t1 (c0 Int32, c1 Int32, c2 Int32) ENGINE = Memory() ;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t2 (c0 String, c1 String MATERIALIZED (c2), c2 Int32) ENGINE = Memory() ;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 57, e.displayText() = DB::Exception: Table default.t2 already exists., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"c2\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE t3 (c0 String, c1 String, c2 String) ENGINE = Log() ;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 57, e.displayText() = DB::Exception: Table default.t3 already exists., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE IF NOT EXISTS t4 (c0 Int32) ENGINE = Log() ;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT t3.c1, t3.c2, t1.c1, t1.c0, t2.c2, t0.c0, t1.c2, t2.c1, t4.c0 FROM t3, t0, t1, t2, t4;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 501)\n Code: 48, e.displayText() = DB::Exception: Support for more than one JOIN in query is not implemented, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: t3",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03052_query_hash_includes_aliases.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- https://github.com/ClickHouse/ClickHouse/pull/40065\nSET allow_experimental_analyzer=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 91 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT\n(\n  SELECT\n      1 AS number,\n      number\n  FROM numbers(1)\n) AS s,\n(\n  SELECT\n      1,\n      number\n  FROM numbers(1)\n) AS s2;",
                "source_success": true,
                "source_exception": "",
                "source_result": "        s      s2\n0  (1, 1)  (1, 0)",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: numbers",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT\n(\n  SELECT\n          1 + 2 AS number,\n          1 + number AS b\n  FROM system.numbers\n  LIMIT 10, 1\n),\n(\n  SELECT\n          1 + 2 AS number2,\n          1 + number AS b\n  FROM system.numbers\n  LIMIT 10, 1\n);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  _subquery283 _subquery284\n0       (3, 4)      (3, 11)",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: system.numbers",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03057_analyzer_subquery_alias_join.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- https://github.com/ClickHouse/ClickHouse/issues/10276\nSET allow_experimental_analyzer=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 93 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT\n    sum(x.n) as n,\n    sum(z.n) as n2\nFROM\n(\n    SELECT 1000 AS n,1 as id\n) AS x\njoin (select 10000 as n,1 as id) as y\non x.id = y.id\nleft join (select 100000 as n,1 as id) as z\non x.id = z.id;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 501)\n Code: 48, e.displayText() = DB::Exception: Support for more than one JOIN in query is not implemented, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03100_analyzer_constants_in_multiif.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- https://github.com/ClickHouse/ClickHouse/issues/59101\nSET allow_experimental_analyzer = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 95 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE users (name String, age Int16) ENGINE=Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO users VALUES ('John', 33);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: users",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO users VALUES ('Ksenia', 48);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: users",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO users VALUES ('Alice', 50);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: users",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT\n    multiIf((age > 30) or (true), '1', '2') AS a,\n    max(name)\nFROM users\nGROUP BY a;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: true, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: users",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03101_analyzer_identifiers_2.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- https://github.com/ClickHouse/ClickHouse/issues/23194\nSET allow_experimental_analyzer = 1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 95 (line 3, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TEMPORARY TABLE test1 (a String, nest Nested(x String, y String));",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"x\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT a, nest.* FROM test1 ARRAY JOIN nest;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown qualified identifier: nest, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT a, n.* FROM test1 ARRAY JOIN nest AS n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown qualified identifier: n, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TEMPORARY TABLE test2 (a String, nest Array(Tuple(x String, y String)));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 62 (line 3, col 60): String, y String)))\n FORMAT Native. Expected one of: AS, Comma, Dot, Arrow, QuestionMark, token, OR, BETWEEN, IS, NOT LIKE, LIKE, GLOBAL IN, IN, GLOBAL NOT IN, NOT IN, AND, alias, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"Tuple\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT a, nest.* FROM test2 ARRAY JOIN nest;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT a, n.* FROM test2 ARRAY JOIN nest AS n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 60, e.displayText() = DB::Exception: Table default.test2 doesn't exist., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nSELECT 1 AS x, x, x + 1;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x  plus(1, 1)\n0  1           2",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: x",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, x + 1, 1 AS x;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x  plus(1, 1)\n0  1           2",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: x",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, 1 + (2 + (3 AS x));",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x  plus(1, plus(2, 3))\n0  3                    6",
                "source_shape": [
                    1,
                    2
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"AS\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '---';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '---'\n0   ---",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 123 AS x FROM (SELECT a, x FROM (SELECT 1 AS a, 2 AS b));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: x, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: x",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '---';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '---'\n0   ---",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT 123 AS x, (SELECT x) AS y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: x. Note that there is no tables (FROM clause) in your query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: x",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 123 AS x, 123 IN (SELECT x);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: x. Note that there is no tables (FROM clause) in your query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: x",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '---';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '---'\n0   ---",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nWITH 123 AS x SELECT 555 FROM (SELECT a, x FROM (SELECT 1 AS a, 2 AS b));",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: x, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"123\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '---';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '---'\n0   ---",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- here we refer to table `test1` (defined as subquery) three times, one of them inside another scalar subquery.\nWITH t AS (SELECT 1) SELECT t, (SELECT * FROM t) FROM t;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 126 (line 4, col 11): (SELECT 1) SELECT t, (SELECT * FROM t) FROM t\n FORMAT Native. Expected identifier, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: t",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError UNKNOWN_IDENTIFIER }\n\n-- throws, because x is not visible outside.\nSELECT x FROM (SELECT y FROM VALUES ('y UInt16', (2)) WHERE (1 AS x) = y) AS t;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 46, e.displayText() = DB::Exception: Unknown table function VALUES, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"VALUES\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- { serverError UNKNOWN_IDENTIFIER }\n\n-- throws, because the table name `t` is not visible outside\nSELECT t.x FROM (SELECT * FROM (SELECT 1 AS x) AS t);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: t.x, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: t.x",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError UNKNOWN_IDENTIFIER }\nSELECT x FROM (SELECT * FROM (SELECT 99 AS x) AS t);",
                "source_success": true,
                "source_exception": "",
                "source_result": "    x\n0  99",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '---';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '---'\n0   ---",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT t.x FROM (SELECT 1 AS x) AS t;",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x\n0  1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT t.a FROM (SELECT a FROM test1) AS t;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT a FROM (SELECT a FROM test1) AS t;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '---';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '---'\n0   ---",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- this is wrong, the `tbl` name is not exported\nSELECT test1.a FROM (SELECT a FROM test1) AS t;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: test1.a, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError UNKNOWN_IDENTIFIER }\n-- this is also wrong, the `t2` alias is not exported\nSELECT test1.a FROM (SELECT a FROM test1 AS t2) AS t;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: test1.a, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test1",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError UNKNOWN_IDENTIFIER }\n\n\n-- does not work, `x` is not visible;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 80 (line 5, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, (SELECT 1 AS x);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: x. Note that there is no tables (FROM clause) in your query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: x",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError UNKNOWN_IDENTIFIER }\n-- does not work either;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 65 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x IN (SELECT 1 AS x);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: x. Note that there is no tables (FROM clause) in your query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: x",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError UNKNOWN_IDENTIFIER }\n-- this will work, but keep in mind that there are two different `x`.\nSELECT x IN (SELECT 1 AS x) FROM (SELECT 1 AS x);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   in(x, _subquery288)\n0                    1",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT '---';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '---'\n0   ---",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x + 1 AS x, x FROM (SELECT 1 AS x);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x\n0  2",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT x, x + 1 AS x FROM (SELECT 1 AS x);",
                "source_success": true,
                "source_exception": "",
                "source_result": "   x\n0  2",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nSELECT 1 AS x, 2 AS x;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 179, e.displayText() = DB::Exception: Different expressions with the same alias x:\n2 AS x\nand\n1 AS x\n, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS }\n\nSELECT '---';",
                "source_success": true,
                "source_exception": "",
                "source_result": "  '---'\n0   ---",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n\nSELECT arrayMap(x -> x + 1, [1, 2]);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  arrayMap(lambda(tuple(x), plus(x, 1)), [1, 2])\n0                                         [2, 3]",
                "source_shape": [
                    1,
                    1
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such function: arrayMap",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x, arrayMap((x, y) -> x[1] + y + arrayFirst(x -> x != y, x), arr) FROM (SELECT 1 AS x, [([1, 2], 3), ([4, 5], 6)] AS arr);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: First argument for this overload of arrayMap must be a function with 1 arguments. Found Function((?, ?) -> ?) instead., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"[1]\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT x1, arrayMap((x2, y2) -> x2[1] + y2 + arrayFirst(x3 -> x3 != y2, x2), arr) FROM (SELECT 1 AS x1, [([1, 2], 3), ([4, 5], 6)] AS arr);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 43, e.displayText() = DB::Exception: First argument for this overload of arrayMap must be a function with 1 arguments. Found Function((?, ?) -> ?) instead., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"[1]\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT arrayMap(x -> [y * 2, (x + 1) AS y, 1 AS z], [1, 2]), y;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: x. Note that there is no tables (FROM clause) in your query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such column: 1, 2",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": " -- { serverError UNKNOWN_IDENTIFIER }\n\n-- TODO: this must work\n--SELECT arrayMap(x -> [y * 2, (x + 1) AS y, 1 AS z], [1, 2]), z;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 131 (line 5, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nSELECT arrayMap(x -> (x + 1) AS y, [3, 5]), arrayMap(x -> (x || 'hello') AS y, ['qq', 'ww']);",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 179, e.displayText() = DB::Exception: Different expressions with the same alias y:\nx -> concat(x, 'hello') AS y\nand\nx -> (x + 1) AS y\n, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"AS\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "  -- { serverError MULTIPLE_EXPRESSIONS_FOR_ALIAS }\n;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 55 (line 3, col 2): FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03103_positional_arguments.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- https://github.com/ClickHouse/ClickHouse/issues/56466\n\nSET allow_experimental_analyzer=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 94 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS users;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nCREATE TABLE users (uid Int16, name String, age Int16) ENGINE=Memory;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nINSERT INTO users VALUES (1231, 'John', 33);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: users",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO users VALUES (6666, 'Ksenia', 48);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: users",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nINSERT INTO users VALUES (8888, 'Alice', 50);",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: users",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- The query works when using a single SELECT *\nSELECT *\nFROM\n(\n    SELECT\n        name,\n        age\n    FROM users\n)\nGROUP BY\n    1,\n    2\nORDER BY ALL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 404)\n Code: 47, e.displayText() = DB::Exception: Unknown identifier: ALL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ALL\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\n-- It doesn't when the GROUP BY is nested deeper\nSELECT *\nFROM\n(\n\tSELECT *\n\tFROM\n\t(\n    \tSELECT\n        \tname,\n        \tage\n    \tFROM users\n\t)\n\tGROUP BY\n    \t1,\n    \t2\n)\nORDER BY ALL;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 215, e.displayText() = DB::Exception: Column name is not under aggregate function and not in GROUP BY., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"ALL\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP TABLE IF EXISTS users;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03108_describe_union_all.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "-- https://github.com/ClickHouse/ClickHouse/issues/8030\n\nSET allow_experimental_analyzer=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 93 (line 4, col 2): FORMAT Native. Expected one of: literal, number, NULL, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"SET\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDESCRIBE (SELECT 1, 1 UNION ALL SELECT 1, 2);",
                "source_success": true,
                "source_exception": "",
                "source_result": "  name   type default_type default_expression comment_expression\n0    1  UInt8                                                   \n1    1  UInt8                                                   ",
                "source_shape": [
                    2,
                    5
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"DESCRIBE\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "03151_analyzer_view_read_only_necessary_columns.sql",
        "source_db": "clickhouse",
        "queries": [
            {
                "query": "DROP TABLE IF EXISTS test_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE TABLE test_table\n(\n    id UInt64,\n    value String\n) ENGINE=MergeTree ORDER BY id;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"=\": syntax error",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP VIEW IF EXISTS test_view;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 8 (line 3, col 6): VIEW IF EXISTS test_view\n FORMAT Native. Expected one of: DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nCREATE VIEW test_view AS SELECT id, value FROM test_table;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 500)\n Code: 57, e.displayText() = DB::Exception: Table default.test_view already exists., e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nEXPLAIN header = 1 SELECT sum(id) FROM test_view settings allow_experimental_analyzer=1;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 3 (line 3, col 1): EXPLAIN header = 1 SELECT sum(id) FROM test_view settings allow_experimental_analyzer=1\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "near \"header\": syntax error",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\n\nDROP VIEW test_view;",
                "source_success": false,
                "source_exception": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 8 (line 3, col 6): VIEW test_view\n FORMAT Native. Expected one of: DATABASE, TEMPORARY, TABLE, e.what() = DB::Exception\n",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": true,
                        "result": "",
                        "error": "",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "\nDROP TABLE test_table;",
                "source_success": true,
                "source_exception": "",
                "source_result": "Empty DataFrame\nColumns: []\nIndex: []",
                "source_shape": [
                    0,
                    0
                ],
                "target_dbs": [
                    {
                        "db": "sqlite",
                        "success": false,
                        "result": "",
                        "error": "no such table: test_table",
                        "shape_equal": false,
                        "columns_equal": false,
                        "dtypes_equal": false,
                        "values_equal": false,
                        "full_match": false,
                        "shape": null
                    }
                ]
            }
        ]
    },
    {
        "test_name": "shared3",
        "source_db": "sqlite",
        "queries": [
            {
                "query": "PRAGMA auto_vacuum = 2;\nCREATE TABLE t1(x, y);\nINSERT INTO t1 VALUES(randomblob(500), randomblob(500));\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) FROM t1;\n",
                "source_success": false,
                "source_exception": "You can only execute one statement at a time.",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "clickhouse",
                        "success": false,
                        "result": "",
                        "error": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 1 (line 1, col 1): PRAGMA auto_vacuum = 2;\nCREATE TABLE t1(x, y);\nINSERT INTO t1 VALUES(randomblob(500), randomblob(500));\nINSERT INTO t1 SELECT randomblob(500), randomblob(500) F. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            },
            {
                "query": "BEGIN;\nDELETE FROM t1 WHERE 1;\nPRAGMA incremental_vacuum;\n",
                "source_success": false,
                "source_exception": "You can only execute one statement at a time.",
                "source_result": null,
                "source_shape": null,
                "target_dbs": [
                    {
                        "db": "clickhouse",
                        "success": false,
                        "result": "",
                        "error": ":HTTPDriver for http://localhost:8123 returned response code 400)\n Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 1 (line 1, col 1): BEGIN;\nDELETE FROM t1 WHERE 1;\nPRAGMA incremental_vacuum;\n\n FORMAT Native. Expected one of: SYSTEM query, SELECT subquery, DESC, KILL QUERY, DETACH, DROP, ATTACH, list of elements, ALTER query, DESCRIBE query, DROP query, INSERT query, KILL QUERY query, OPTIMIZE query, Query with output, SHOW PROCESSLIST query, RENAME query, SELECT query, SET query, EXISTS or SHOW CREATE query, USE query, SHOW PROCESSLIST, WITH, ALTER TABLE, CHECK TABLE, CREATE, EXISTS, TRUNCATE, INSERT INTO, SELECT, OPTIMIZE TABLE, RENAME TABLE, SET, SHOW, USE, CREATE TABLE or ATTACH TABLE query, SELECT query, possibly with UNION, SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str'], SELECT query, subquery, possibly with UNION, DESCRIBE, Query, e.what() = DB::Exception\n",
                        "shape_equal": true,
                        "columns_equal": true,
                        "dtypes_equal": true,
                        "values_equal": true,
                        "full_match": true,
                        "shape": null
                    }
                ]
            }
        ]
    }
]