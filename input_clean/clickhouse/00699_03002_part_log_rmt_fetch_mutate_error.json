{
    "name": "03002_part_log_rmt_fetch_mutate_error.sql",
    "tests": [
        {
            "query": "-- Tags: no-replicated-database, no-parallel, no-shared-merge-tree\n-- SMT: The merge process is completely different from RMT\n\ndrop table if exists rmt_master;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\ndrop table if exists rmt_slave;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\n\ncreate table rmt_master (key Int) engine=ReplicatedMergeTree('/clickhouse/{database}', 'master') order by tuple() settings always_fetch_merged_part=0;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\n-- prefer_fetch_merged_part_*_threshold=0, consider this table as a \"slave\"\ncreate table rmt_slave (key Int) engine=ReplicatedMergeTree('/clickhouse/{database}', 'slave') order by tuple() settings prefer_fetch_merged_part_time_threshold=0, prefer_fetch_merged_part_size_threshold=0;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\n\ninsert into rmt_master values (1);",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\n\nsystem sync replica rmt_master;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nsystem sync replica rmt_slave;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nsystem stop replicated sends rmt_master;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nsystem stop pulling replication log rmt_slave;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nalter table rmt_master update key=key+100 where 1 settings alter_sync=1;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\n\n-- first we need to make the rmt_master execute mutation so that it will have\n-- the part, and rmt_slave will consider it instead of performing mutation on\n-- it's own, otherwise prefer_fetch_merged_part_*_threshold will be simply ignored\nselect sleep(3) format Null;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nsystem start pulling replication log rmt_slave;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\n-- and sleep few more seconds to try rmt_slave to fetch the part and reflect\n-- this error in system.part_log\nselect sleep(3) format Null;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\n\nsystem flush logs;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nselect 'before';",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nselect table, event_type, error>0, countIf(error=0) from system.part_log where database = currentDatabase() group by 1, 2, 3 order by 1, 2, 3;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\n\nsystem start replicated sends rmt_master;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nselect sleep(3) format Null;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nsystem sync replica rmt_slave;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\n\nsystem flush logs;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nselect 'after';",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\nselect table, event_type, error>0, countIf(error=0) from system.part_log where database = currentDatabase() group by 1, 2, 3 order by 1, 2, 3;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\n\ndrop table rmt_master;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        },
        {
            "query": "\ndrop table rmt_slave;",
            "name": "03002_part_log_rmt_fetch_mutate_error.sql"
        }
    ]
}