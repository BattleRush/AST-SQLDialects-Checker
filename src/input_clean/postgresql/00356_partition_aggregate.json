{
    "name": "partition_aggregate.sql",
    "tests": [
        {
            "name": "partition_aggregate.sql",
            "query": "--\n-- PARTITION_AGGREGATE\n-- Test partitionwise aggregation on partitioned tables\n--\n-- Note: to ensure plan stability, it's a good idea to make the partitions of\n-- any one partitioned table in this test all have different numbers of rows.\n--\n\n-- Enable partitionwise aggregate, which by default is disabled.\nSET enable_partitionwise_aggregate TO true;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Enable partitionwise join, which by default is disabled.\nSET enable_partitionwise_join TO true;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Disable parallel plans.\nSET max_parallel_workers_per_gather TO 0;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Disable incremental sort, which can influence selected plans due to fuzz factor.\nSET enable_incremental_sort TO off;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "--\n-- Tests for list partitioned tables.\n--\nCREATE TABLE pagg_tab (a int, b int, c text, d int) PARTITION BY LIST(c);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_p1 PARTITION OF pagg_tab FOR VALUES IN ('0000', '0001', '0002', '0003', '0004');"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_p2 PARTITION OF pagg_tab FOR VALUES IN ('0005', '0006', '0007', '0008');"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_p3 PARTITION OF pagg_tab FOR VALUES IN ('0009', '0010', '0011');"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "INSERT INTO pagg_tab SELECT i % 20, i % 30, to_char(i % 12, 'FM0000'), i % 30 FROM generate_series(0, 2999) i;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ANALYZE pagg_tab;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- When GROUP BY clause matches; full aggregation is performed for each partition.\nEXPLAIN (COSTS OFF)\nSELECT c, sum(a), avg(b), count(*), min(a), max(b) FROM pagg_tab GROUP BY c HAVING avg(d) < 15 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT c, sum(a), avg(b), count(*), min(a), max(b) FROM pagg_tab GROUP BY c HAVING avg(d) < 15 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- When GROUP BY clause does not match; partial aggregation is performed for each partition.\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b), avg(b), count(*), min(a), max(b) FROM pagg_tab GROUP BY a HAVING avg(d) < 15 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a, sum(b), avg(b), count(*), min(a), max(b) FROM pagg_tab GROUP BY a HAVING avg(d) < 15 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Check with multiple columns in GROUP BY\nEXPLAIN (COSTS OFF)\nSELECT a, c, count(*) FROM pagg_tab GROUP BY a, c;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Check with multiple columns in GROUP BY, order in GROUP BY is reversed\nEXPLAIN (COSTS OFF)\nSELECT a, c, count(*) FROM pagg_tab GROUP BY c, a;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Check with multiple columns in GROUP BY, order in target-list is reversed\nEXPLAIN (COSTS OFF)\nSELECT c, a, count(*) FROM pagg_tab GROUP BY a, c;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Test when input relation for grouping is dummy\nEXPLAIN (COSTS OFF)\nSELECT c, sum(a) FROM pagg_tab WHERE 1 = 2 GROUP BY c;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT c, sum(a) FROM pagg_tab WHERE 1 = 2 GROUP BY c;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "EXPLAIN (COSTS OFF)\nSELECT c, sum(a) FROM pagg_tab WHERE c = 'x' GROUP BY c;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT c, sum(a) FROM pagg_tab WHERE c = 'x' GROUP BY c;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Test GroupAggregate paths by disabling hash aggregates.\nSET enable_hashagg TO false;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- When GROUP BY clause matches full aggregation is performed for each partition.\nEXPLAIN (COSTS OFF)\nSELECT c, sum(a), avg(b), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT c, sum(a), avg(b), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- When GROUP BY clause does not match; partial aggregation is performed for each partition.\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b), avg(b), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a, sum(b), avg(b), count(*) FROM pagg_tab GROUP BY 1 HAVING avg(d) < 15 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Test partitionwise grouping without any aggregates\nEXPLAIN (COSTS OFF)\nSELECT c FROM pagg_tab GROUP BY c ORDER BY 1;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT c FROM pagg_tab GROUP BY c ORDER BY 1;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "EXPLAIN (COSTS OFF)\nSELECT a FROM pagg_tab WHERE a < 3 GROUP BY a ORDER BY 1;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a FROM pagg_tab WHERE a < 3 GROUP BY a ORDER BY 1;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "RESET enable_hashagg;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- ROLLUP, partitionwise aggregation does not apply\nEXPLAIN (COSTS OFF)\nSELECT c, sum(a) FROM pagg_tab GROUP BY rollup(c) ORDER BY 1, 2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- ORDERED SET within the aggregate.\n-- Full aggregation; since all the rows that belong to the same group come\n-- from the same partition, having an ORDER BY within the aggregate doesn't\n-- make any difference.\nEXPLAIN (COSTS OFF)\nSELECT c, sum(b order by a) FROM pagg_tab GROUP BY c ORDER BY 1, 2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Since GROUP BY clause does not match with PARTITION KEY; we need to do\n-- partial aggregation. However, ORDERED SET are not partial safe and thus\n-- partitionwise aggregation plan is not generated.\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b order by a) FROM pagg_tab GROUP BY a ORDER BY 1, 2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- JOIN query\n\nCREATE TABLE pagg_tab1(x int, y int) PARTITION BY RANGE(x);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab1_p1 PARTITION OF pagg_tab1 FOR VALUES FROM (0) TO (10);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab1_p2 PARTITION OF pagg_tab1 FOR VALUES FROM (10) TO (20);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab1_p3 PARTITION OF pagg_tab1 FOR VALUES FROM (20) TO (30);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab2(x int, y int) PARTITION BY RANGE(y);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab2_p1 PARTITION OF pagg_tab2 FOR VALUES FROM (0) TO (10);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab2_p2 PARTITION OF pagg_tab2 FOR VALUES FROM (10) TO (20);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab2_p3 PARTITION OF pagg_tab2 FOR VALUES FROM (20) TO (30);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "INSERT INTO pagg_tab1 SELECT i % 30, i % 20 FROM generate_series(0, 299, 2) i;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "INSERT INTO pagg_tab2 SELECT i % 20, i % 30 FROM generate_series(0, 299, 3) i;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ANALYZE pagg_tab1;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ANALYZE pagg_tab2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- When GROUP BY clause matches; full aggregation is performed for each partition.\nEXPLAIN (COSTS OFF)\nSELECT t1.x, sum(t1.y), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT t1.x, sum(t1.y), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Check with whole-row reference; partitionwise aggregation does not apply\nEXPLAIN (COSTS OFF)\nSELECT t1.x, sum(t1.y), count(t1) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT t1.x, sum(t1.y), count(t1) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.x ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- GROUP BY having other matching key\nEXPLAIN (COSTS OFF)\nSELECT t2.y, sum(t1.y), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t2.y ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- When GROUP BY clause does not match; partial aggregation is performed for each partition.\n-- Also test GroupAggregate paths by disabling hash aggregates.\nSET enable_hashagg TO false;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "EXPLAIN (COSTS OFF)\nSELECT t1.y, sum(t1.x), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.y HAVING avg(t1.x) > 10 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT t1.y, sum(t1.x), count(*) FROM pagg_tab1 t1, pagg_tab2 t2 WHERE t1.x = t2.y GROUP BY t1.y HAVING avg(t1.x) > 10 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "RESET enable_hashagg;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Check with LEFT/RIGHT/FULL OUTER JOINs which produces NULL values for\n-- aggregation\n\n-- LEFT JOIN, should produce partial partitionwise aggregation plan as\n-- GROUP BY is on nullable column\nEXPLAIN (COSTS OFF)\nSELECT b.y, sum(a.y) FROM pagg_tab1 a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT b.y, sum(a.y) FROM pagg_tab1 a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- RIGHT JOIN, should produce full partitionwise aggregation plan as\n-- GROUP BY is on non-nullable column\nEXPLAIN (COSTS OFF)\nSELECT b.y, sum(a.y) FROM pagg_tab1 a RIGHT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT b.y, sum(a.y) FROM pagg_tab1 a RIGHT JOIN pagg_tab2 b ON a.x = b.y GROUP BY b.y ORDER BY 1 NULLS LAST;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- FULL JOIN, should produce partial partitionwise aggregation plan as\n-- GROUP BY is on nullable column\nEXPLAIN (COSTS OFF)\nSELECT a.x, sum(b.x) FROM pagg_tab1 a FULL OUTER JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x ORDER BY 1 NULLS LAST;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a.x, sum(b.x) FROM pagg_tab1 a FULL OUTER JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x ORDER BY 1 NULLS LAST;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- LEFT JOIN, with dummy relation on right side, ideally\n-- should produce full partitionwise aggregation plan as GROUP BY is on\n-- non-nullable columns.\n-- But right now we are unable to do partitionwise join in this case.\nEXPLAIN (COSTS OFF)\nSELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a LEFT JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a LEFT JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- FULL JOIN, with dummy relations on both sides, ideally\n-- should produce partial partitionwise aggregation plan as GROUP BY is on\n-- nullable columns.\n-- But right now we are unable to do partitionwise join in this case.\nEXPLAIN (COSTS OFF)\nSELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a FULL JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20  GROUP BY a.x, b.y ORDER BY 1, 2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a.x, b.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x < 20) a FULL JOIN (SELECT * FROM pagg_tab2 WHERE y > 10) b ON a.x = b.y WHERE a.x > 5 or b.y < 20 GROUP BY a.x, b.y ORDER BY 1, 2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Empty join relation because of empty outer side, no partitionwise agg plan\nEXPLAIN (COSTS OFF)\nSELECT a.x, a.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x = 1 AND x = 2) a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x, a.y ORDER BY 1, 2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a.x, a.y, count(*) FROM (SELECT * FROM pagg_tab1 WHERE x = 1 AND x = 2) a LEFT JOIN pagg_tab2 b ON a.x = b.y GROUP BY a.x, a.y ORDER BY 1, 2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Partition by multiple columns\n\nCREATE TABLE pagg_tab_m (a int, b int, c int) PARTITION BY RANGE(a, ((a+b)/2));"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_m_p1 PARTITION OF pagg_tab_m FOR VALUES FROM (0, 0) TO (12, 12);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_m_p2 PARTITION OF pagg_tab_m FOR VALUES FROM (12, 12) TO (22, 22);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_m_p3 PARTITION OF pagg_tab_m FOR VALUES FROM (22, 22) TO (30, 30);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "INSERT INTO pagg_tab_m SELECT i % 30, i % 40, i % 50 FROM generate_series(0, 2999) i;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ANALYZE pagg_tab_m;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Partial aggregation as GROUP BY clause does not match with PARTITION KEY\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a HAVING avg(c) < 22 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a HAVING avg(c) < 22 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Full aggregation as GROUP BY clause matches with PARTITION KEY\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a, (a+b)/2 HAVING sum(b) < 50 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY a, (a+b)/2 HAVING sum(b) < 50 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Full aggregation as PARTITION KEY is part of GROUP BY clause\nEXPLAIN (COSTS OFF)\nSELECT a, c, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY (a+b)/2, 2, 1 HAVING sum(b) = 50 AND avg(c) > 25 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a, c, sum(b), avg(c), count(*) FROM pagg_tab_m GROUP BY (a+b)/2, 2, 1 HAVING sum(b) = 50 AND avg(c) > 25 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Test with multi-level partitioning scheme\n\nCREATE TABLE pagg_tab_ml (a int, b int, c text) PARTITION BY RANGE(a);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_ml_p1 PARTITION OF pagg_tab_ml FOR VALUES FROM (0) TO (12);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_ml_p2 PARTITION OF pagg_tab_ml FOR VALUES FROM (12) TO (20) PARTITION BY LIST (c);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_ml_p2_s1 PARTITION OF pagg_tab_ml_p2 FOR VALUES IN ('0000', '0001', '0002');"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_ml_p2_s2 PARTITION OF pagg_tab_ml_p2 FOR VALUES IN ('0003');"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- This level of partitioning has different column positions than the parent\nCREATE TABLE pagg_tab_ml_p3(b int, c text, a int) PARTITION BY RANGE (b);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_ml_p3_s1(c text, a int, b int);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_ml_p3_s2 PARTITION OF pagg_tab_ml_p3 FOR VALUES FROM (7) TO (10);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ALTER TABLE pagg_tab_ml_p3 ATTACH PARTITION pagg_tab_ml_p3_s1 FOR VALUES FROM (0) TO (7);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ALTER TABLE pagg_tab_ml ATTACH PARTITION pagg_tab_ml_p3 FOR VALUES FROM (20) TO (30);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "INSERT INTO pagg_tab_ml SELECT i % 30, i % 10, to_char(i % 4, 'FM0000') FROM generate_series(0, 29999) i;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ANALYZE pagg_tab_ml;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- For Parallel Append\nSET max_parallel_workers_per_gather TO 2;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SET parallel_setup_cost = 0;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Full aggregation at level 1 as GROUP BY clause matches with PARTITION KEY\n-- for level 1 only. For subpartitions, GROUP BY clause does not match with\n-- PARTITION KEY, but still we do not see a partial aggregation as array_agg()\n-- is not partial agg safe.\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Without ORDER BY clause, to test Gather at top-most path\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b), array_agg(distinct c), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "RESET parallel_setup_cost;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Full aggregation at level 1 as GROUP BY clause matches with PARTITION KEY\n-- for level 1 only. For subpartitions, GROUP BY clause does not match with\n-- PARTITION KEY, thus we will have a partial aggregation for them.\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Partial aggregation at all levels as GROUP BY clause does not match with\n-- PARTITION KEY\nEXPLAIN (COSTS OFF)\nSELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b HAVING avg(a) < 15 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Full aggregation at all levels as GROUP BY clause matches with PARTITION KEY\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Parallelism within partitionwise aggregates\n\nSET min_parallel_table_scan_size TO '8kB';"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SET parallel_setup_cost TO 0;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Full aggregation at level 1 as GROUP BY clause matches with PARTITION KEY\n-- for level 1 only. For subpartitions, GROUP BY clause does not match with\n-- PARTITION KEY, thus we will have a partial aggregation for them.\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a HAVING avg(b) < 3 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Partial aggregation at all levels as GROUP BY clause does not match with\n-- PARTITION KEY\nEXPLAIN (COSTS OFF)\nSELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT b, sum(a), count(*) FROM pagg_tab_ml GROUP BY b HAVING avg(a) < 15 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Full aggregation at all levels as GROUP BY clause matches with PARTITION KEY\nEXPLAIN (COSTS OFF)\nSELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT a, sum(b), count(*) FROM pagg_tab_ml GROUP BY a, b, c HAVING avg(b) > 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Parallelism within partitionwise aggregates (single level)\n\n-- Add few parallel setup cost, so that we will see a plan which gathers\n-- partially created paths even for full aggregation and sticks a single Gather\n-- followed by finalization step.\n-- Without this, the cost of doing partial aggregation + Gather + finalization\n-- for each partition and then Append over it turns out to be same and this\n-- wins as we add it first. This parallel_setup_cost plays a vital role in\n-- costing such plans.\nSET parallel_setup_cost TO 10;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_para(x int, y int) PARTITION BY RANGE(x);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_para_p1 PARTITION OF pagg_tab_para FOR VALUES FROM (0) TO (12);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_para_p2 PARTITION OF pagg_tab_para FOR VALUES FROM (12) TO (22);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "CREATE TABLE pagg_tab_para_p3 PARTITION OF pagg_tab_para FOR VALUES FROM (22) TO (30);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "INSERT INTO pagg_tab_para SELECT i % 30, i % 20 FROM generate_series(0, 29999) i;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ANALYZE pagg_tab_para;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- When GROUP BY clause matches; full aggregation is performed for each partition.\nEXPLAIN (COSTS OFF)\nSELECT x, sum(y), avg(y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- When GROUP BY clause does not match; partial aggregation is performed for each partition.\nEXPLAIN (COSTS OFF)\nSELECT y, sum(x), avg(x), count(*) FROM pagg_tab_para GROUP BY y HAVING avg(x) < 12 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT y, sum(x), avg(x), count(*) FROM pagg_tab_para GROUP BY y HAVING avg(x) < 12 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Test when parent can produce parallel paths but not any (or some) of its children\n-- (Use one more aggregate to tilt the cost estimates for the plan we want)\nALTER TABLE pagg_tab_para_p1 SET (parallel_workers = 0);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ALTER TABLE pagg_tab_para_p3 SET (parallel_workers = 0);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ANALYZE pagg_tab_para;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "EXPLAIN (COSTS OFF)\nSELECT x, sum(y), avg(y), sum(x+y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT x, sum(y), avg(y), sum(x+y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ALTER TABLE pagg_tab_para_p2 SET (parallel_workers = 0);"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "ANALYZE pagg_tab_para;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "EXPLAIN (COSTS OFF)\nSELECT x, sum(y), avg(y), sum(x+y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT x, sum(y), avg(y), sum(x+y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "-- Reset parallelism parameters to get partitionwise aggregation plan.\nRESET min_parallel_table_scan_size;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "RESET parallel_setup_cost;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "EXPLAIN (COSTS OFF)\nSELECT x, sum(y), avg(y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;"
        },
        {
            "name": "partition_aggregate.sql",
            "query": "SELECT x, sum(y), avg(y), count(*) FROM pagg_tab_para GROUP BY x HAVING avg(y) < 7 ORDER BY 1, 2, 3;"
        }
    ]
}