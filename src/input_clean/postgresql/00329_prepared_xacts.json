{
    "name": "prepared_xacts.sql",
    "tests": [
        {
            "name": "prepared_xacts.sql",
            "query": "--\n-- PREPARED TRANSACTIONS (two-phase commit)\n--\n-- We can't readily test persistence of prepared xacts within the\n-- regression script framework, unfortunately.  Note that a crash\n-- isn't really needed ... stopping and starting the postmaster would\n-- be enough, but we can't even do that here.\n\n\n-- create a simple table that we'll use in the tests\nCREATE TABLE pxtest1 (foobar VARCHAR(10));"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "INSERT INTO pxtest1 VALUES ('aaa');"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Test PREPARE TRANSACTION\nBEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "UPDATE pxtest1 SET foobar = 'bbb' WHERE foobar = 'aaa';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "PREPARE TRANSACTION 'regress_foo1';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Test pg_prepared_xacts system view\nSELECT gid FROM pg_prepared_xacts WHERE gid ~ '^regress_' ORDER BY gid;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Test ROLLBACK PREPARED\nROLLBACK PREPARED 'regress_foo1';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT gid FROM pg_prepared_xacts WHERE gid ~ '^regress_' ORDER BY gid;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Test COMMIT PREPARED\nBEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "INSERT INTO pxtest1 VALUES ('ddd');"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "PREPARE TRANSACTION 'regress_foo2';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "COMMIT PREPARED 'regress_foo2';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Test duplicate gids\nBEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "UPDATE pxtest1 SET foobar = 'eee' WHERE foobar = 'ddd';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "PREPARE TRANSACTION 'regress_foo3';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT gid FROM pg_prepared_xacts WHERE gid ~ '^regress_' ORDER BY gid;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "INSERT INTO pxtest1 VALUES ('fff');"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- This should fail, because the gid foo3 is already in use\nPREPARE TRANSACTION 'regress_foo3';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "ROLLBACK PREPARED 'regress_foo3';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Test serialization failure (SSI)\nBEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "UPDATE pxtest1 SET foobar = 'eee' WHERE foobar = 'ddd';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "PREPARE TRANSACTION 'regress_foo4';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT gid FROM pg_prepared_xacts WHERE gid ~ '^regress_' ORDER BY gid;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- This should fail, because the two transactions have a write-skew anomaly\nINSERT INTO pxtest1 VALUES ('fff');"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "PREPARE TRANSACTION 'regress_foo5';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT gid FROM pg_prepared_xacts WHERE gid ~ '^regress_' ORDER BY gid;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "ROLLBACK PREPARED 'regress_foo4';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT gid FROM pg_prepared_xacts WHERE gid ~ '^regress_' ORDER BY gid;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Clean up\nDROP TABLE pxtest1;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Test detection of session-level and xact-level locks on same object\nBEGIN;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT pg_advisory_lock(1);"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT pg_advisory_xact_lock_shared(1);"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "PREPARE TRANSACTION 'regress_foo6';  -- fails\n\n-- Test subtransactions\nBEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "CREATE TABLE pxtest2 (a int);"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "INSERT INTO pxtest2 VALUES (1);"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SAVEPOINT a;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "INSERT INTO pxtest2 VALUES (2);"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "ROLLBACK TO a;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SAVEPOINT b;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "INSERT INTO pxtest2 VALUES (3);"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "PREPARE TRANSACTION 'regress_sub1';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "CREATE TABLE pxtest3(fff int);"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Test shared invalidation\nBEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "DROP TABLE pxtest3;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "CREATE TABLE pxtest4 (a int);"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "INSERT INTO pxtest4 VALUES (1);"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "INSERT INTO pxtest4 VALUES (2);"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "DECLARE foo CURSOR FOR SELECT * FROM pxtest4;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Fetch 1 tuple, keeping the cursor open\n  FETCH 1 FROM foo;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "PREPARE TRANSACTION 'regress_sub2';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- No such cursor\nFETCH 1 FROM foo;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Table doesn't exist, the creation hasn't been committed yet\nSELECT * FROM pxtest2;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- There should be two prepared transactions\nSELECT gid FROM pg_prepared_xacts WHERE gid ~ '^regress_' ORDER BY gid;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- pxtest3 should be locked because of the pending DROP\nbegin;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "lock table pxtest3 in access share mode nowait;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "rollback;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Disconnect, we will continue testing in a different backend\n\\c -\n\n-- There should still be two prepared transactions\nSELECT gid FROM pg_prepared_xacts WHERE gid ~ '^regress_' ORDER BY gid;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- pxtest3 should still be locked because of the pending DROP\nbegin;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "lock table pxtest3 in access share mode nowait;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "rollback;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Commit table creation\nCOMMIT PREPARED 'regress_sub1';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "\\d pxtest2\nSELECT * FROM pxtest2;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- There should be one prepared transaction\nSELECT gid FROM pg_prepared_xacts WHERE gid ~ '^regress_' ORDER BY gid;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Commit table drop\nCOMMIT PREPARED 'regress_sub2';"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "SELECT * FROM pxtest3;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- There should be no prepared transactions\nSELECT gid FROM pg_prepared_xacts WHERE gid ~ '^regress_' ORDER BY gid;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "-- Clean up\nDROP TABLE pxtest2;"
        },
        {
            "name": "prepared_xacts.sql",
            "query": "DROP TABLE pxtest3;  -- will still be there if prepared xacts are disabled\nDROP TABLE pxtest4;"
        }
    ]
}