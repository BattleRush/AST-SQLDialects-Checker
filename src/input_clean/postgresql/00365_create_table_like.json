{
    "name": "create_table_like.sql",
    "tests": [
        {
            "name": "create_table_like.sql",
            "query": "/* Test inheritance of structure (LIKE) */\nCREATE TABLE inhx (xx text DEFAULT 'text');"
        },
        {
            "name": "create_table_like.sql",
            "query": "/*\n * Test double inheritance\n *\n * Ensure that defaults are NOT included unless\n * INCLUDING DEFAULTS is specified\n */\nCREATE TABLE ctla (aa TEXT);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlb (bb TEXT) INHERITS (ctla);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE foo (LIKE nonexistent);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE inhe (ee text, LIKE inhx) inherits (ctlb);"
        },
        {
            "name": "create_table_like.sql",
            "query": "INSERT INTO inhe VALUES ('ee-col1', 'ee-col2', DEFAULT, 'ee-col4');"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT * FROM inhe; /* Columns aa, bb, xx value NULL, ee */\nSELECT * FROM inhx; /* Empty set since LIKE inherits structure only */\nSELECT * FROM ctlb; /* Has ee entry */\nSELECT * FROM ctla; /* Has ee entry */\n\nCREATE TABLE inhf (LIKE inhx, LIKE inhx); /* Throw error */\n\nCREATE TABLE inhf (LIKE inhx INCLUDING DEFAULTS INCLUDING CONSTRAINTS);"
        },
        {
            "name": "create_table_like.sql",
            "query": "INSERT INTO inhf DEFAULT VALUES;"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT * FROM inhf; /* Single entry with value 'text' */\n\nALTER TABLE inhx add constraint foo CHECK (xx = 'text');"
        },
        {
            "name": "create_table_like.sql",
            "query": "ALTER TABLE inhx ADD PRIMARY KEY (xx);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE inhg (LIKE inhx); /* Doesn't copy constraint */\nINSERT INTO inhg VALUES ('foo');"
        },
        {
            "name": "create_table_like.sql",
            "query": "DROP TABLE inhg;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE inhg (x text, LIKE inhx INCLUDING CONSTRAINTS, y text); /* Copies constraints */\nINSERT INTO inhg VALUES ('x', 'text', 'y'); /* Succeeds */\nINSERT INTO inhg VALUES ('x', 'text', 'y'); /* Succeeds -- Unique constraints not copied */\nINSERT INTO inhg VALUES ('x', 'foo',  'y');  /* fails due to constraint */\nSELECT * FROM inhg; /* Two records with three columns in order x=x, xx=text, y=y */\nDROP TABLE inhg;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE test_like_id_1 (a bigint GENERATED ALWAYS AS IDENTITY, b text);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_id_1\nINSERT INTO test_like_id_1 (b) VALUES ('b1');"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT * FROM test_like_id_1;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE test_like_id_2 (LIKE test_like_id_1);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_id_2\nINSERT INTO test_like_id_2 (b) VALUES ('b2');"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT * FROM test_like_id_2;  -- identity was not copied\nCREATE TABLE test_like_id_3 (LIKE test_like_id_1 INCLUDING IDENTITY);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_id_3\nINSERT INTO test_like_id_3 (b) VALUES ('b3');"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT * FROM test_like_id_3;  -- identity was copied and applied\nDROP TABLE test_like_id_1, test_like_id_2, test_like_id_3;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE test_like_gen_1 (a int, b int GENERATED ALWAYS AS (a * 2) STORED);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_gen_1\nINSERT INTO test_like_gen_1 (a) VALUES (1);"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT * FROM test_like_gen_1;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE test_like_gen_2 (LIKE test_like_gen_1);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_gen_2\nINSERT INTO test_like_gen_2 (a) VALUES (1);"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT * FROM test_like_gen_2;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE test_like_gen_3 (LIKE test_like_gen_1 INCLUDING GENERATED);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_gen_3\nINSERT INTO test_like_gen_3 (a) VALUES (1);"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT * FROM test_like_gen_3;"
        },
        {
            "name": "create_table_like.sql",
            "query": "DROP TABLE test_like_gen_1, test_like_gen_2, test_like_gen_3;"
        },
        {
            "name": "create_table_like.sql",
            "query": "-- also test generated column with a \"forward\" reference (bug #16342)\nCREATE TABLE test_like_4 (b int DEFAULT 42,\n  c int GENERATED ALWAYS AS (a * 2) STORED,\n  a int CHECK (a > 0));"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_4\nCREATE TABLE test_like_4a (LIKE test_like_4);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE test_like_4b (LIKE test_like_4 INCLUDING DEFAULTS);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE test_like_4c (LIKE test_like_4 INCLUDING GENERATED);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE test_like_4d (LIKE test_like_4 INCLUDING DEFAULTS INCLUDING GENERATED);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_4a\nINSERT INTO test_like_4a (a) VALUES(11);"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT a, b, c FROM test_like_4a;"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_4b\nINSERT INTO test_like_4b (a) VALUES(11);"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT a, b, c FROM test_like_4b;"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_4c\nINSERT INTO test_like_4c (a) VALUES(11);"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT a, b, c FROM test_like_4c;"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_4d\nINSERT INTO test_like_4d (a) VALUES(11);"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT a, b, c FROM test_like_4d;"
        },
        {
            "name": "create_table_like.sql",
            "query": "-- Test renumbering of Vars when combining LIKE with inheritance\nCREATE TABLE test_like_5 (x point, y point, z point);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE test_like_5x (p int CHECK (p > 0),\n   q int GENERATED ALWAYS AS (p * 2) STORED);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE test_like_5c (LIKE test_like_4 INCLUDING ALL)\n  INHERITS (test_like_5, test_like_5x);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d test_like_5c\n\nDROP TABLE test_like_4, test_like_4a, test_like_4b, test_like_4c, test_like_4d;"
        },
        {
            "name": "create_table_like.sql",
            "query": "DROP TABLE test_like_5, test_like_5x, test_like_5c;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE inhg (x text, LIKE inhx INCLUDING INDEXES, y text); /* copies indexes */\nINSERT INTO inhg VALUES (5, 10);"
        },
        {
            "name": "create_table_like.sql",
            "query": "INSERT INTO inhg VALUES (20, 10); -- should fail\nDROP TABLE inhg;"
        },
        {
            "name": "create_table_like.sql",
            "query": "/* Multiple primary keys creation should fail */\nCREATE TABLE inhg (x text, LIKE inhx INCLUDING INDEXES, PRIMARY KEY(x)); /* fails */\nCREATE TABLE inhz (xx text DEFAULT 'text', yy int UNIQUE);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE UNIQUE INDEX inhz_xx_idx on inhz (xx) WHERE xx <> 'test';"
        },
        {
            "name": "create_table_like.sql",
            "query": "/* Ok to create multiple unique indexes */\nCREATE TABLE inhg (x text UNIQUE, LIKE inhz INCLUDING INDEXES);"
        },
        {
            "name": "create_table_like.sql",
            "query": "INSERT INTO inhg (xx, yy, x) VALUES ('test', 5, 10);"
        },
        {
            "name": "create_table_like.sql",
            "query": "INSERT INTO inhg (xx, yy, x) VALUES ('test', 10, 15);"
        },
        {
            "name": "create_table_like.sql",
            "query": "INSERT INTO inhg (xx, yy, x) VALUES ('foo', 10, 15); -- should fail\nDROP TABLE inhg;"
        },
        {
            "name": "create_table_like.sql",
            "query": "DROP TABLE inhz;"
        },
        {
            "name": "create_table_like.sql",
            "query": "/* Use primary key imported by LIKE for self-referential FK constraint */\nCREATE TABLE inhz (x text REFERENCES inhz, LIKE inhx INCLUDING INDEXES);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d inhz\nDROP TABLE inhz;"
        },
        {
            "name": "create_table_like.sql",
            "query": "-- including storage and comments\nCREATE TABLE ctlt1 (a text CHECK (length(a) > 2) PRIMARY KEY, b text);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE INDEX ctlt1_b_key ON ctlt1 (b);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE INDEX ctlt1_fnidx ON ctlt1 ((a || b));"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE STATISTICS ctlt1_a_b_stat ON a,b FROM ctlt1;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE STATISTICS ctlt1_expr_stat ON (a || b) FROM ctlt1;"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON STATISTICS ctlt1_a_b_stat IS 'ab stats';"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON STATISTICS ctlt1_expr_stat IS 'ab expr stats';"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON COLUMN ctlt1.a IS 'A';"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON COLUMN ctlt1.b IS 'B';"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON CONSTRAINT ctlt1_a_check ON ctlt1 IS 't1_a_check';"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON INDEX ctlt1_pkey IS 'index pkey';"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON INDEX ctlt1_b_key IS 'index b_key';"
        },
        {
            "name": "create_table_like.sql",
            "query": "ALTER TABLE ctlt1 ALTER COLUMN a SET STORAGE MAIN;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt2 (c text);"
        },
        {
            "name": "create_table_like.sql",
            "query": "ALTER TABLE ctlt2 ALTER COLUMN c SET STORAGE EXTERNAL;"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON COLUMN ctlt2.c IS 'C';"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt3 (a text CHECK (length(a) < 5), c text CHECK (length(c) < 7));"
        },
        {
            "name": "create_table_like.sql",
            "query": "ALTER TABLE ctlt3 ALTER COLUMN c SET STORAGE EXTERNAL;"
        },
        {
            "name": "create_table_like.sql",
            "query": "ALTER TABLE ctlt3 ALTER COLUMN a SET STORAGE MAIN;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE INDEX ctlt3_fnidx ON ctlt3 ((a || c));"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON COLUMN ctlt3.a IS 'A3';"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON COLUMN ctlt3.c IS 'C';"
        },
        {
            "name": "create_table_like.sql",
            "query": "COMMENT ON CONSTRAINT ctlt3_a_check ON ctlt3 IS 't3_a_check';"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt4 (a text, c text);"
        },
        {
            "name": "create_table_like.sql",
            "query": "ALTER TABLE ctlt4 ALTER COLUMN c SET STORAGE EXTERNAL;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt12_storage (LIKE ctlt1 INCLUDING STORAGE, LIKE ctlt2 INCLUDING STORAGE);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d+ ctlt12_storage\nCREATE TABLE ctlt12_comments (LIKE ctlt1 INCLUDING COMMENTS, LIKE ctlt2 INCLUDING COMMENTS);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d+ ctlt12_comments\nCREATE TABLE ctlt1_inh (LIKE ctlt1 INCLUDING CONSTRAINTS INCLUDING COMMENTS) INHERITS (ctlt1);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d+ ctlt1_inh\nSELECT description FROM pg_description, pg_constraint c WHERE classoid = 'pg_constraint'::regclass AND objoid = c.oid AND c.conrelid = 'ctlt1_inh'::regclass;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt13_inh () INHERITS (ctlt1, ctlt3);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d+ ctlt13_inh\nCREATE TABLE ctlt13_like (LIKE ctlt3 INCLUDING CONSTRAINTS INCLUDING INDEXES INCLUDING COMMENTS INCLUDING STORAGE) INHERITS (ctlt1);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d+ ctlt13_like\nSELECT description FROM pg_description, pg_constraint c WHERE classoid = 'pg_constraint'::regclass AND objoid = c.oid AND c.conrelid = 'ctlt13_like'::regclass;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt_all (LIKE ctlt1 INCLUDING ALL);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d+ ctlt_all\nSELECT c.relname, objsubid, description FROM pg_description, pg_index i, pg_class c WHERE classoid = 'pg_class'::regclass AND objoid = i.indexrelid AND c.oid = i.indexrelid AND i.indrelid = 'ctlt_all'::regclass ORDER BY c.relname, objsubid;"
        },
        {
            "name": "create_table_like.sql",
            "query": "SELECT s.stxname, objsubid, description FROM pg_description, pg_statistic_ext s WHERE classoid = 'pg_statistic_ext'::regclass AND objoid = s.oid AND s.stxrelid = 'ctlt_all'::regclass ORDER BY s.stxname, objsubid;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE inh_error1 () INHERITS (ctlt1, ctlt4);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE inh_error2 (LIKE ctlt4 INCLUDING STORAGE) INHERITS (ctlt1);"
        },
        {
            "name": "create_table_like.sql",
            "query": "-- Check that LIKE isn't confused by a system catalog of the same name\nCREATE TABLE pg_attrdef (LIKE ctlt1 INCLUDING ALL);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d+ public.pg_attrdef\nDROP TABLE public.pg_attrdef;"
        },
        {
            "name": "create_table_like.sql",
            "query": "-- Check that LIKE isn't confused when new table masks the old, either\nBEGIN;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE SCHEMA ctl_schema;"
        },
        {
            "name": "create_table_like.sql",
            "query": "SET LOCAL search_path = ctl_schema, public;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt1 (LIKE ctlt1 INCLUDING ALL);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d+ ctlt1\nROLLBACK;"
        },
        {
            "name": "create_table_like.sql",
            "query": "DROP TABLE ctlt1, ctlt2, ctlt3, ctlt4, ctlt12_storage, ctlt12_comments, ctlt1_inh, ctlt13_inh, ctlt13_like, ctlt_all, ctla, ctlb CASCADE;"
        },
        {
            "name": "create_table_like.sql",
            "query": "-- LIKE must respect NO INHERIT property of constraints\nCREATE TABLE noinh_con_copy (a int CHECK (a > 0) NO INHERIT);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE noinh_con_copy1 (LIKE noinh_con_copy INCLUDING CONSTRAINTS);"
        },
        {
            "name": "create_table_like.sql",
            "query": "\\d noinh_con_copy1\n\n-- fail, as partitioned tables don't allow NO INHERIT constraints\nCREATE TABLE noinh_con_copy1_parted (LIKE noinh_con_copy INCLUDING ALL)\n  PARTITION BY LIST (a);"
        },
        {
            "name": "create_table_like.sql",
            "query": "DROP TABLE noinh_con_copy, noinh_con_copy1;"
        },
        {
            "name": "create_table_like.sql",
            "query": "/* LIKE with other relation kinds */\n\nCREATE TABLE ctlt4 (a int, b text);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE SEQUENCE ctlseq1;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt10 (LIKE ctlseq1);  -- fail\n\nCREATE VIEW ctlv1 AS SELECT * FROM ctlt4;"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt11 (LIKE ctlv1);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt11a (LIKE ctlv1 INCLUDING ALL);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TYPE ctlty1 AS (a int, b text);"
        },
        {
            "name": "create_table_like.sql",
            "query": "CREATE TABLE ctlt12 (LIKE ctlty1);"
        },
        {
            "name": "create_table_like.sql",
            "query": "DROP SEQUENCE ctlseq1;"
        },
        {
            "name": "create_table_like.sql",
            "query": "DROP TYPE ctlty1;"
        },
        {
            "name": "create_table_like.sql",
            "query": "DROP VIEW ctlv1;"
        },
        {
            "name": "create_table_like.sql",
            "query": "DROP TABLE IF EXISTS ctlt4, ctlt10, ctlt11, ctlt11a, ctlt12;"
        }
    ]
}