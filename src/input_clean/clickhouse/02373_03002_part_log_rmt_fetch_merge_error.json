{
    "name": "03002_part_log_rmt_fetch_merge_error.sql",
    "tests": [
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "-- Tags: no-replicated-database, no-parallel, no-shared-merge-tree\n-- SMT: The merge process is completely different from RMT\n\ndrop table if exists rmt_master;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "drop table if exists rmt_slave;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "create table rmt_master (key Int) engine=ReplicatedMergeTree('/clickhouse/{database}', 'master') order by key settings always_fetch_merged_part=0;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "-- always_fetch_merged_part=1, consider this table as a \"slave\"\ncreate table rmt_slave (key Int) engine=ReplicatedMergeTree('/clickhouse/{database}', 'slave') order by key settings always_fetch_merged_part=1;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "insert into rmt_master values (1);"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "system sync replica rmt_master;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "system sync replica rmt_slave;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "system stop replicated sends rmt_master;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "optimize table rmt_master final settings alter_sync=1, optimize_throw_if_noop=1;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "select sleep(3) format Null;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "system flush logs;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "select 'before';"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "select table, event_type, error>0, countIf(error=0) from system.part_log where database = currentDatabase() group by 1, 2, 3 order by 1, 2, 3;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "system start replicated sends rmt_master;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "-- sleep few seconds to try rmt_slave to fetch the part and reflect this error\n-- in system.part_log\nselect sleep(3) format Null;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "system sync replica rmt_slave;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "system flush logs;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "select 'after';"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "select table, event_type, error>0, countIf(error=0) from system.part_log where database = currentDatabase() group by 1, 2, 3 order by 1, 2, 3;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "drop table rmt_master;"
        },
        {
            "name": "03002_part_log_rmt_fetch_merge_error.sql",
            "query": "drop table rmt_slave;"
        }
    ]
}